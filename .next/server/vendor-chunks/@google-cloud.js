"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@google-cloud";
exports.ids = ["vendor-chunks/@google-cloud"];
exports.modules = {

/***/ "(rsc)/./node_modules/@google-cloud/bigquery/build/src/bigquery.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@google-cloud/bigquery/build/src/bigquery.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*!\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BigQueryInt = exports.BigQueryTime = exports.BigQueryDatetime = exports.BigQueryTimestamp = exports.Geography = exports.BigQueryDate = exports.BigQueryRange = exports.BigQuery = exports.PROTOCOL_REGEX = exports.common = void 0;\nconst common_1 = __webpack_require__(/*! @google-cloud/common */ \"(rsc)/./node_modules/@google-cloud/common/build/src/index.js\");\nconst common = __webpack_require__(/*! @google-cloud/common */ \"(rsc)/./node_modules/@google-cloud/common/build/src/index.js\");\nexports.common = common;\nconst paginator_1 = __webpack_require__(/*! @google-cloud/paginator */ \"(rsc)/./node_modules/@google-cloud/paginator/build/src/index.js\");\nconst promisify_1 = __webpack_require__(/*! @google-cloud/promisify */ \"(rsc)/./node_modules/@google-cloud/promisify/build/src/index.js\");\nconst precise_date_1 = __webpack_require__(/*! @google-cloud/precise-date */ \"(rsc)/./node_modules/@google-cloud/precise-date/build/src/index.js\");\nconst arrify = __webpack_require__(/*! arrify */ \"(rsc)/./node_modules/arrify/index.js\");\nconst Big = __webpack_require__(/*! big.js */ \"(rsc)/./node_modules/big.js/big.js\");\nconst extend = __webpack_require__(/*! extend */ \"(rsc)/./node_modules/extend/index.js\");\nconst is = __webpack_require__(/*! is */ \"(rsc)/./node_modules/is/index.js\");\nconst uuid = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/index.js\");\nconst dataset_1 = __webpack_require__(/*! ./dataset */ \"(rsc)/./node_modules/@google-cloud/bigquery/build/src/dataset.js\");\nconst job_1 = __webpack_require__(/*! ./job */ \"(rsc)/./node_modules/@google-cloud/bigquery/build/src/job.js\");\nconst table_1 = __webpack_require__(/*! ./table */ \"(rsc)/./node_modules/@google-cloud/bigquery/build/src/table.js\");\nconst logger_1 = __webpack_require__(/*! ./logger */ \"(rsc)/./node_modules/@google-cloud/bigquery/build/src/logger.js\");\nexports.PROTOCOL_REGEX = /^(\\w*):\\/\\//;\n/**\n * @typedef {object} BigQueryOptions\n * @property {string} [projectId] The project ID from the Google Developer's\n *     Console, e.g. 'grape-spaceship-123'. We will also check the environment\n *     variable `GCLOUD_PROJECT` for your project ID. If your app is running in\n *     an environment which supports {@link\n * https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\n * Application Default Credentials}, your project ID will be detected\n * automatically.\n * @property {string} [keyFilename] Full path to the a .json, .pem, or .p12 key\n *     downloaded from the Google Developers Console. If you provide a path to a\n *     JSON file, the `projectId` option above is not necessary. NOTE: .pem and\n *     .p12 require you to specify the `email` option as well.\n * @property {string} [token] An OAUTH access token. If provided, we will not\n *     manage fetching, re-using, and re-minting access tokens.\n * @property {string} [email] Account email address. Required when using a .pem\n *     or .p12 keyFilename.\n * @property {object} [credentials] Credentials object.\n * @property {string} [credentials.client_email]\n * @property {string} [credentials.private_key]\n * @property {Constructor} [promise] Custom promise module to use instead of\n *     native Promises.\n * @property {string[]} [scopes] Additional OAuth scopes to use in requests. For\n *     example, to access an external data source, you may need the\n *     `https://www.googleapis.com/auth/drive.readonly` scope.\n */\n/**\n * In the following examples from this page and the other modules (`Dataset`,\n * `Table`, etc.), we are going to be using a dataset from\n * {@link http://goo.gl/f2SXcb| data.gov} of higher education institutions.\n *\n * We will create a table with the correct schema, import the public CSV file\n * into that table, and query it for data.\n *\n * This client supports enabling query-related preview features via environmental\n * variables.  By setting the environment variable QUERY_PREVIEW_ENABLED to the string\n * \"TRUE\", the client will enable preview features, though behavior may still be\n * controlled via the bigquery service as well.  Currently, the feature(s) in scope\n * include: stateless queries (query execution without corresponding job metadata).\n *\n * @class\n *\n * See {@link https://cloud.google.com/bigquery/what-is-bigquery| What is BigQuery?}\n *\n * @param {BigQueryOptions} options Constructor options.\n *\n * @example Install the client library with <a href=\"https://www.npmjs.com/\">npm</a>:\n * ```\n * npm install @google-cloud/bigquery\n *\n * ```\n * @example Import the client library\n * ```\n * const {BigQuery} = require('@google-cloud/bigquery');\n *\n * ```\n * @example Create a client that uses <a href=\"https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\">Application Default Credentials (ADC)</a>:\n * ```\n * const bigquery = new BigQuery();\n *\n * ```\n * @example Create a client with <a href=\"https://cloud.google.com/docs/authentication/production#obtaining_and_providing_service_account_credentials_manually\">explicit credentials</a>:\n * ```\n * const bigquery = new BigQuery({\n *   projectId: 'your-project-id',\n *   keyFilename: '/path/to/keyfile.json'\n * });\n *\n * ```\n * @example <caption>include:samples/quickstart.js</caption>\n * region_tag:bigquery_quickstart\n * Full quickstart example:\n */\nclass BigQuery extends common_1.Service {\n    createQueryStream(options) {\n        // placeholder body, overwritten in constructor\n        return new paginator_1.ResourceStream({}, () => { });\n    }\n    getDatasetsStream(options) {\n        // placeholder body, overwritten in constructor\n        return new paginator_1.ResourceStream({}, () => { });\n    }\n    getJobsStream(options) {\n        // placeholder body, overwritten in constructor\n        return new paginator_1.ResourceStream({}, () => { });\n    }\n    constructor(options = {}) {\n        let universeDomain = 'googleapis.com';\n        const servicePath = 'bigquery';\n        if (options.universeDomain) {\n            universeDomain = BigQuery.sanitizeDomain(options.universeDomain);\n        }\n        const EMULATOR_HOST = process.env.BIGQUERY_EMULATOR_HOST;\n        let apiEndpoint = `https://${servicePath}.${universeDomain}`;\n        if (typeof EMULATOR_HOST === 'string') {\n            apiEndpoint = BigQuery.sanitizeEndpoint(EMULATOR_HOST);\n        }\n        if (options.apiEndpoint) {\n            apiEndpoint = BigQuery.sanitizeEndpoint(options.apiEndpoint);\n        }\n        options = Object.assign({}, options, {\n            apiEndpoint,\n        });\n        const baseUrl = EMULATOR_HOST || `${options.apiEndpoint}/bigquery/v2`;\n        const config = {\n            apiEndpoint: options.apiEndpoint,\n            baseUrl,\n            scopes: ['https://www.googleapis.com/auth/bigquery'],\n            packageJson: __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/@google-cloud/bigquery/package.json\"),\n            autoRetry: options.autoRetry,\n            maxRetries: options.maxRetries,\n            retryOptions: options.retryOptions,\n        };\n        if (options.scopes) {\n            config.scopes = config.scopes.concat(options.scopes);\n        }\n        super(config, options);\n        const QUERY_PREVIEW_ENABLED = process.env.QUERY_PREVIEW_ENABLED;\n        this._enableQueryPreview = false;\n        if (typeof QUERY_PREVIEW_ENABLED === 'string') {\n            if (QUERY_PREVIEW_ENABLED.toUpperCase() === 'TRUE') {\n                this._enableQueryPreview = true;\n            }\n        }\n        this._universeDomain = universeDomain;\n        this.location = options.location;\n        /**\n         * Run a query scoped to your project as a readable object stream.\n         *\n         * @method\n         * @param {object} query Configuration object. See {@link BigQuery.query} for a complete\n         *     list of options.\n         *\n         * @example\n         * ```\n         * const {BigQuery} = require('@google-cloud/bigquery');\n         * const bigquery = new BigQuery();\n         *\n         * const query = 'SELECT url FROM `publicdata.samples.github_nested` LIMIT\n         * 100';\n         *\n         * bigquery.createQueryStream(query)\n         *   .on('error', console.error)\n         *   .on('data', function(row) {\n         *     // row is a result from your query.\n         *   })\n         *   .on('end', function() {\n         *     // All rows retrieved.\n         *   });\n         *\n         * //-\n         * // If you anticipate many results, you can end a stream early to prevent\n         * // unnecessary processing and API requests.\n         * //-\n         * bigquery.createQueryStream(query)\n         *   .on('data', function(row) {\n         *     this.end();\n         *   });\n         * ```\n         */\n        this.createQueryStream = paginator_1.paginator.streamify('queryAsStream_');\n        /**\n         * List all or some of the {@link Dataset} objects in your project as\n         * a readable object stream.\n         *\n         * @param {object} [options] Configuration object. See\n         *     {@link BigQuery.getDatasets} for a complete list of options.\n         *\n         * @example\n         * ```\n         * const {BigQuery} = require('@google-cloud/bigquery');\n         * const bigquery = new BigQuery();\n         *\n         * bigquery.getDatasetsStream()\n         *   .on('error', console.error)\n         *   .on('data', function(dataset) {\n         *     // dataset is a Dataset object.\n         *   })\n         *   .on('end', function() {\n         *     // All datasets retrieved.\n         *   });\n         *\n         * //-\n         * // If you anticipate many results, you can end a stream early to prevent\n         * // unnecessary processing and API requests.\n         * //-\n         * bigquery.getDatasetsStream()\n         *   .on('data', function(dataset) {\n         *     this.end();\n         *   });\n         * ```\n         */\n        this.getDatasetsStream = paginator_1.paginator.streamify('getDatasets');\n        /**\n         * List all or some of the {@link Job} objects in your project as a\n         * readable object stream.\n         *\n         * @param {object} [options] Configuration object. See\n         *     {@link BigQuery.getJobs} for a complete list of options.\n         *\n         * @example\n         * ```\n         * const {BigQuery} = require('@google-cloud/bigquery');\n         * const bigquery = new BigQuery();\n         *\n         * bigquery.getJobsStream()\n         *   .on('error', console.error)\n         *   .on('data', function(job) {\n         *     // job is a Job object.\n         *   })\n         *   .on('end', function() {\n         *     // All jobs retrieved.\n         *   });\n         *\n         * //-\n         * // If you anticipate many results, you can end a stream early to prevent\n         * // unnecessary processing and API requests.\n         * //-\n         * bigquery.getJobsStream()\n         *   .on('data', function(job) {\n         *     this.end();\n         *   });\n         * ```\n         */\n        this.getJobsStream = paginator_1.paginator.streamify('getJobs');\n        // Disable `prettyPrint` for better performance.\n        // https://github.com/googleapis/nodejs-bigquery/issues/858\n        this.interceptors.push({\n            request: (reqOpts) => {\n                return extend(true, {}, reqOpts, { qs: { prettyPrint: false } });\n            },\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    trace_(msg, ...otherArgs) {\n        (0, logger_1.logger)('[bigquery]', msg, ...otherArgs);\n    }\n    get universeDomain() {\n        return this._universeDomain;\n    }\n    static sanitizeEndpoint(url) {\n        if (!exports.PROTOCOL_REGEX.test(url)) {\n            url = `https://${url}`;\n        }\n        return this.sanitizeDomain(url);\n    }\n    static sanitizeDomain(url) {\n        return url.replace(/\\/+$/, ''); // Remove trailing slashes\n    }\n    /**\n     * Merge a rowset returned from the API with a table schema.\n     *\n     * @private\n     *\n     * @param {object} schema\n     * @param {array} rows\n     * @param {object} options\n     * @param {boolean|IntegerTypeCastOptions} options.wrapIntegers Wrap values of\n     *     'INT64' type in {@link BigQueryInt} objects.\n     *     If a `boolean`, this will wrap values in {@link BigQueryInt} objects.\n     *     If an `object`, this will return a value returned by\n     *     `wrapIntegers.integerTypeCastFunction`.\n     *     Please see {@link IntegerTypeCastOptions} for options descriptions.\n     * @param {array} options.selectedFields List of fields to return.\n     * If unspecified, all fields are returned.\n     * @param {array} options.parseJSON parse a 'JSON' field into a JSON object.\n     * @returns Fields using their matching names from the table's schema.\n     */\n    static mergeSchemaWithRows_(schema, rows, options) {\n        // deep copy schema fields to avoid mutation\n        let schemaFields = extend(true, [], schema === null || schema === void 0 ? void 0 : schema.fields);\n        let selectedFields = extend(true, [], options.selectedFields);\n        if (options.selectedFields && options.selectedFields.length > 0) {\n            const selectedFieldsArray = options.selectedFields.map(c => {\n                return c.split('.');\n            });\n            const currentFields = selectedFieldsArray\n                .map(c => c.shift())\n                .filter(c => c !== undefined);\n            //filter schema fields based on selected fields.\n            schemaFields = schemaFields.filter(field => currentFields\n                .map(c => c.toLowerCase())\n                .indexOf(field.name.toLowerCase()) >= 0);\n            selectedFields = selectedFieldsArray\n                .filter(c => c.length > 0)\n                .map(c => c.join('.'));\n        }\n        return arrify(rows).map(mergeSchema).map(flattenRows);\n        function mergeSchema(row) {\n            return row.f.map((field, index) => {\n                const schemaField = schemaFields[index];\n                let value = field.v;\n                if (schemaField && schemaField.mode === 'REPEATED') {\n                    value = value.map(val => {\n                        return convertSchemaFieldValue(schemaField, val.v, {\n                            ...options,\n                            selectedFields,\n                        });\n                    });\n                }\n                else {\n                    value = convertSchemaFieldValue(schemaField, value, {\n                        ...options,\n                        selectedFields,\n                    });\n                }\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                const fieldObject = {};\n                fieldObject[schemaField.name] = value;\n                return fieldObject;\n            });\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        function flattenRows(rows) {\n            return rows.reduce((acc, row) => {\n                const key = Object.keys(row)[0];\n                acc[key] = row[key];\n                return acc;\n            }, {});\n        }\n    }\n    /**\n     * The `DATE` type represents a logical calendar date, independent of time\n     * zone. It does not represent a specific 24-hour time period. Rather, a given\n     * DATE value represents a different 24-hour period when interpreted in\n     * different time zones, and may represent a shorter or longer day during\n     * Daylight Savings Time transitions.\n     *\n     * @param {object|string} value The date. If a string, this should be in the\n     *     format the API describes: `YYYY-[M]M-[D]D`.\n     *     Otherwise, provide an object.\n     * @param {string|number} value.year Four digits.\n     * @param {string|number} value.month One or two digits.\n     * @param {string|number} value.day One or two digits.\n     *\n     * @example\n     * ```\n     * const {BigQuery} = require('@google-cloud/bigquery');\n     * const bigquery = new BigQuery();\n     * const date = bigquery.date('2017-01-01');\n     *\n     * //-\n     * // Alternatively, provide an object.\n     * //-\n     * const date2 = bigquery.date({\n     *   year: 2017,\n     *   month: 1,\n     *   day: 1\n     * });\n     * ```\n     */\n    static date(value) {\n        return new BigQueryDate(value);\n    }\n    /**\n     * @param {object|string} value The date. If a string, this should be in the\n     *     format the API describes: `YYYY-[M]M-[D]D`.\n     *     Otherwise, provide an object.\n     * @param {string|number} value.year Four digits.\n     * @param {string|number} value.month One or two digits.\n     * @param {string|number} value.day One or two digits.\n     *\n     * @example\n     * ```\n     * const {BigQuery} = require('@google-cloud/bigquery');\n     * const date = BigQuery.date('2017-01-01');\n     *\n     * //-\n     * // Alternatively, provide an object.\n     * //-\n     * const date2 = BigQuery.date({\n     *   year: 2017,\n     *   month: 1,\n     *   day: 1\n     * });\n     * ```\n     */\n    date(value) {\n        return BigQuery.date(value);\n    }\n    /**\n     * A `DATETIME` data type represents a point in time. Unlike a `TIMESTAMP`,\n     * this does not refer to an absolute instance in time. Instead, it is the\n     * civil time, or the time that a user would see on a watch or calendar.\n     *\n     * @method BigQuery.datetime\n     * @param {object|string} value The time. If a string, this should be in the\n     *     format the API describes: `YYYY-[M]M-[D]D[ [H]H:[M]M:[S]S[.DDDDDD]]`.\n     *     Otherwise, provide an object.\n     * @param {string|number} value.year Four digits.\n     * @param {string|number} value.month One or two digits.\n     * @param {string|number} value.day One or two digits.\n     * @param {string|number} [value.hours] One or two digits (`00` - `23`).\n     * @param {string|number} [value.minutes] One or two digits (`00` - `59`).\n     * @param {string|number} [value.seconds] One or two digits (`00` - `59`).\n     * @param {string|number} [value.fractional] Up to six digits for microsecond\n     *     precision.\n     *\n     * @example\n     * ```\n     * const {BigQuery} = require('@google-cloud/bigquery');\n     * const datetime = BigQuery.datetime('2017-01-01 13:00:00');\n     *\n     * //-\n     * // Alternatively, provide an object.\n     * //-\n     * const datetime = BigQuery.datetime({\n     *   year: 2017,\n     *   month: 1,\n     *   day: 1,\n     *   hours: 14,\n     *   minutes: 0,\n     *   seconds: 0\n     * });\n     * ```\n     */\n    /**\n     * A `DATETIME` data type represents a point in time. Unlike a `TIMESTAMP`,\n     * this does not refer to an absolute instance in time. Instead, it is the\n     * civil time, or the time that a user would see on a watch or calendar.\n     *\n     * @param {object|string} value The time. If a string, this should be in the\n     *     format the API describes: `YYYY-[M]M-[D]D[ [H]H:[M]M:[S]S[.DDDDDD]]`.\n     *     Otherwise, provide an object.\n     * @param {string|number} value.year Four digits.\n     * @param {string|number} value.month One or two digits.\n     * @param {string|number} value.day One or two digits.\n     * @param {string|number} [value.hours] One or two digits (`00` - `23`).\n     * @param {string|number} [value.minutes] One or two digits (`00` - `59`).\n     * @param {string|number} [value.seconds] One or two digits (`00` - `59`).\n     * @param {string|number} [value.fractional] Up to six digits for microsecond\n     *     precision.\n     *\n     * @example\n     * ```\n     * const {BigQuery} = require('@google-cloud/bigquery');\n     * const bigquery = new BigQuery();\n     * const datetime = bigquery.datetime('2017-01-01 13:00:00');\n     *\n     * //-\n     * // Alternatively, provide an object.\n     * //-\n     * const datetime = bigquery.datetime({\n     *   year: 2017,\n     *   month: 1,\n     *   day: 1,\n     *   hours: 14,\n     *   minutes: 0,\n     *   seconds: 0\n     * });\n     * ```\n     */\n    static datetime(value) {\n        return new BigQueryDatetime(value);\n    }\n    datetime(value) {\n        return BigQuery.datetime(value);\n    }\n    /**\n     * A `TIME` data type represents a time, independent of a specific date.\n     *\n     * @method BigQuery.time\n     * @param {object|string} value The time. If a string, this should be in the\n     *     format the API describes: `[H]H:[M]M:[S]S[.DDDDDD]`. Otherwise, provide\n     *     an object.\n     * @param {string|number} [value.hours] One or two digits (`00` - `23`).\n     * @param {string|number} [value.minutes] One or two digits (`00` - `59`).\n     * @param {string|number} [value.seconds] One or two digits (`00` - `59`).\n     * @param {string|number} [value.fractional] Up to six digits for microsecond\n     *     precision.\n     *\n     * @example\n     * ```\n     * const {BigQuery} = require('@google-cloud/bigquery');\n     * const time = BigQuery.time('14:00:00'); // 2:00 PM\n     *\n     * //-\n     * // Alternatively, provide an object.\n     * //-\n     * const time = BigQuery.time({\n     *   hours: 14,\n     *   minutes: 0,\n     *   seconds: 0\n     * });\n     * ```\n     */\n    /**\n     * A `TIME` data type represents a time, independent of a specific date.\n     *\n     * @param {object|string} value The time. If a string, this should be in the\n     *     format the API describes: `[H]H:[M]M:[S]S[.DDDDDD]`. Otherwise, provide\n     *     an object.\n     * @param {string|number} [value.hours] One or two digits (`00` - `23`).\n     * @param {string|number} [value.minutes] One or two digits (`00` - `59`).\n     * @param {string|number} [value.seconds] One or two digits (`00` - `59`).\n     * @param {string|number} [value.fractional] Up to six digits for microsecond\n     *     precision.\n     *\n     * @example\n     * ```\n     * const {BigQuery} = require('@google-cloud/bigquery');\n     * const bigquery = new BigQuery();\n     * const time = bigquery.time('14:00:00'); // 2:00 PM\n     *\n     * //-\n     * // Alternatively, provide an object.\n     * //-\n     * const time = bigquery.time({\n     *   hours: 14,\n     *   minutes: 0,\n     *   seconds: 0\n     * });\n     * ```\n     */\n    static time(value) {\n        return new BigQueryTime(value);\n    }\n    time(value) {\n        return BigQuery.time(value);\n    }\n    /**\n     * A timestamp represents an absolute point in time, independent of any time\n     * zone or convention such as Daylight Savings Time.\n     *\n     * The recommended input here is a `Date` or `PreciseDate` class.\n     * If passing as a `string`, it should be Timestamp literals: https://cloud.google.com/bigquery/docs/reference/standard-sql/lexical#timestamp_literals.\n     * When passing a `number` input, it should be epoch seconds in float representation.\n     *\n     * @method BigQuery.timestamp\n     * @param {Date|string} value The time.\n     *\n     * @example\n     * ```\n     * const {BigQuery} = require('@google-cloud/bigquery');\n     * const timestamp = BigQuery.timestamp(new Date());\n     * ```\n     */\n    static timestamp(value) {\n        return new BigQueryTimestamp(value);\n    }\n    /**\n     * A timestamp represents an absolute point in time, independent of any time\n     * zone or convention such as Daylight Savings Time.\n     *\n     * The recommended input here is a `Date` or `PreciseDate` class.\n     * If passing as a `string`, it should be Timestamp literals: https://cloud.google.com/bigquery/docs/reference/standard-sql/lexical#timestamp_literals.\n     * When passing a `number` input, it should be epoch seconds in float representation.\n     *\n     * @param {Date|string|string|number} value The time.\n     *\n     * @example\n     * ```\n     * const {BigQuery} = require('@google-cloud/bigquery');\n     * const bigquery = new BigQuery();\n     * const timestamp = bigquery.timestamp(new Date());\n     * ```\n     */\n    timestamp(value) {\n        return BigQuery.timestamp(value);\n    }\n    /**\n     * A range represents contiguous range between two dates, datetimes, or timestamps.\n     * The lower and upper bound for the range are optional.\n     * The lower bound is inclusive and the upper bound is exclusive.\n     *\n     * @method BigQuery.range\n     * @param {string|BigQueryRangeOptions} value The range API string or start/end with dates/datetimes/timestamp ranges.\n     * @param {string} elementType The range element type - DATE|DATETIME|TIMESTAMP\n     *\n     * @example\n     * ```\n     * const {BigQuery} = require('@google-cloud/bigquery');\n     * const timestampRange = BigQuery.range('[2020-10-01 12:00:00+08, 2020-12-31 12:00:00+08)', 'TIMESTAMP');\n     * ```\n     */\n    static range(value, elementType) {\n        return new BigQueryRange(value, elementType);\n    }\n    /**\n     * A range represents contiguous range between two dates, datetimes, or timestamps.\n     * The lower and upper bound for the range are optional.\n     * The lower bound is inclusive and the upper bound is exclusive.\n     *\n     * @param {string|BigQueryRangeOptions} value The range API string or start/end with dates/datetimes/timestamp ranges.\n     * @param {string} elementType The range element type - DATE|DATETIME|TIMESTAMP\n     *\n     * @example\n     * ```\n     * const {BigQuery} = require('@google-cloud/bigquery');\n     * const bigquery = new BigQuery();\n     * const timestampRange = bigquery.range('[2020-10-01 12:00:00+08, 2020-12-31 12:00:00+08)', 'TIMESTAMP');\n     * ```\n     */\n    range(value, elementType) {\n        return BigQuery.range(value, elementType);\n    }\n    /**\n     * A BigQueryInt wraps 'INT64' values. Can be used to maintain precision.\n     *\n     * @param {string|number|IntegerTypeCastValue} value The INT64 value to convert.\n     * @param {IntegerTypeCastOptions} typeCastOptions Configuration to convert\n     *     value. Must provide an `integerTypeCastFunction` to handle conversion.\n     * @returns {BigQueryInt}\n     *\n     * @example\n     * ```\n     * const {BigQuery} = require('@google-cloud/bigquery');\n     * const bigquery = new BigQuery();\n     *\n     * const largeIntegerValue = Number.MAX_SAFE_INTEGER + 1;\n     *\n     * const options = {\n     *   integerTypeCastFunction: value => value.split(),\n     * };\n     *\n     * const bqInteger = bigquery.int(largeIntegerValue, options);\n     *\n     * const customValue = bqInteger.valueOf();\n     * // customValue is the value returned from your `integerTypeCastFunction`.\n     * ```\n     */\n    static int(value, typeCastOptions) {\n        return new BigQueryInt(value, typeCastOptions);\n    }\n    int(value, typeCastOptions) {\n        return BigQuery.int(value, typeCastOptions);\n    }\n    /**\n     * A geography value represents a surface area on the Earth\n     * in Well-known Text (WKT) format.\n     *\n     * @param {string} value The geospatial data.\n     *\n     * @example\n     * ```\n     * const {BigQuery} = require('@google-cloud/bigquery');\n     * const bigquery = new BigQuery();\n     * const geography = bigquery.geography('POINT(1, 2)');\n     * ```\n     */\n    static geography(value) {\n        return new Geography(value);\n    }\n    geography(value) {\n        return BigQuery.geography(value);\n    }\n    /**\n     * Convert an INT64 value to Number.\n     *\n     * @private\n     * @param {object} value The INT64 value to convert.\n     */\n    static decodeIntegerValue_(value) {\n        const num = Number(value.integerValue);\n        if (!Number.isSafeInteger(num)) {\n            throw new Error('We attempted to return all of the numeric values, but ' +\n                (value.schemaFieldName ? value.schemaFieldName + ' ' : '') +\n                'value ' +\n                value.integerValue +\n                \" is out of bounds of 'Number.MAX_SAFE_INTEGER'.\\n\" +\n                \"To prevent this error, please consider passing 'options.wrapIntegers' as\\n\" +\n                '{\\n' +\n                '  integerTypeCastFunction: provide <your_custom_function>\\n' +\n                '  fields: optionally specify field name(s) to be custom casted\\n' +\n                '}\\n');\n        }\n        return num;\n    }\n    /**\n     * Return a value's provided type.\n     *\n     * @private\n     *\n     * @throws {error} If the type provided is invalid.\n     *\n     * See {@link https://cloud.google.com/bigquery/data-types| Data Type}\n     *\n     * @param {*} providedType The type.\n     * @returns {string} The valid type provided.\n     */\n    static getTypeDescriptorFromProvidedType_(providedType) {\n        // The list of types can be found in src/types.d.ts\n        const VALID_TYPES = [\n            'DATE',\n            'DATETIME',\n            'TIME',\n            'TIMESTAMP',\n            'BYTES',\n            'NUMERIC',\n            'DECIMAL',\n            'BIGNUMERIC',\n            'BIGDECIMAL',\n            'BOOL',\n            'INT64',\n            'INT',\n            'SMALLINT',\n            'INTEGER',\n            'BIGINT',\n            'TINYINT',\n            'BYTEINT',\n            'FLOAT64',\n            'FLOAT',\n            'STRING',\n            'GEOGRAPHY',\n            'ARRAY',\n            'STRUCT',\n            'JSON',\n            'RANGE',\n        ];\n        if (is.array(providedType)) {\n            providedType = providedType;\n            return {\n                type: 'ARRAY',\n                arrayType: BigQuery.getTypeDescriptorFromProvidedType_(providedType[0]),\n            };\n        }\n        else if (is.object(providedType)) {\n            return {\n                type: 'STRUCT',\n                structTypes: Object.keys(providedType).map(prop => {\n                    return {\n                        name: prop,\n                        type: BigQuery.getTypeDescriptorFromProvidedType_(providedType[prop]),\n                    };\n                }),\n            };\n        }\n        providedType = providedType.toUpperCase();\n        if (!VALID_TYPES.includes(providedType)) {\n            throw new Error(`Invalid type provided: \"${providedType}\"`);\n        }\n        return { type: providedType.toUpperCase() };\n    }\n    /**\n     * Detect a value's type.\n     *\n     * @private\n     *\n     * @throws {error} If the type could not be detected.\n     *\n     * See {@link https://cloud.google.com/bigquery/data-types| Data Type}\n     *\n     * @param {*} value The value.\n     * @returns {string} The type detected from the value.\n     */\n    static getTypeDescriptorFromValue_(value) {\n        let typeName;\n        if (value === null) {\n            throw new Error(\"Parameter types must be provided for null values via the 'types' field in query options.\");\n        }\n        if (value instanceof BigQueryDate) {\n            typeName = 'DATE';\n        }\n        else if (value instanceof BigQueryDatetime) {\n            typeName = 'DATETIME';\n        }\n        else if (value instanceof BigQueryTime) {\n            typeName = 'TIME';\n        }\n        else if (value instanceof BigQueryTimestamp) {\n            typeName = 'TIMESTAMP';\n        }\n        else if (value instanceof Buffer) {\n            typeName = 'BYTES';\n        }\n        else if (value instanceof Big) {\n            if (value.c.length - value.e >= 10) {\n                typeName = 'BIGNUMERIC';\n            }\n            else {\n                typeName = 'NUMERIC';\n            }\n        }\n        else if (value instanceof BigQueryInt) {\n            typeName = 'INT64';\n        }\n        else if (value instanceof Geography) {\n            typeName = 'GEOGRAPHY';\n        }\n        else if (value instanceof BigQueryRange) {\n            return {\n                type: 'RANGE',\n                rangeElementType: {\n                    type: value.elementType,\n                },\n            };\n        }\n        else if (Array.isArray(value)) {\n            if (value.length === 0) {\n                throw new Error(\"Parameter types must be provided for empty arrays via the 'types' field in query options.\");\n            }\n            return {\n                type: 'ARRAY',\n                arrayType: BigQuery.getTypeDescriptorFromValue_(value[0]),\n            };\n        }\n        else if (is.boolean(value)) {\n            typeName = 'BOOL';\n        }\n        else if (is.number(value)) {\n            typeName = value % 1 === 0 ? 'INT64' : 'FLOAT64';\n        }\n        else if (is.object(value)) {\n            return {\n                type: 'STRUCT',\n                structTypes: Object.keys(value).map(prop => {\n                    return {\n                        name: prop,\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        type: BigQuery.getTypeDescriptorFromValue_(value[prop]),\n                    };\n                }),\n            };\n        }\n        else if (is.string(value)) {\n            typeName = 'STRING';\n        }\n        if (!typeName) {\n            throw new Error([\n                'This value could not be translated to a BigQuery data type.',\n                value,\n            ].join('\\n'));\n        }\n        return {\n            type: typeName,\n        };\n    }\n    /**\n     * Convert a value into a `queryParameter` object.\n     *\n     * @private\n     *\n     * See {@link https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/query#request-body| Jobs.query API Reference Docs (see `queryParameters`)}\n     *\n     * @param {*} value The value.\n     * @param {string|ProvidedTypeStruct|ProvidedTypeArray} providedType Provided\n     *     query parameter type.\n     * @returns {object} A properly-formed `queryParameter` object.\n     */\n    static valueToQueryParameter_(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    value, providedType) {\n        var _a, _b;\n        if (is.date(value)) {\n            value = BigQuery.timestamp(value);\n        }\n        let parameterType;\n        if (providedType) {\n            parameterType = BigQuery.getTypeDescriptorFromProvidedType_(providedType);\n        }\n        else {\n            parameterType = BigQuery.getTypeDescriptorFromValue_(value);\n        }\n        const queryParameter = { parameterType, parameterValue: {} };\n        const typeName = queryParameter.parameterType.type;\n        if (typeName === 'ARRAY') {\n            queryParameter.parameterValue.arrayValues = value.map(itemValue => {\n                const value = BigQuery._getValue(itemValue, parameterType.arrayType);\n                if (is.object(value) || is.array(value)) {\n                    if (is.array(providedType)) {\n                        providedType = providedType;\n                        return BigQuery.valueToQueryParameter_(value, providedType[0])\n                            .parameterValue;\n                    }\n                    else {\n                        return BigQuery.valueToQueryParameter_(value).parameterValue;\n                    }\n                }\n                return { value };\n            });\n        }\n        else if (typeName === 'STRUCT') {\n            queryParameter.parameterValue.structValues = Object.keys(value).reduce((structValues, prop) => {\n                let nestedQueryParameter;\n                if (providedType) {\n                    nestedQueryParameter = BigQuery.valueToQueryParameter_(value[prop], providedType[prop]);\n                }\n                else {\n                    nestedQueryParameter = BigQuery.valueToQueryParameter_(value[prop]);\n                }\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                structValues[prop] = nestedQueryParameter.parameterValue;\n                return structValues;\n            }, {});\n        }\n        else if (typeName === 'RANGE') {\n            let rangeValue;\n            if (value instanceof BigQueryRange) {\n                rangeValue = value;\n            }\n            else {\n                rangeValue = BigQuery.range(value, (_b = (_a = queryParameter.parameterType) === null || _a === void 0 ? void 0 : _a.rangeElementType) === null || _b === void 0 ? void 0 : _b.type);\n            }\n            queryParameter.parameterValue.rangeValue = {\n                start: {\n                    value: rangeValue.value.start,\n                },\n                end: {\n                    value: rangeValue.value.end,\n                },\n            };\n        }\n        else if (typeName === 'JSON' && is.object(value)) {\n            queryParameter.parameterValue.value = JSON.stringify(value);\n        }\n        else {\n            queryParameter.parameterValue.value = BigQuery._getValue(value, parameterType);\n        }\n        return queryParameter;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static _getValue(value, type) {\n        if (value === null) {\n            return null;\n        }\n        if (value.type)\n            type = value;\n        return BigQuery._isCustomType(type) ? value.value : value;\n    }\n    static _isCustomType({ type }) {\n        return (type.indexOf('TIME') > -1 ||\n            type.indexOf('DATE') > -1 ||\n            type.indexOf('GEOGRAPHY') > -1 ||\n            type.indexOf('RANGE') > -1 ||\n            type.indexOf('BigQueryInt') > -1);\n    }\n    createDataset(id, optionsOrCallback, cb) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        const callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : cb;\n        const reqOpts = {\n            method: 'POST',\n            uri: '/datasets',\n            json: extend(true, {\n                location: this.location,\n            }, options, {\n                datasetReference: {\n                    datasetId: id,\n                },\n            }),\n        };\n        if (options.projectId) {\n            reqOpts.projectId = options.projectId;\n        }\n        this.request(reqOpts, (err, resp) => {\n            if (err) {\n                callback(err, null, resp);\n                return;\n            }\n            const dataset = this.dataset(id, options);\n            dataset.metadata = resp;\n            callback(null, dataset, resp);\n        });\n    }\n    createQueryJob(opts, callback) {\n        const options = typeof opts === 'object' ? opts : { query: opts };\n        this.trace_('[createQueryJob]', options, callback);\n        if ((!options || !options.query) && !options.pageToken) {\n            throw new Error('A SQL query string is required.');\n        }\n        const query = extend(true, {\n            useLegacySql: false,\n        }, options);\n        this.trace_('[createQueryJob]', query);\n        if (options.destination) {\n            if (!(options.destination instanceof table_1.Table)) {\n                throw new Error('Destination must be a Table object.');\n            }\n            query.destinationTable = {\n                datasetId: options.destination.dataset.id,\n                projectId: options.destination.dataset.projectId,\n                tableId: options.destination.id,\n            };\n            delete query.destination;\n        }\n        if (query.params) {\n            const { parameterMode, params } = this.buildQueryParams_(query.params, query.types);\n            query.parameterMode = parameterMode;\n            query.queryParameters = params;\n            delete query.params;\n        }\n        const reqOpts = {};\n        reqOpts.configuration = {\n            query,\n        };\n        if (typeof query.jobTimeoutMs === 'number') {\n            reqOpts.configuration.jobTimeoutMs = query.jobTimeoutMs.toString();\n            delete query.jobTimeoutMs;\n        }\n        if (query.dryRun) {\n            reqOpts.configuration.dryRun = query.dryRun;\n            delete query.dryRun;\n        }\n        if (query.labels) {\n            reqOpts.configuration.labels = query.labels;\n            delete query.labels;\n        }\n        if (query.jobPrefix) {\n            reqOpts.jobPrefix = query.jobPrefix;\n            delete query.jobPrefix;\n        }\n        if (query.location) {\n            reqOpts.location = query.location;\n            delete query.location;\n        }\n        if (query.jobId) {\n            reqOpts.jobId = query.jobId;\n            delete query.jobId;\n        }\n        this.createJob(reqOpts, callback);\n    }\n    buildQueryParams_(params, types) {\n        if (!params) {\n            return {\n                parameterMode: undefined,\n                params: undefined,\n            };\n        }\n        const parameterMode = is.array(params) ? 'positional' : 'named';\n        const queryParameters = [];\n        if (parameterMode === 'named') {\n            const namedParams = params;\n            for (const namedParameter of Object.getOwnPropertyNames(namedParams)) {\n                const value = namedParams[namedParameter];\n                let queryParameter;\n                if (types) {\n                    if (!is.object(types)) {\n                        throw new Error('Provided types must match the value type passed to `params`');\n                    }\n                    const namedTypes = types;\n                    if (namedTypes[namedParameter]) {\n                        queryParameter = BigQuery.valueToQueryParameter_(value, namedTypes[namedParameter]);\n                    }\n                    else {\n                        queryParameter = BigQuery.valueToQueryParameter_(value);\n                    }\n                }\n                else {\n                    queryParameter = BigQuery.valueToQueryParameter_(value);\n                }\n                queryParameter.name = namedParameter;\n                queryParameters.push(queryParameter);\n            }\n        }\n        else {\n            if (types) {\n                if (!is.array(types)) {\n                    throw new Error('Provided types must match the value type passed to `params`');\n                }\n                const positionalTypes = types;\n                if (params.length !== types.length) {\n                    throw new Error('Incorrect number of parameter types provided.');\n                }\n                params.forEach((value, i) => {\n                    const queryParameter = BigQuery.valueToQueryParameter_(value, positionalTypes[i]);\n                    queryParameters.push(queryParameter);\n                });\n            }\n            else {\n                params.forEach((value) => {\n                    const queryParameter = BigQuery.valueToQueryParameter_(value);\n                    queryParameters.push(queryParameter);\n                });\n            }\n        }\n        return {\n            parameterMode,\n            params: queryParameters,\n        };\n    }\n    createJob(options, callback) {\n        var _a;\n        const JOB_ID_PROVIDED = typeof options.jobId !== 'undefined';\n        const DRY_RUN = ((_a = options.configuration) === null || _a === void 0 ? void 0 : _a.dryRun)\n            ? options.configuration.dryRun\n            : false;\n        const reqOpts = Object.assign({}, options);\n        let jobId = JOB_ID_PROVIDED ? reqOpts.jobId : uuid.v4();\n        if (reqOpts.jobId) {\n            delete reqOpts.jobId;\n        }\n        if (reqOpts.jobPrefix) {\n            jobId = reqOpts.jobPrefix + jobId;\n            delete reqOpts.jobPrefix;\n        }\n        reqOpts.jobReference = {\n            projectId: this.projectId,\n            jobId,\n            location: this.location,\n        };\n        if (options.location) {\n            reqOpts.jobReference.location = options.location;\n            delete reqOpts.location;\n        }\n        const job = this.job(jobId, {\n            location: reqOpts.jobReference.location,\n        });\n        this.request({\n            method: 'POST',\n            uri: '/jobs',\n            json: reqOpts,\n        }, async (err, resp) => {\n            const ALREADY_EXISTS_CODE = 409;\n            if (err) {\n                if (err.code === ALREADY_EXISTS_CODE &&\n                    !JOB_ID_PROVIDED &&\n                    !DRY_RUN) {\n                    // The last insert attempt flaked, but the API still processed the\n                    // request and created the job. Because of our \"autoRetry\" feature,\n                    // we tried the request again, which tried to create it again,\n                    // unnecessarily. We will get the job's metadata and treat it as if\n                    // it just came back from the create call.\n                    err = null;\n                    [resp] = await job.getMetadata();\n                }\n                else {\n                    callback(err, null, resp);\n                    return;\n                }\n            }\n            if (resp.status.errors) {\n                err = new common_1.util.ApiError({\n                    errors: resp.status.errors,\n                    response: resp,\n                });\n            }\n            // Update the location with the one used by the API.\n            job.location = resp.jobReference.location;\n            job.metadata = resp;\n            callback(err, job, resp);\n        });\n    }\n    /**\n     * Create a reference to a dataset.\n     *\n     * @param {string} id ID of the dataset.\n     * @param {object} [options] Dataset options.\n     * @param {string} [options.projectId] The GCP project ID.\n     * @param {string} [options.location] The geographic location of the dataset.\n     *      Required except for US and EU.\n     *\n     * @example\n     * ```\n     * const {BigQuery} = require('@google-cloud/bigquery');\n     * const bigquery = new BigQuery();\n     * const dataset = bigquery.dataset('higher_education');\n     * ```\n     */\n    dataset(id, options) {\n        if (typeof id !== 'string') {\n            throw new TypeError('A dataset ID is required.');\n        }\n        if (this.location) {\n            options = extend({ location: this.location }, options);\n        }\n        return new dataset_1.Dataset(this, id, options);\n    }\n    getDatasets(optionsOrCallback, cb) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        const callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : cb;\n        const reqOpts = {\n            uri: '/datasets',\n            qs: options,\n        };\n        if (options.projectId) {\n            reqOpts.projectId = options.projectId;\n        }\n        this.request(reqOpts, (err, resp) => {\n            if (err) {\n                callback(err, null, null, resp);\n                return;\n            }\n            let nextQuery = null;\n            if (resp.nextPageToken) {\n                nextQuery = Object.assign({}, options, {\n                    pageToken: resp.nextPageToken,\n                });\n            }\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const datasets = (resp.datasets || []).map((dataset) => {\n                const dsOpts = {\n                    location: dataset.location,\n                };\n                if (options.projectId) {\n                    dsOpts.projectId = options.projectId;\n                }\n                const ds = this.dataset(dataset.datasetReference.datasetId, dsOpts);\n                ds.metadata = dataset;\n                return ds;\n            });\n            callback(null, datasets, nextQuery, resp);\n        });\n    }\n    getJobs(optionsOrCallback, cb) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        const callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : cb;\n        this.request({\n            uri: '/jobs',\n            qs: options,\n            useQuerystring: true,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, null, resp);\n                return;\n            }\n            let nextQuery = null;\n            if (resp.nextPageToken) {\n                nextQuery = Object.assign({}, options, {\n                    pageToken: resp.nextPageToken,\n                });\n            }\n            const jobs = (resp.jobs || []).map((jobObject) => {\n                const job = this.job(jobObject.jobReference.jobId, {\n                    location: jobObject.jobReference.location,\n                });\n                job.metadata = jobObject;\n                return job;\n            });\n            callback(null, jobs, nextQuery, resp);\n        });\n    }\n    /**\n     * Create a reference to an existing job.\n     *\n     * @param {string} id ID of the job.\n     * @param {object} [options] Configuration object.\n     * @param {string} [options.location] The geographic location of the job.\n     *      Required except for US and EU.\n     *\n     * @example\n     * ```\n     * const {BigQuery} = require('@google-cloud/bigquery');\n     * const bigquery = new BigQuery();\n     *\n     * const myExistingJob = bigquery.job('job-id');\n     * ```\n     */\n    job(id, options) {\n        if (this.location) {\n            options = extend({ location: this.location }, options);\n        }\n        return new job_1.Job(this, id, options);\n    }\n    query(query, optionsOrCallback, cb) {\n        let options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        const queryOpts = typeof query === 'object'\n            ? {\n                wrapIntegers: query.wrapIntegers,\n                parseJSON: query.parseJSON,\n            }\n            : {};\n        const callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : cb;\n        this.trace_('[query]', query, options);\n        const queryReq = this.buildQueryRequest_(query, options);\n        this.trace_('[query] queryReq', queryReq);\n        if (!queryReq) {\n            this.createQueryJob(query, (err, job, resp) => {\n                if (err) {\n                    callback(err, null, resp);\n                    return;\n                }\n                if (typeof query === 'object' && query.dryRun) {\n                    callback(null, [], resp);\n                    return;\n                }\n                // The Job is important for the `queryAsStream_` method, so a new query\n                // isn't created each time results are polled for.\n                options = extend({ job }, queryOpts, options);\n                job.getQueryResults(options, callback);\n            });\n            return;\n        }\n        this.runJobsQuery(queryReq, (err, job, res) => {\n            this.trace_('[runJobsQuery callback]: ', query, err, job, res);\n            if (err) {\n                callback(err, null, job);\n                return;\n            }\n            options = extend({ job }, queryOpts, options);\n            if (res && res.jobComplete) {\n                let rows = [];\n                if (res.schema && res.rows) {\n                    rows = BigQuery.mergeSchemaWithRows_(res.schema, res.rows, {\n                        wrapIntegers: options.wrapIntegers || false,\n                        parseJSON: options.parseJSON,\n                    });\n                    delete res.rows;\n                }\n                this.trace_('[runJobsQuery] job complete');\n                options._cachedRows = rows;\n                options._cachedResponse = res;\n                if (res.pageToken) {\n                    this.trace_('[runJobsQuery] has more pages');\n                    options.pageToken = res.pageToken;\n                }\n                else {\n                    this.trace_('[runJobsQuery] no more pages');\n                }\n                job.getQueryResults(options, callback);\n                return;\n            }\n            // If timeout override was provided, return error.\n            if (queryReq.timeoutMs) {\n                const err = new Error(`The query did not complete before ${queryReq.timeoutMs}ms`);\n                callback(err, null, job);\n                return;\n            }\n            delete options.timeoutMs;\n            this.trace_('[runJobsQuery] job not complete');\n            job.getQueryResults(options, callback);\n        });\n    }\n    /**\n     * Check if the given Query can run using the `jobs.query` endpoint.\n     * Returns a bigquery.IQueryRequest that can be used to call `jobs.query`.\n     * Return undefined if is not possible to convert to a bigquery.IQueryRequest.\n     *\n     * @param query string | Query\n     * @param options QueryOptions\n     * @returns bigquery.IQueryRequest | undefined\n     */\n    buildQueryRequest_(query, options) {\n        if (process.env.FAST_QUERY_PATH === 'DISABLED') {\n            return undefined;\n        }\n        const queryObj = typeof query === 'string'\n            ? {\n                query: query,\n            }\n            : query;\n        this.trace_('[buildQueryRequest]', query, options, queryObj);\n        // This is a denylist of settings which prevent us from composing an equivalent\n        // bq.QueryRequest due to differences between configuration parameters accepted\n        // by jobs.insert vs jobs.query.\n        if (!!queryObj.destination ||\n            !!queryObj.tableDefinitions ||\n            !!queryObj.createDisposition ||\n            !!queryObj.writeDisposition ||\n            (!!queryObj.priority && queryObj.priority !== 'INTERACTIVE') ||\n            queryObj.useLegacySql ||\n            !!queryObj.maximumBillingTier ||\n            !!queryObj.timePartitioning ||\n            !!queryObj.rangePartitioning ||\n            !!queryObj.clustering ||\n            !!queryObj.destinationEncryptionConfiguration ||\n            !!queryObj.schemaUpdateOptions ||\n            !!queryObj.jobTimeoutMs ||\n            // User has defined the jobID generation behavior\n            !!queryObj.jobId) {\n            return undefined;\n        }\n        if (queryObj.dryRun) {\n            return undefined;\n        }\n        if (options.job) {\n            return undefined;\n        }\n        const req = {\n            useQueryCache: queryObj.useQueryCache,\n            labels: queryObj.labels,\n            defaultDataset: queryObj.defaultDataset,\n            createSession: queryObj.createSession,\n            maximumBytesBilled: queryObj.maximumBytesBilled,\n            timeoutMs: options.timeoutMs,\n            location: queryObj.location || options.location,\n            formatOptions: {\n                useInt64Timestamp: true,\n            },\n            maxResults: queryObj.maxResults || options.maxResults,\n            query: queryObj.query,\n            useLegacySql: false,\n            requestId: uuid.v4(),\n            jobCreationMode: 'JOB_CREATION_OPTIONAL',\n        };\n        if (!this._enableQueryPreview) {\n            delete req.jobCreationMode;\n        }\n        const { parameterMode, params } = this.buildQueryParams_(queryObj.params, queryObj.types);\n        if (params) {\n            req.queryParameters = params;\n        }\n        if (parameterMode) {\n            req.parameterMode = parameterMode;\n        }\n        return req;\n    }\n    runJobsQuery(req, callback) {\n        this.trace_('[runJobsQuery]', req, callback);\n        this.request({\n            method: 'POST',\n            uri: '/queries',\n            json: req,\n        }, async (err, res) => {\n            this.trace_('jobs.query res:', res, err);\n            if (err) {\n                callback(err, null, res);\n                return;\n            }\n            let job = null;\n            if (res.jobReference) {\n                const jobRef = res.jobReference;\n                job = this.job(jobRef.jobId, {\n                    location: jobRef.location,\n                });\n            }\n            else if (res.queryId) {\n                job = this.job(res.queryId); // stateless query\n            }\n            callback(null, job, res);\n        });\n    }\n    /**\n     * This method will be called by `createQueryStream()`. It is required to\n     * properly set the `autoPaginate` option value.\n     *\n     * @private\n     */\n    queryAsStream_(query, callback) {\n        if (query.job) {\n            query.job.getQueryResults(query, callback);\n            return;\n        }\n        const { location, maxResults, pageToken, wrapIntegers, parseJSON } = query;\n        const opts = {\n            location,\n            maxResults,\n            pageToken,\n            wrapIntegers,\n            parseJSON,\n            autoPaginate: false,\n        };\n        delete query.location;\n        delete query.maxResults;\n        delete query.pageToken;\n        delete query.wrapIntegers;\n        delete query.parseJSON;\n        this.query(query, opts, callback);\n    }\n}\nexports.BigQuery = BigQuery;\nBigQuery.setLogFunction = logger_1.setLogFunction;\n/*! Developer Documentation\n *\n * These methods can be auto-paginated.\n */\npaginator_1.paginator.extend(BigQuery, ['getDatasets', 'getJobs']);\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n(0, promisify_1.promisifyAll)(BigQuery, {\n    exclude: [\n        'dataset',\n        'date',\n        'datetime',\n        'geography',\n        'int',\n        'job',\n        'time',\n        'timestamp',\n        'range',\n    ],\n});\nfunction convertSchemaFieldValue(schemaField, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nvalue, options) {\n    if (is.null(value)) {\n        return value;\n    }\n    switch (schemaField.type) {\n        case 'BOOLEAN':\n        case 'BOOL': {\n            value = value.toLowerCase() === 'true';\n            break;\n        }\n        case 'BYTES': {\n            value = Buffer.from(value, 'base64');\n            break;\n        }\n        case 'FLOAT':\n        case 'FLOAT64': {\n            value = Number(value);\n            break;\n        }\n        case 'INTEGER':\n        case 'INT64': {\n            const { wrapIntegers } = options;\n            value = wrapIntegers\n                ? typeof wrapIntegers === 'object'\n                    ? BigQuery.int({ integerValue: value, schemaFieldName: schemaField.name }, wrapIntegers).valueOf()\n                    : BigQuery.int(value)\n                : Number(value);\n            break;\n        }\n        case 'NUMERIC': {\n            value = new Big(value);\n            break;\n        }\n        case 'BIGNUMERIC': {\n            value = new Big(value);\n            break;\n        }\n        case 'RECORD': {\n            value = BigQuery.mergeSchemaWithRows_(schemaField, value, options).pop();\n            break;\n        }\n        case 'DATE': {\n            value = BigQuery.date(value);\n            break;\n        }\n        case 'DATETIME': {\n            value = BigQuery.datetime(value);\n            break;\n        }\n        case 'TIME': {\n            value = BigQuery.time(value);\n            break;\n        }\n        case 'TIMESTAMP': {\n            const pd = new precise_date_1.PreciseDate();\n            pd.setFullTime(precise_date_1.PreciseDate.parseFull(BigInt(value) * BigInt(1000)));\n            value = BigQuery.timestamp(pd);\n            break;\n        }\n        case 'GEOGRAPHY': {\n            value = BigQuery.geography(value);\n            break;\n        }\n        case 'JSON': {\n            const { parseJSON } = options;\n            value = parseJSON ? JSON.parse(value) : value;\n            break;\n        }\n        case 'RANGE': {\n            value = BigQueryRange.fromSchemaValue_(value, schemaField.rangeElementType.type);\n            break;\n        }\n        default:\n            break;\n    }\n    return value;\n}\n/**\n * Range class for BigQuery.\n * A range represents contiguous range between two dates, datetimes, or timestamps.\n * The lower and upper bound for the range are optional.\n * The lower bound is inclusive and the upper bound is exclusive.\n * See https://cloud.google.com/bigquery/docs/reference/standard-sql/lexical#range_literals\n */\nclass BigQueryRange {\n    constructor(value, elementType) {\n        if (typeof value === 'string') {\n            if (!elementType) {\n                throw new Error('invalid RANGE. Element type required when using RANGE API string.');\n            }\n            const [start, end] = BigQueryRange.fromStringValue_(value);\n            this.start = this.convertElement_(start, elementType);\n            this.end = this.convertElement_(end, elementType);\n            this.elementType = elementType;\n        }\n        else {\n            const { start, end } = value;\n            if (start && end) {\n                if (typeof start !== typeof end) {\n                    throw Error('upper and lower bound on a RANGE should be of the same type.');\n                }\n            }\n            const inferredType = {\n                BigQueryDate: 'DATE',\n                BigQueryDatetime: 'DATETIME',\n                BigQueryTimestamp: 'TIMESTAMP',\n            }[(start || end || Object).constructor.name] || elementType;\n            this.start = this.convertElement_(start, inferredType);\n            this.end = this.convertElement_(end, inferredType);\n            this.elementType = inferredType;\n        }\n    }\n    /*\n     * Get Range string representation used by the BigQuery API.\n     */\n    get apiValue() {\n        return `[${this.start ? this.start.value : 'UNBOUNDED'}, ${this.end ? this.end.value : 'UNBOUNDED'})`;\n    }\n    /*\n     * Get Range literal representation accordingly to\n     * https://cloud.google.com/bigquery/docs/reference/standard-sql/lexical#range_literals\n     */\n    get literalValue() {\n        return `RANGE<${this.elementType}> ${this.apiValue}`;\n    }\n    get value() {\n        return {\n            start: this.start ? this.start.value : 'UNBOUNDED',\n            end: this.end ? this.end.value : 'UNBOUNDED',\n        };\n    }\n    static fromStringValue_(value) {\n        let cleanedValue = value;\n        if (cleanedValue.startsWith('[') || cleanedValue.startsWith('(')) {\n            cleanedValue = cleanedValue.substring(1);\n        }\n        if (cleanedValue.endsWith(')') || cleanedValue.endsWith(']')) {\n            cleanedValue = cleanedValue.substring(0, cleanedValue.length - 1);\n        }\n        const parts = cleanedValue.split(',');\n        if (parts.length !== 2) {\n            throw new Error('invalid RANGE. See RANGE literal format docs for more information.');\n        }\n        const [start, end] = parts.map((s) => s.trim());\n        return [start, end];\n    }\n    static fromSchemaValue_(value, elementType) {\n        const [start, end] = BigQueryRange.fromStringValue_(value);\n        const convertRangeSchemaValue = (value) => {\n            if (value === 'UNBOUNDED' || value === 'NULL') {\n                return null;\n            }\n            return convertSchemaFieldValue({ type: elementType }, value, {\n                wrapIntegers: false,\n            });\n        };\n        return BigQuery.range({\n            start: convertRangeSchemaValue(start),\n            end: convertRangeSchemaValue(end),\n        }, elementType);\n    }\n    convertElement_(value, elementType) {\n        if (typeof value === 'string') {\n            if (value === 'UNBOUNDED' || value === 'NULL') {\n                return undefined;\n            }\n            switch (elementType) {\n                case 'DATE':\n                    return new BigQueryDate(value);\n                case 'DATETIME':\n                    return new BigQueryDatetime(value);\n                case 'TIMESTAMP':\n                    return new BigQueryTimestamp(value);\n            }\n            return undefined;\n        }\n        return value;\n    }\n}\nexports.BigQueryRange = BigQueryRange;\n/**\n * Date class for BigQuery.\n */\nclass BigQueryDate {\n    constructor(value) {\n        if (typeof value === 'object') {\n            value = BigQuery.datetime(value).value;\n        }\n        this.value = value;\n    }\n}\nexports.BigQueryDate = BigQueryDate;\n/**\n * Geography class for BigQuery.\n */\nclass Geography {\n    constructor(value) {\n        this.value = value;\n    }\n}\nexports.Geography = Geography;\n/**\n * Timestamp class for BigQuery.\n *\n * The recommended input here is a `Date` or `PreciseDate` class.\n * If passing as a `string`, it should be Timestamp literals: https://cloud.google.com/bigquery/docs/reference/standard-sql/lexical#timestamp_literals.\n * When passing a `number` input, it should be epoch seconds in float representation.\n *\n */\nclass BigQueryTimestamp {\n    constructor(value) {\n        let pd;\n        if (value instanceof precise_date_1.PreciseDate) {\n            pd = value;\n        }\n        else if (value instanceof Date) {\n            pd = new precise_date_1.PreciseDate(value);\n        }\n        else if (typeof value === 'string') {\n            if (/^\\d{4}-\\d{1,2}-\\d{1,2}/.test(value)) {\n                pd = new precise_date_1.PreciseDate(value);\n            }\n            else {\n                const floatValue = Number.parseFloat(value);\n                if (!Number.isNaN(floatValue)) {\n                    pd = this.fromFloatValue_(floatValue);\n                }\n                else {\n                    pd = new precise_date_1.PreciseDate(value);\n                }\n            }\n        }\n        else {\n            pd = this.fromFloatValue_(value);\n        }\n        // to keep backward compatibility, only converts with microsecond\n        // precision if needed.\n        if (pd.getMicroseconds() > 0) {\n            this.value = pd.toISOString();\n        }\n        else {\n            this.value = new Date(pd.getTime()).toJSON();\n        }\n    }\n    fromFloatValue_(value) {\n        const secs = Math.trunc(value);\n        // Timestamps in BigQuery have microsecond precision, so we must\n        // return a round number of microseconds.\n        const micros = Math.trunc((value - secs) * 1e6 + 0.5);\n        const pd = new precise_date_1.PreciseDate([secs, micros * 1000]);\n        return pd;\n    }\n}\nexports.BigQueryTimestamp = BigQueryTimestamp;\n/**\n * Datetime class for BigQuery.\n */\nclass BigQueryDatetime {\n    constructor(value) {\n        if (typeof value === 'object') {\n            let time;\n            if (value.hours) {\n                time = BigQuery.time(value).value;\n            }\n            const y = value.year;\n            const m = value.month;\n            const d = value.day;\n            time = time ? ' ' + time : '';\n            value = `${y}-${m}-${d}${time}`;\n        }\n        else {\n            value = value.replace(/^(.*)T(.*)Z$/, '$1 $2');\n        }\n        this.value = value;\n    }\n}\nexports.BigQueryDatetime = BigQueryDatetime;\n/**\n * Time class for BigQuery.\n */\nclass BigQueryTime {\n    constructor(value) {\n        if (typeof value === 'object') {\n            const h = value.hours;\n            const m = value.minutes || 0;\n            const s = value.seconds || 0;\n            const f = is.defined(value.fractional) ? '.' + value.fractional : '';\n            value = `${h}:${m}:${s}${f}`;\n        }\n        this.value = value;\n    }\n}\nexports.BigQueryTime = BigQueryTime;\n/**\n * Build a BigQueryInt object. For long integers, a string can be provided.\n *\n * @class\n * @param {string|number|IntegerTypeCastValue} value The 'INT64' value.\n * @param {object} [typeCastOptions] Configuration to convert\n *     values of 'INT64' type to a custom value. Must provide an\n *     `integerTypeCastFunction` to handle conversion.\n * @param {function} typeCastOptions.integerTypeCastFunction A custom user\n *     provided function to convert value.\n * @param {string|string[]} [typeCastOptions.fields] Schema field\n *     names to be converted using `integerTypeCastFunction`.\n *\n * @example\n * ```\n * const {BigQuery} = require('@google-cloud/bigquery');\n * const bigquery = new BigQuery();\n * const anInt = bigquery.int(7);\n * ```\n */\nclass BigQueryInt extends Number {\n    constructor(value, typeCastOptions) {\n        super(typeof value === 'object' ? value.integerValue : value);\n        this._schemaFieldName =\n            typeof value === 'object' ? value.schemaFieldName : undefined;\n        this.value =\n            typeof value === 'object'\n                ? value.integerValue.toString()\n                : value.toString();\n        this.type = 'BigQueryInt';\n        if (typeCastOptions) {\n            if (typeof typeCastOptions.integerTypeCastFunction !== 'function') {\n                throw new Error('integerTypeCastFunction is not a function or was not provided.');\n            }\n            const typeCastFields = typeCastOptions.fields\n                ? arrify(typeCastOptions.fields)\n                : undefined;\n            let customCast = true;\n            if (typeCastFields) {\n                customCast = this._schemaFieldName\n                    ? typeCastFields.includes(this._schemaFieldName)\n                        ? true\n                        : false\n                    : false;\n            }\n            customCast &&\n                (this.typeCastFunction = typeCastOptions.integerTypeCastFunction);\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    valueOf() {\n        const shouldCustomCast = this.typeCastFunction ? true : false;\n        if (shouldCustomCast) {\n            try {\n                return this.typeCastFunction(this.value);\n            }\n            catch (error) {\n                if (error instanceof Error) {\n                    error.message = `integerTypeCastFunction threw an error:\\n\\n  - ${error.message}`;\n                }\n                throw error;\n            }\n        }\n        else {\n            return BigQuery.decodeIntegerValue_({\n                integerValue: this.value,\n                schemaFieldName: this._schemaFieldName,\n            });\n        }\n    }\n    toJSON() {\n        return { type: this.type, value: this.value };\n    }\n}\nexports.BigQueryInt = BigQueryInt;\n//# sourceMappingURL=bigquery.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/bigquery/build/src/bigquery.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/bigquery/build/src/dataset.js":
/*!******************************************************************!*\
  !*** ./node_modules/@google-cloud/bigquery/build/src/dataset.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*!\n * Copyright 2014 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Dataset = void 0;\nconst common_1 = __webpack_require__(/*! @google-cloud/common */ \"(rsc)/./node_modules/@google-cloud/common/build/src/index.js\");\nconst paginator_1 = __webpack_require__(/*! @google-cloud/paginator */ \"(rsc)/./node_modules/@google-cloud/paginator/build/src/index.js\");\nconst promisify_1 = __webpack_require__(/*! @google-cloud/promisify */ \"(rsc)/./node_modules/@google-cloud/promisify/build/src/index.js\");\nconst extend = __webpack_require__(/*! extend */ \"(rsc)/./node_modules/extend/index.js\");\nconst table_1 = __webpack_require__(/*! ./table */ \"(rsc)/./node_modules/@google-cloud/bigquery/build/src/table.js\");\nconst model_1 = __webpack_require__(/*! ./model */ \"(rsc)/./node_modules/@google-cloud/bigquery/build/src/model.js\");\nconst routine_1 = __webpack_require__(/*! ./routine */ \"(rsc)/./node_modules/@google-cloud/bigquery/build/src/routine.js\");\n/**\n * Interact with your BigQuery dataset. Create a Dataset instance with\n * {@link BigQuery#createDataset} or {@link BigQuery#dataset}.\n *\n * @class\n * @param {BigQuery} bigQuery {@link BigQuery} instance.\n * @param {string} id The ID of the Dataset.\n * @param {object} [options] Dataset options.\n * @param {string} [options.projectId] The GCP project ID.\n * @param {string} [options.location] The geographic location of the dataset.\n *      Defaults to US.\n *\n * @example\n * ```\n * const {BigQuery} = require('@google-cloud/bigquery');\n * const bigquery = new BigQuery();\n * const dataset = bigquery.dataset('institutions');\n * ```\n */\nclass Dataset extends common_1.ServiceObject {\n    getModelsStream(options) {\n        // placeholder body, overwritten in constructor\n        return new paginator_1.ResourceStream({}, () => { });\n    }\n    getRoutinesStream(options) {\n        // placeholder body, overwritten in constructor\n        return new paginator_1.ResourceStream({}, () => { });\n    }\n    getTablesStream(options) {\n        // placeholder body, overwritten in constructor\n        return new paginator_1.ResourceStream({}, () => { });\n    }\n    constructor(bigQuery, id, options) {\n        const methods = {\n            /**\n             * @callback CreateDatasetCallback\n             * @param {?Error} err Request error, if any.\n             * @param {Dataset} dataset The newly created dataset.\n             * @param {object} apiResponse The full API response.\n             */\n            /**\n             * @typedef {array} CreateDatasetResponse\n             * @property {Dataset} 0 The newly created dataset.\n             * @property {object} 1 The full API response body.\n             */\n            /**\n             * Create a dataset.\n             *\n             * @method Dataset#create\n             * @param {CreateDatasetCallback} [callback] The callback function.\n             * @param {?error} callback.err An error returned while making this\n             *     request.\n             * @param {Dataset} callback.dataset The newly created dataset.\n             * @param {object} callback.apiResponse The full API response.\n             * @returns {Promise<CreateDatasetResponse>}\n             *\n             * @example\n             * ```\n             * const {BigQuery} = require('@google-cloud/bigquery');\n             * const bigquery = new BigQuery();\n             * const dataset = bigquery.dataset('institutions');\n             * dataset.create((err, dataset, apiResponse) => {\n             *   if (!err) {\n             *     // The dataset was created successfully.\n             *   }\n             * });\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * dataset.create().then((data) => {\n             *   const dataset = data[0];\n             *   const apiResponse = data[1];\n             * });\n             * ```\n             */\n            create: true,\n            /**\n             * @callback DatasetExistsCallback\n             * @param {?Error} err Request error, if any.\n             * @param {boolean} exists Indicates if the dataset exists.\n             */\n            /**\n             * @typedef {array} DatasetExistsResponse\n             * @property {boolean} 0 Indicates if the dataset exists.\n             */\n            /**\n             * Check if the dataset exists.\n             *\n             * @method Dataset#exists\n             * @param {DatasetExistsCallback} [callback] The callback function.\n             * @param {?error} callback.err An error returned while making this\n             *     request.\n             * @param {boolean} callback.exists Whether the dataset exists or not.\n             * @returns {Promise<DatasetExistsResponse>}\n             *\n             * @example\n             * ```\n             * const {BigQuery} = require('@google-cloud/bigquery');\n             * const bigquery = new BigQuery();\n             * const dataset = bigquery.dataset('institutions');\n             * dataset.exists((err, exists) => {});\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * dataset.exists().then((data) => {\n             *   const exists = data[0];\n             * });\n             * ```\n             */\n            exists: true,\n            /**\n             * @callback GetDatasetCallback\n             * @param {?Error} err Request error, if any.\n             * @param {Dataset} dataset The dataset.\n             * @param {object} apiResponse The full API response body.\n             */\n            /**\n             * @typedef {array} GetDatasetResponse\n             * @property {Dataset} 0 The dataset.\n             * @property {object} 1 The full API response body.\n             */\n            /**\n             * Get a dataset if it exists.\n             *\n             * You may optionally use this to \"get or create\" an object by providing\n             * an object with `autoCreate` set to `true`. Any extra configuration that\n             * is normally required for the `create` method must be contained within\n             * this object as well.\n             *\n             * @method Dataset#get\n             * @param {options} [options] Configuration object.\n             * @param {boolean} [options.autoCreate=false] Automatically create the\n             *     object if it does not exist.\n             * @param {GetDatasetCallback} [callback] The callback function.\n             * @param {?error} callback.err An error returned while making this\n             *     request.\n             * @param {Dataset} callback.dataset The dataset.\n             * @param {object} callback.apiResponse The full API response.\n             * @returns {Promise<GetDatasetResponse>}\n             *\n             * @example\n             * ```\n             * const {BigQuery} = require('@google-cloud/bigquery');\n             * const bigquery = new BigQuery();\n             * const dataset = bigquery.dataset('institutions');\n             * dataset.get((err, dataset, apiResponse) => {\n             *   if (!err) {\n             *     // `dataset.metadata` has been populated.\n             *   }\n             * });\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * dataset.get().then((data) => {\n             *   const dataset = data[0];\n             *   const apiResponse = data[1];\n             * });\n             * ```\n             */\n            get: true,\n            /**\n             * @callback GetDatasetMetadataCallback\n             * @param {?Error} err Request error, if any.\n             * @param {object} metadata The dataset metadata.\n             * @param {object} apiResponse The full API response.\n             */\n            /**\n             * @typedef {array} GetDatasetMetadataResponse\n             * @property {object} 0 The dataset metadata.\n             * @property {object} 1 The full API response.\n             */\n            /**\n             * Get the metadata for the Dataset.\n             *\n             * See {@link https://cloud.google.com/bigquery/docs/reference/v2/datasets/get| Datasets: get API Documentation}\n             *\n             * @method Dataset#getMetadata\n             * @param {GetDatasetMetadataCallback} [callback] The callback function.\n             * @param {?error} callback.err An error returned while making this\n             *     request.\n             * @param {object} callback.metadata The dataset's metadata.\n             * @param {object} callback.apiResponse The full API response.\n             * @returns {Promise<GetDatasetMetadataResponse>}\n             *\n             * @example\n             * ```\n             * const {BigQuery} = require('@google-cloud/bigquery');\n             * const bigquery = new BigQuery();\n             * const dataset = bigquery.dataset('institutions');\n             * dataset.getMetadata((err, metadata, apiResponse) => {});\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * dataset.getMetadata().then((data) => {\n             *   const metadata = data[0];\n             *   const apiResponse = data[1];\n             * });\n             * ```\n             */\n            getMetadata: true,\n            /**\n             * @callback SetDatasetMetadataCallback\n             * @param {?Error} err Request error, if any.\n             * @param {object} apiResponse The full API response.\n             */\n            /**\n             * @typedef {array} SetDatasetMetadataResponse\n             * @property {object} 0 The full API response.\n             */\n            /**\n             * Sets the metadata of the Dataset object.\n             *\n             * See {@link https://cloud.google.com/bigquery/docs/reference/v2/datasets/patch| Datasets: patch API Documentation}\n             *\n             * @method Dataset#setMetadata\n             * @param {object} metadata Metadata to save on the Dataset.\n             * @param {SetDatasetMetadataCallback} [callback] The callback function.\n             * @param {?error} callback.err An error returned while making this\n             *     request.\n             * @param {object} callback.apiResponse The full API response.\n             * @returns {Promise<SetDatasetMetadataResponse>}\n             *\n             * @example\n             * ```\n             * const {BigQuery} = require('@google-cloud/bigquery');\n             * const bigquery = new BigQuery();\n             * const dataset = bigquery.dataset('institutions');\n             *\n             * const metadata = {\n             *   description: 'Info for every institution in the 2013 IPEDS universe'\n             * };\n             *\n             * dataset.setMetadata(metadata, (err, apiResponse) => {});\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * dataset.setMetadata(metadata).then((data) => {\n             *   const apiResponse = data[0];\n             * });\n             * ```\n             */\n            setMetadata: true,\n        };\n        super({\n            parent: bigQuery,\n            baseUrl: '/datasets',\n            id,\n            methods,\n            createMethod: (id, optionsOrCallback, cb) => {\n                let options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n                const callback = typeof optionsOrCallback === 'function'\n                    ? optionsOrCallback\n                    : cb;\n                if (this.location) {\n                    options = extend({}, options, { location: this.location });\n                }\n                if (this.projectId) {\n                    options = extend({}, options, { projectId: this.projectId });\n                }\n                return bigQuery.createDataset(id, options, callback);\n            },\n        });\n        if (options && options.location) {\n            this.location = options.location;\n        }\n        if (options === null || options === void 0 ? void 0 : options.projectId) {\n            this.projectId = options.projectId;\n        }\n        else {\n            this.projectId = bigQuery.projectId;\n        }\n        this.bigQuery = bigQuery;\n        // Catch all for read-modify-write cycle\n        // https://cloud.google.com/bigquery/docs/api-performance#read-patch-write\n        this.interceptors.push({\n            request: (reqOpts) => {\n                if (reqOpts.method === 'PATCH' && reqOpts.json.etag) {\n                    reqOpts.headers = reqOpts.headers || {};\n                    reqOpts.headers['If-Match'] = reqOpts.json.etag;\n                }\n                if (this.projectId) {\n                    // Override projectId if provided\n                    reqOpts.uri = reqOpts.uri.replace(`/projects/${this.bigQuery.projectId}/`, `/projects/${this.projectId}/`);\n                }\n                return reqOpts;\n            },\n        });\n        /**\n         * List all or some of the {@link Model} objects in your project\n         * as a readable object stream.\n         *\n         * @method Dataset#getModelsStream\n         * @param {object} [options] Configuration object. See\n         *     {@link Dataset#getModels} for a complete list of options.\n         * @return {stream}\n         *\n         * @example\n         * ```\n         * const {BigQuery} = require('@google-cloud/bigquery');\n         * const bigquery = new BigQuery();\n         * const dataset = bigquery.dataset('institutions');\n         *\n         * dataset.getModelsStream()\n         *   .on('error', console.error)\n         *   .on('data', (model) => {})\n         *   .on('end', () => {\n         *     // All models have been retrieved\n         *   });\n         *\n         * ```\n         * @example If you anticipate many results, you can end a stream early to prevent unnecessary processing and API requests.\n         * ```\n         * dataset.getModelsStream()\n         *   .on('data', function(model) {\n         *     this.end();\n         *   });\n         * ```\n         */\n        this.getModelsStream = paginator_1.paginator.streamify('getModels');\n        /**\n         * List all or some of the {@link Routine} objects in your project as a\n         * readable object stream.\n         *\n         * @method Dataset#getRoutinesStream\n         * @param {GetRoutinesOptions} [options] Configuration object.\n         * @returns {stream}\n         *\n         * @example\n         * ```\n         * const {BigQuery} = require('@google-cloud/bigquery');\n         * const bigquery = new BigQuery();\n         * const dataset = bigquery.dataset('institutions');\n         *\n         * dataset.getRoutinesStream()\n         *   .on('error', console.error)\n         *   .on('data', (routine) => {})\n         *   .on('end', () => {\n         *     // All routines have been retrieved\n         *   });\n         *\n         * ```\n         * @example If you anticipate many results, you can end a stream early to prevent unnecessary processing and API requests.\n         * ```\n         * dataset.getRoutinesStream()\n         *   .on('data', function(routine) {\n         *     this.end();\n         *   });\n         * ```\n         */\n        this.getRoutinesStream = paginator_1.paginator.streamify('getRoutines');\n        /**\n         * List all or some of the {@link Table} objects in your project\n         * as a readable object stream.\n         *\n         * @method Dataset#getTablesStream\n         * @param {object} [options] Configuration object. See\n         *     {@link Dataset#getTables} for a complete list of options.\n         * @return {stream}\n         *\n         * @example\n         * ```\n         * const {BigQuery} = require('@google-cloud/bigquery');\n         * const bigquery = new BigQuery();\n         * const dataset = bigquery.dataset('institutions');\n         *\n         * dataset.getTablesStream()\n         *   .on('error', console.error)\n         *   .on('data', (table) => {})\n         *   .on('end', () => {\n         *     // All tables have been retrieved\n         *   });\n         *\n         * //-\n         * // If you anticipate many results, you can end a stream early to prevent\n         * // unnecessary processing and API requests.\n         * //-\n         * dataset.getTablesStream()\n         *   .on('data', function(table) {\n         *     this.end();\n         *   });\n         * ```\n         */\n        this.getTablesStream = paginator_1.paginator.streamify('getTables');\n    }\n    createQueryJob(options, callback) {\n        if (typeof options === 'string') {\n            options = {\n                query: options,\n            };\n        }\n        options = extend(true, {}, options, {\n            defaultDataset: {\n                datasetId: this.id,\n            },\n            location: this.location,\n        });\n        return this.bigQuery.createQueryJob(options, callback);\n    }\n    /**\n     * Run a query scoped to your dataset as a readable object stream.\n     *\n     * See {@link BigQuery#createQueryStream} for full documentation of this\n     * method.\n     *\n     * @param {object} options See {@link BigQuery#createQueryStream} for full\n     *     documentation of this method.\n     * @returns {stream}\n     */\n    createQueryStream(options) {\n        if (typeof options === 'string') {\n            options = {\n                query: options,\n            };\n        }\n        options = extend(true, {}, options, {\n            defaultDataset: {\n                datasetId: this.id,\n            },\n            location: this.location,\n        });\n        return this.bigQuery.createQueryStream(options);\n    }\n    createRoutine(id, config, callback) {\n        const json = Object.assign({}, config, {\n            routineReference: {\n                routineId: id,\n                datasetId: this.id,\n                projectId: this.projectId,\n            },\n        });\n        this.request({\n            method: 'POST',\n            uri: '/routines',\n            json,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, resp);\n                return;\n            }\n            const routine = this.routine(resp.routineReference.routineId);\n            routine.metadata = resp;\n            callback(null, routine, resp);\n        });\n    }\n    createTable(id, optionsOrCallback, cb) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        const callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : cb;\n        const body = table_1.Table.formatMetadata_(options);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        body.tableReference = {\n            datasetId: this.id,\n            projectId: this.projectId,\n            tableId: id,\n        };\n        this.request({\n            method: 'POST',\n            uri: '/tables',\n            json: body,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, resp);\n                return;\n            }\n            const table = this.table(resp.tableReference.tableId, {\n                location: resp.location,\n            });\n            table.metadata = resp;\n            callback(null, table, resp);\n        });\n    }\n    delete(optionsOrCallback, callback) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        const query = {\n            deleteContents: !!options.force,\n        };\n        this.request({\n            method: 'DELETE',\n            uri: '',\n            qs: query,\n        }, callback);\n    }\n    getModels(optsOrCb, cb) {\n        const options = typeof optsOrCb === 'object' ? optsOrCb : {};\n        const callback = typeof optsOrCb === 'function' ? optsOrCb : cb;\n        this.request({\n            uri: '/models',\n            qs: options,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, null, resp);\n                return;\n            }\n            let nextQuery = null;\n            if (resp.nextPageToken) {\n                nextQuery = Object.assign({}, options, {\n                    pageToken: resp.nextPageToken,\n                });\n            }\n            const models = (resp.models || []).map(modelObject => {\n                const model = this.model(modelObject.modelReference.modelId);\n                model.metadata = modelObject;\n                return model;\n            });\n            callback(null, models, nextQuery, resp);\n        });\n    }\n    getRoutines(optsOrCb, cb) {\n        const options = typeof optsOrCb === 'object' ? optsOrCb : {};\n        const callback = typeof optsOrCb === 'function' ? optsOrCb : cb;\n        this.request({\n            uri: '/routines',\n            qs: options,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, null, resp);\n                return;\n            }\n            let nextQuery = null;\n            if (resp.nextPageToken) {\n                nextQuery = Object.assign({}, options, {\n                    pageToken: resp.nextPageToken,\n                });\n            }\n            const routines = (resp.routines || []).map(metadata => {\n                const routine = this.routine(metadata.routineReference.routineId);\n                routine.metadata = metadata;\n                return routine;\n            });\n            callback(null, routines, nextQuery, resp);\n        });\n    }\n    getTables(optionsOrCallback, cb) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        const callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : cb;\n        this.request({\n            uri: '/tables',\n            qs: options,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, null, resp);\n                return;\n            }\n            let nextQuery = null;\n            if (resp.nextPageToken) {\n                nextQuery = Object.assign({}, options, {\n                    pageToken: resp.nextPageToken,\n                });\n            }\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const tables = (resp.tables || []).map((tableObject) => {\n                const table = this.table(tableObject.tableReference.tableId, {\n                    location: tableObject.location,\n                });\n                table.metadata = tableObject;\n                return table;\n            });\n            callback(null, tables, nextQuery, resp);\n        });\n    }\n    /**\n     * Create a {@link Model} object.\n     *\n     * @throws {TypeError} if model ID is missing.\n     *\n     * @param {string} id The ID of the model.\n     * @return {Model}\n     *\n     * @example\n     * ```\n     * const {BigQuery} = require('@google-cloud/bigquery');\n     * const bigquery = new BigQuery();\n     * const dataset = bigquery.dataset('institutions');\n     *\n     * const model = dataset.model('my-model');\n     * ```\n     */\n    model(id) {\n        if (typeof id !== 'string') {\n            throw new TypeError('A model ID is required.');\n        }\n        return new model_1.Model(this, id);\n    }\n    query(options, callback) {\n        if (typeof options === 'string') {\n            options = {\n                query: options,\n            };\n        }\n        options = extend(true, {}, options, {\n            defaultDataset: {\n                datasetId: this.id,\n            },\n            location: this.location,\n        });\n        return this.bigQuery.query(options, callback);\n    }\n    /**\n     * Create a {@link Routine} object.\n     *\n     * @throws {TypeError} if routine ID is missing.\n     *\n     * @param {string} id The ID of the routine.\n     * @returns {Routine}\n     *\n     * @example\n     * ```\n     * const {BigQuery} = require('@google-cloud/bigquery');\n     * const bigquery = new BigQuery();\n     * const dataset = bigquery.dataset('institutions');\n     *\n     * const routine = dataset.routine('my_routine');\n     * ```\n     */\n    routine(id) {\n        if (typeof id !== 'string') {\n            throw new TypeError('A routine ID is required.');\n        }\n        return new routine_1.Routine(this, id);\n    }\n    /**\n     * Create a {@link Table} object.\n     *\n     * @throws {TypeError} if table ID is missing.\n     *\n     * @param {string} id The ID of the table.\n     * @param {object} [options] Table options.\n     * @param {string} [options.location] The geographic location of the table, by\n     *      default this value is inherited from the dataset. This can be used to\n     *      configure the location of all jobs created through a table instance.\n     * It cannot be used to set the actual location of the table. This value will\n     *      be superseded by any API responses containing location data for the\n     *      table.\n     * @return {Table}\n     *\n     * @example\n     * ```\n     * const {BigQuery} = require('@google-cloud/bigquery');\n     * const bigquery = new BigQuery();\n     * const dataset = bigquery.dataset('institutions');\n     *\n     * const institutions = dataset.table('institution_data');\n     * ```\n     */\n    table(id, options) {\n        if (typeof id !== 'string') {\n            throw new TypeError('A table ID is required.');\n        }\n        options = extend({\n            location: this.location,\n            projectId: this.projectId,\n        }, options);\n        return new table_1.Table(this, id, options);\n    }\n}\nexports.Dataset = Dataset;\n/*! Developer Documentation\n *\n * These methods can be auto-paginated.\n */\npaginator_1.paginator.extend(Dataset, ['getModels', 'getRoutines', 'getTables']);\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n(0, promisify_1.promisifyAll)(Dataset, {\n    exclude: ['model', 'routine', 'table'],\n});\n//# sourceMappingURL=dataset.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/bigquery/build/src/dataset.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/bigquery/build/src/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@google-cloud/bigquery/build/src/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*!\n * Copyright 2019 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Table = exports.RowQueue = exports.RowBatch = exports.Routine = exports.Model = exports.Job = exports.Dataset = exports.PROTOCOL_REGEX = exports.Geography = exports.common = exports.BigQueryTimestamp = exports.BigQueryTime = exports.BigQueryInt = exports.BigQueryDatetime = exports.BigQueryDate = exports.BigQuery = void 0;\nvar bigquery_1 = __webpack_require__(/*! ./bigquery */ \"(rsc)/./node_modules/@google-cloud/bigquery/build/src/bigquery.js\");\nObject.defineProperty(exports, \"BigQuery\", ({ enumerable: true, get: function () { return bigquery_1.BigQuery; } }));\nObject.defineProperty(exports, \"BigQueryDate\", ({ enumerable: true, get: function () { return bigquery_1.BigQueryDate; } }));\nObject.defineProperty(exports, \"BigQueryDatetime\", ({ enumerable: true, get: function () { return bigquery_1.BigQueryDatetime; } }));\nObject.defineProperty(exports, \"BigQueryInt\", ({ enumerable: true, get: function () { return bigquery_1.BigQueryInt; } }));\nObject.defineProperty(exports, \"BigQueryTime\", ({ enumerable: true, get: function () { return bigquery_1.BigQueryTime; } }));\nObject.defineProperty(exports, \"BigQueryTimestamp\", ({ enumerable: true, get: function () { return bigquery_1.BigQueryTimestamp; } }));\nObject.defineProperty(exports, \"common\", ({ enumerable: true, get: function () { return bigquery_1.common; } }));\nObject.defineProperty(exports, \"Geography\", ({ enumerable: true, get: function () { return bigquery_1.Geography; } }));\nObject.defineProperty(exports, \"PROTOCOL_REGEX\", ({ enumerable: true, get: function () { return bigquery_1.PROTOCOL_REGEX; } }));\nvar dataset_1 = __webpack_require__(/*! ./dataset */ \"(rsc)/./node_modules/@google-cloud/bigquery/build/src/dataset.js\");\nObject.defineProperty(exports, \"Dataset\", ({ enumerable: true, get: function () { return dataset_1.Dataset; } }));\nvar job_1 = __webpack_require__(/*! ./job */ \"(rsc)/./node_modules/@google-cloud/bigquery/build/src/job.js\");\nObject.defineProperty(exports, \"Job\", ({ enumerable: true, get: function () { return job_1.Job; } }));\nvar model_1 = __webpack_require__(/*! ./model */ \"(rsc)/./node_modules/@google-cloud/bigquery/build/src/model.js\");\nObject.defineProperty(exports, \"Model\", ({ enumerable: true, get: function () { return model_1.Model; } }));\nvar routine_1 = __webpack_require__(/*! ./routine */ \"(rsc)/./node_modules/@google-cloud/bigquery/build/src/routine.js\");\nObject.defineProperty(exports, \"Routine\", ({ enumerable: true, get: function () { return routine_1.Routine; } }));\nvar rowBatch_1 = __webpack_require__(/*! ./rowBatch */ \"(rsc)/./node_modules/@google-cloud/bigquery/build/src/rowBatch.js\");\nObject.defineProperty(exports, \"RowBatch\", ({ enumerable: true, get: function () { return rowBatch_1.RowBatch; } }));\nvar rowQueue_1 = __webpack_require__(/*! ./rowQueue */ \"(rsc)/./node_modules/@google-cloud/bigquery/build/src/rowQueue.js\");\nObject.defineProperty(exports, \"RowQueue\", ({ enumerable: true, get: function () { return rowQueue_1.RowQueue; } }));\nvar table_1 = __webpack_require__(/*! ./table */ \"(rsc)/./node_modules/@google-cloud/bigquery/build/src/table.js\");\nObject.defineProperty(exports, \"Table\", ({ enumerable: true, get: function () { return table_1.Table; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9iaWdxdWVyeS9idWlsZC9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxHQUFHLGdCQUFnQixHQUFHLGdCQUFnQixHQUFHLGVBQWUsR0FBRyxhQUFhLEdBQUcsV0FBVyxHQUFHLGVBQWUsR0FBRyxzQkFBc0IsR0FBRyxpQkFBaUIsR0FBRyxjQUFjLEdBQUcseUJBQXlCLEdBQUcsb0JBQW9CLEdBQUcsbUJBQW1CLEdBQUcsd0JBQXdCLEdBQUcsb0JBQW9CLEdBQUcsZ0JBQWdCO0FBQ2pVLGlCQUFpQixtQkFBTyxDQUFDLHFGQUFZO0FBQ3JDLDRDQUEyQyxFQUFFLHFDQUFxQywrQkFBK0IsRUFBQztBQUNsSCxnREFBK0MsRUFBRSxxQ0FBcUMsbUNBQW1DLEVBQUM7QUFDMUgsb0RBQW1ELEVBQUUscUNBQXFDLHVDQUF1QyxFQUFDO0FBQ2xJLCtDQUE4QyxFQUFFLHFDQUFxQyxrQ0FBa0MsRUFBQztBQUN4SCxnREFBK0MsRUFBRSxxQ0FBcUMsbUNBQW1DLEVBQUM7QUFDMUgscURBQW9ELEVBQUUscUNBQXFDLHdDQUF3QyxFQUFDO0FBQ3BJLDBDQUF5QyxFQUFFLHFDQUFxQyw2QkFBNkIsRUFBQztBQUM5Ryw2Q0FBNEMsRUFBRSxxQ0FBcUMsZ0NBQWdDLEVBQUM7QUFDcEgsa0RBQWlELEVBQUUscUNBQXFDLHFDQUFxQyxFQUFDO0FBQzlILGdCQUFnQixtQkFBTyxDQUFDLG1GQUFXO0FBQ25DLDJDQUEwQyxFQUFFLHFDQUFxQyw2QkFBNkIsRUFBQztBQUMvRyxZQUFZLG1CQUFPLENBQUMsMkVBQU87QUFDM0IsdUNBQXNDLEVBQUUscUNBQXFDLHFCQUFxQixFQUFDO0FBQ25HLGNBQWMsbUJBQU8sQ0FBQywrRUFBUztBQUMvQix5Q0FBd0MsRUFBRSxxQ0FBcUMseUJBQXlCLEVBQUM7QUFDekcsZ0JBQWdCLG1CQUFPLENBQUMsbUZBQVc7QUFDbkMsMkNBQTBDLEVBQUUscUNBQXFDLDZCQUE2QixFQUFDO0FBQy9HLGlCQUFpQixtQkFBTyxDQUFDLHFGQUFZO0FBQ3JDLDRDQUEyQyxFQUFFLHFDQUFxQywrQkFBK0IsRUFBQztBQUNsSCxpQkFBaUIsbUJBQU8sQ0FBQyxxRkFBWTtBQUNyQyw0Q0FBMkMsRUFBRSxxQ0FBcUMsK0JBQStCLEVBQUM7QUFDbEgsY0FBYyxtQkFBTyxDQUFDLCtFQUFTO0FBQy9CLHlDQUF3QyxFQUFFLHFDQUFxQyx5QkFBeUIsRUFBQztBQUN6RyIsInNvdXJjZXMiOlsiL1VzZXJzL2thaXNlaS9EZXNrdG9wL20tdHJhY2VyLWFpL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL2JpZ3F1ZXJ5L2J1aWxkL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qIVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlRhYmxlID0gZXhwb3J0cy5Sb3dRdWV1ZSA9IGV4cG9ydHMuUm93QmF0Y2ggPSBleHBvcnRzLlJvdXRpbmUgPSBleHBvcnRzLk1vZGVsID0gZXhwb3J0cy5Kb2IgPSBleHBvcnRzLkRhdGFzZXQgPSBleHBvcnRzLlBST1RPQ09MX1JFR0VYID0gZXhwb3J0cy5HZW9ncmFwaHkgPSBleHBvcnRzLmNvbW1vbiA9IGV4cG9ydHMuQmlnUXVlcnlUaW1lc3RhbXAgPSBleHBvcnRzLkJpZ1F1ZXJ5VGltZSA9IGV4cG9ydHMuQmlnUXVlcnlJbnQgPSBleHBvcnRzLkJpZ1F1ZXJ5RGF0ZXRpbWUgPSBleHBvcnRzLkJpZ1F1ZXJ5RGF0ZSA9IGV4cG9ydHMuQmlnUXVlcnkgPSB2b2lkIDA7XG52YXIgYmlncXVlcnlfMSA9IHJlcXVpcmUoXCIuL2JpZ3F1ZXJ5XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQmlnUXVlcnlcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJpZ3F1ZXJ5XzEuQmlnUXVlcnk7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJCaWdRdWVyeURhdGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJpZ3F1ZXJ5XzEuQmlnUXVlcnlEYXRlOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQmlnUXVlcnlEYXRldGltZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYmlncXVlcnlfMS5CaWdRdWVyeURhdGV0aW1lOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQmlnUXVlcnlJbnRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJpZ3F1ZXJ5XzEuQmlnUXVlcnlJbnQ7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJCaWdRdWVyeVRpbWVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJpZ3F1ZXJ5XzEuQmlnUXVlcnlUaW1lOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQmlnUXVlcnlUaW1lc3RhbXBcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJpZ3F1ZXJ5XzEuQmlnUXVlcnlUaW1lc3RhbXA7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjb21tb25cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJpZ3F1ZXJ5XzEuY29tbW9uOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiR2VvZ3JhcGh5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBiaWdxdWVyeV8xLkdlb2dyYXBoeTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlBST1RPQ09MX1JFR0VYXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBiaWdxdWVyeV8xLlBST1RPQ09MX1JFR0VYOyB9IH0pO1xudmFyIGRhdGFzZXRfMSA9IHJlcXVpcmUoXCIuL2RhdGFzZXRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEYXRhc2V0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkYXRhc2V0XzEuRGF0YXNldDsgfSB9KTtcbnZhciBqb2JfMSA9IHJlcXVpcmUoXCIuL2pvYlwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkpvYlwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gam9iXzEuSm9iOyB9IH0pO1xudmFyIG1vZGVsXzEgPSByZXF1aXJlKFwiLi9tb2RlbFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk1vZGVsXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtb2RlbF8xLk1vZGVsOyB9IH0pO1xudmFyIHJvdXRpbmVfMSA9IHJlcXVpcmUoXCIuL3JvdXRpbmVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSb3V0aW5lXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiByb3V0aW5lXzEuUm91dGluZTsgfSB9KTtcbnZhciByb3dCYXRjaF8xID0gcmVxdWlyZShcIi4vcm93QmF0Y2hcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSb3dCYXRjaFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcm93QmF0Y2hfMS5Sb3dCYXRjaDsgfSB9KTtcbnZhciByb3dRdWV1ZV8xID0gcmVxdWlyZShcIi4vcm93UXVldWVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSb3dRdWV1ZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcm93UXVldWVfMS5Sb3dRdWV1ZTsgfSB9KTtcbnZhciB0YWJsZV8xID0gcmVxdWlyZShcIi4vdGFibGVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUYWJsZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGFibGVfMS5UYWJsZTsgfSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/bigquery/build/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/bigquery/build/src/job.js":
/*!**************************************************************!*\
  !*** ./node_modules/@google-cloud/bigquery/build/src/job.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*!\n * Copyright 2014 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Job = void 0;\n/*!\n * @module bigquery/job\n */\nconst common_1 = __webpack_require__(/*! @google-cloud/common */ \"(rsc)/./node_modules/@google-cloud/common/build/src/index.js\");\nconst paginator_1 = __webpack_require__(/*! @google-cloud/paginator */ \"(rsc)/./node_modules/@google-cloud/paginator/build/src/index.js\");\nconst promisify_1 = __webpack_require__(/*! @google-cloud/promisify */ \"(rsc)/./node_modules/@google-cloud/promisify/build/src/index.js\");\nconst extend = __webpack_require__(/*! extend */ \"(rsc)/./node_modules/extend/index.js\");\nconst bigquery_1 = __webpack_require__(/*! ./bigquery */ \"(rsc)/./node_modules/@google-cloud/bigquery/build/src/bigquery.js\");\nconst logger_1 = __webpack_require__(/*! ./logger */ \"(rsc)/./node_modules/@google-cloud/bigquery/build/src/logger.js\");\n/**\n * @callback QueryResultsCallback\n * @param {?Error} err An error returned while making this request.\n * @param {array} rows The results of the job.\n */\n/**\n * @callback ManualQueryResultsCallback\n * @param {?Error} err An error returned while making this request.\n * @param {array} rows The results of the job.\n * @param {?object} nextQuery A pre-made configuration object for your next\n *     request. This will be `null` if no additional results are available.\n *     If the query is not yet complete, you may get empty `rows` and\n *     non-`null` `nextQuery` that you should use for your next request.\n * @param {object} apiResponse The full API response.\n */\n/**\n * Job objects are returned from various places in the BigQuery API:\n *\n * - {@link BigQuery#getJobs}\n * - {@link BigQuery#job}\n * - {@link BigQuery#query}\n * - {@link BigQuery#createJob}\n * - {@link Table#copy}\n * - {@link Table#createWriteStream}\n * - {@link Table#extract}\n * - {@link Table#load}\n *\n * They can be used to check the status of a running job or fetching the results\n * of a previously-executed one.\n *\n * @class\n * @param {BigQuery} bigQuery {@link BigQuery} instance.\n * @param {string} id The ID of the job.\n * @param {object} [options] Configuration object.\n * @param {string} [options.location] The geographic location of the job.\n *      Required except for US and EU.\n *\n * @example\n * ```\n * const {BigQuery} = require('@google-cloud/bigquery');\n * const bigquery = new BigQuery();\n *\n * const job = bigquery.job('job-id');\n *\n * //-\n * // All jobs are event emitters. The status of each job is polled\n * // continuously, starting only after you register a \"complete\" listener.\n * //-\n * job.on('complete', (metadata) => {\n *   // The job is complete.\n * });\n *\n * //-\n * // Be sure to register an error handler as well to catch any issues which\n * // impeded the job.\n * //-\n * job.on('error', (err) => {\n *   // An error occurred during the job.\n * });\n *\n * //-\n * // To force the Job object to stop polling for updates, simply remove any\n * // \"complete\" listeners you've registered.\n * //\n * // The easiest way to do this is with `removeAllListeners()`.\n * //-\n * job.removeAllListeners();\n * ```\n */\nclass Job extends common_1.Operation {\n    getQueryResultsStream(options) {\n        // placeholder body, overwritten in constructor\n        return new paginator_1.ResourceStream({}, () => { });\n    }\n    constructor(bigQuery, id, options) {\n        let location;\n        const methods = {\n            /**\n             * @callback DeleteJobCallback\n             * @param {?Error} err Request error, if any.\n             * @param {object} apiResponse The full API response.\n             */\n            /**\n             * @typedef {array} DeleteJobResponse\n             * @property {object} 0 The full API response.\n             */\n            /**\n             * Delete the job.\n             *\n             * @see [Jobs: delete API Documentation]{@link https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/delete}\n             *\n             * @method Job#delete\n             * @param {DeleteJobCallback} [callback] The callback function.\n             * @param {?error} callback.err An error returned while making this\n             *     request.\n             * @param {object} callback.apiResponse The full API response.\n             * @returns {Promise<DeleteJobResponse>}\n             *\n             * @example\n             * const {BigQuery} = require('@google-cloud/bigquery');\n             * const bigquery = new BigQuery();\n             *\n             * const job = bigquery.job(jobId);\n             * job.delete((err, apiResponse) => {\n             *   if (!err) {\n             *     // The job was deleted successfully.\n             *   }\n             * });\n             *\n             * @example If the callback is omitted a Promise will be returned\n             * const [apiResponse] = await job.delete();\n             */\n            delete: {\n                reqOpts: {\n                    method: 'DELETE',\n                    uri: '/delete',\n                    qs: {\n                        get location() {\n                            return location;\n                        },\n                    },\n                },\n            },\n            /**\n             * @callback JobExistsCallback\n             * @param {?Error} err Request error, if any.\n             * @param {boolean} exists Indicates if the job exists.\n             */\n            /**\n             * @typedef {array} JobExistsResponse\n             * @property {boolean} 0 Indicates if the job exists.\n             */\n            /**\n             * Check if the job exists.\n             *\n             * @method Job#exists\n             * @param {JobExistsCallback} [callback] The callback function.\n             * @param {?error} callback.err An error returned while making this\n             *     request.\n             * @param {boolean} callback.exists Whether the job exists or not.\n             * @returns {Promise<JobExistsResponse>}\n             *\n             * @example\n             * ```\n             * const {BigQuery} = require('@google-cloud/bigquery');\n             * const bigquery = new BigQuery();\n             *\n             * const job = bigquery.job('job-id');\n             *\n             * job.exists((err, exists) => {});\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * job.exists().then((data) => {\n             *   const exists = data[0];\n             * });\n             * ```\n             */\n            exists: true,\n            /**\n             * @callback GetJobCallback\n             * @param {?Error} err Request error, if any.\n             * @param {Model} model The job.\n             * @param {object} apiResponse The full API response body.\n             */\n            /**\n             * @typedef {array} GetJobResponse\n             * @property {Model} 0 The job.\n             * @property {object} 1 The full API response body.\n             */\n            /**\n             * Get a job if it exists.\n             *\n             * @method Job#get\n             * @param {object} [options] Configuration object.\n             * @param {string} [options.location] The geographic location of the job.\n             *     Required except for US and EU.\n             * @param {GetJobCallback} [callback] The callback function.\n             * @param {?error} callback.err An error returned while making this\n             *     request.\n             * @param {Job} callback.job The job.\n             * @returns {Promise<GetJobResponse>}\n             *\n             * @example\n             * ```\n             * const {BigQuery} = require('@google-cloud/bigquery');\n             * const bigquery = new BigQuery();\n             *\n             * const job = bigquery.job('job-id');\n             *\n             * job.get((err, job, apiResponse) => {\n             *   if (!err) {\n             *     // `job.metadata` has been populated.\n             *   }\n             * });\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * job.get().then((data) => {\n             *   const job = data[0];\n             *   const apiResponse = data[1];\n             * });\n             * ```\n             */\n            get: true,\n            /**\n             * @callback GetJobMetadataCallback\n             * @param {?Error} err Request error, if any.\n             * @param {object} metadata The job metadata.\n             * @param {object} apiResponse The full API response.\n             */\n            /**\n             * @typedef {array} GetJobMetadataResponse\n             * @property {object} 0 The job metadata.\n             * @property {object} 1 The full API response.\n             */\n            /**\n             * Get the metadata of the job. This will mostly be useful for checking\n             * the status of a previously-run job.\n             *\n             * See {@link https://cloud.google.com/bigquery/docs/reference/v2/jobs/get| Jobs: get API Documentation}\n             *\n             * @method Job#getMetadata\n             * @param {GetJobMetadataCallback} [callback] The callback function.\n             * @param {?error} callback.err An error returned while making this\n             *     request.\n             * @param {object} callback.metadata The metadata of the job.\n             * @param {object} callback.apiResponse The full API response.\n             * @returns {Promise<GetJobMetadataResponse>}\n             *\n             * @example\n             * ```\n             * const {BigQuery} = require('@google-cloud/bigquery');\n             * const bigquery = new BigQuery();\n             *\n             * const job = bigquery.job('id');\n             * job.getMetadata((err, metadata, apiResponse) => {});\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * job.getMetadata().then((data) => {\n             *   const metadata = data[0];\n             *   const apiResponse = data[1];\n             * });\n             * ```\n             */\n            getMetadata: {\n                reqOpts: {\n                    qs: {\n                        get location() {\n                            return location;\n                        },\n                    },\n                },\n            },\n        };\n        super({\n            parent: bigQuery,\n            baseUrl: '/jobs',\n            id,\n            methods,\n        });\n        Object.defineProperty(this, 'location', {\n            get() {\n                return location;\n            },\n            set(_location) {\n                location = _location;\n            },\n        });\n        this.bigQuery = bigQuery;\n        if (options && options.location) {\n            this.location = options.location;\n        }\n        if (options === null || options === void 0 ? void 0 : options.projectId) {\n            this.projectId = options.projectId;\n        }\n        /**\n         * Get the results of a job as a readable object stream.\n         *\n         * @param {object} options Configuration object. See\n         *     {@link Job#getQueryResults} for a complete list of options.\n         * @return {stream}\n         *\n         * @example\n         * ```\n         * const through2 = require('through2');\n         * const fs = require('fs');\n         * const {BigQuery} = require('@google-cloud/bigquery');\n         * const bigquery = new BigQuery();\n         *\n         * const job = bigquery.job('job-id');\n         *\n         * job.getQueryResultsStream()\n         *   .pipe(through2.obj(function (row, enc, next) {\n         *     this.push(JSON.stringify(row) + '\\n');\n         *     next();\n         *   }))\n         *   .pipe(fs.createWriteStream('./test/testdata/testfile.json'));\n         * ```\n         */\n        this.getQueryResultsStream = paginator_1.paginator.streamify('getQueryResultsAsStream_');\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    trace_(msg, ...otherArgs) {\n        (0, logger_1.logger)(`[job][${this.id}]`, msg, ...otherArgs);\n    }\n    cancel(callback) {\n        let qs;\n        if (this.location) {\n            qs = { location: this.location };\n        }\n        this.request({\n            method: 'POST',\n            uri: '/cancel',\n            qs,\n        }, callback);\n    }\n    getQueryResults(optionsOrCallback, cb) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        const callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : cb;\n        const qs = extend({\n            location: this.location,\n            'formatOptions.useInt64Timestamp': true,\n        }, options);\n        this.trace_('[getQueryResults]', this.id, options.pageToken, options.startIndex);\n        const wrapIntegers = qs.wrapIntegers ? qs.wrapIntegers : false;\n        delete qs.wrapIntegers;\n        const parseJSON = qs.parseJSON ? qs.parseJSON : false;\n        delete qs.parseJSON;\n        delete qs.job;\n        const timeoutOverride = typeof qs.timeoutMs === 'number' ? qs.timeoutMs : false;\n        const cachedRows = options._cachedRows;\n        const cachedResponse = options._cachedResponse;\n        delete options._cachedRows;\n        delete options._cachedResponse;\n        if (cachedRows) {\n            let nextQuery = null;\n            if (options.pageToken) {\n                nextQuery = Object.assign({}, options, {\n                    pageToken: options.pageToken,\n                });\n            }\n            cachedResponse === null || cachedResponse === void 0 ? true : delete cachedResponse.rows;\n            callback(null, cachedRows, nextQuery, cachedResponse);\n            return;\n        }\n        this.bigQuery.request({\n            uri: '/queries/' + this.id,\n            qs,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, null, resp);\n                return;\n            }\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            let rows = [];\n            if (resp.schema && resp.rows) {\n                rows = bigquery_1.BigQuery.mergeSchemaWithRows_(resp.schema, resp.rows, {\n                    wrapIntegers,\n                    parseJSON,\n                });\n            }\n            let nextQuery = null;\n            if (resp.jobComplete === false) {\n                // Query is still running.\n                nextQuery = Object.assign({}, options);\n                // If timeout override was provided, return error.\n                if (timeoutOverride) {\n                    const err = new Error(`The query did not complete before ${timeoutOverride}ms`);\n                    callback(err, null, nextQuery, resp);\n                    return;\n                }\n            }\n            else if (resp.pageToken) {\n                this.trace_('[getQueryResults] has more pages', resp.pageToken);\n                // More results exist.\n                nextQuery = Object.assign({}, options, {\n                    pageToken: resp.pageToken,\n                });\n                delete nextQuery.startIndex;\n            }\n            delete resp.rows;\n            callback(null, rows, nextQuery, resp);\n        });\n    }\n    /**\n     * This method will be called by `getQueryResultsStream()`. It is required to\n     * properly set the `autoPaginate` option value.\n     *\n     * @private\n     */\n    getQueryResultsAsStream_(options, callback) {\n        options = extend({ autoPaginate: false }, options);\n        this.getQueryResults(options, callback);\n    }\n    /**\n     * Poll for a status update. Execute the callback:\n     *\n     *   - callback(err): Job failed\n     *   - callback(): Job incomplete\n     *   - callback(null, metadata): Job complete\n     *\n     * @private\n     *\n     * @param {function} callback\n     */\n    poll_(callback) {\n        this.getMetadata((err, metadata) => {\n            if (!err && metadata.status && metadata.status.errorResult) {\n                err = new common_1.util.ApiError(metadata.status);\n            }\n            if (err) {\n                callback(err);\n                return;\n            }\n            if (metadata.status.state !== 'DONE') {\n                callback(null);\n                return;\n            }\n            callback(null, metadata);\n        });\n    }\n}\nexports.Job = Job;\n/*! Developer Documentation\n *\n * These methods can be auto-paginated.\n */\npaginator_1.paginator.extend(Job, ['getQueryResults']);\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n(0, promisify_1.promisifyAll)(Job);\n//# sourceMappingURL=job.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9iaWdxdWVyeS9idWlsZC9zcmMvam9iLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsbUJBQU8sQ0FBQywwRkFBc0I7QUFDL0Msb0JBQW9CLG1CQUFPLENBQUMsZ0dBQXlCO0FBQ3JELG9CQUFvQixtQkFBTyxDQUFDLGdHQUF5QjtBQUNyRCxlQUFlLG1CQUFPLENBQUMsb0RBQVE7QUFDL0IsbUJBQW1CLG1CQUFPLENBQUMscUZBQVk7QUFDdkMsaUJBQWlCLG1CQUFPLENBQUMsaUZBQVU7QUFDbkM7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsT0FBTztBQUNsQixXQUFXLFNBQVM7QUFDcEI7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLE1BQU07QUFDTixNQUFNO0FBQ04sTUFBTTtBQUNOLE1BQU07QUFDTixNQUFNO0FBQ04sTUFBTTtBQUNOLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxVQUFVLFVBQVUsZ0JBQWdCO0FBQy9DLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxVQUFVO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELFdBQVc7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLFFBQVE7QUFDL0IsdUJBQXVCLFFBQVE7QUFDL0I7QUFDQTtBQUNBLHlCQUF5QixPQUFPO0FBQ2hDLDBCQUEwQixRQUFRO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFEO0FBQ3JEO0FBQ0E7QUFDQSx1QkFBdUIsbUJBQW1CO0FBQzFDLHVCQUF1QixRQUFRO0FBQy9CO0FBQ0EsdUJBQXVCLFFBQVE7QUFDL0IseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQSxzQkFBc0IsVUFBVTtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCLHFCQUFxQjtBQUNyQixpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQSx1QkFBdUIsUUFBUTtBQUMvQix1QkFBdUIsU0FBUztBQUNoQztBQUNBO0FBQ0EseUJBQXlCLE9BQU87QUFDaEMsMEJBQTBCLFNBQVM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixtQkFBbUI7QUFDMUMsdUJBQXVCLFFBQVE7QUFDL0I7QUFDQSx1QkFBdUIsU0FBUztBQUNoQyx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLFVBQVU7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsUUFBUTtBQUMvQix1QkFBdUIsT0FBTztBQUM5Qix1QkFBdUIsUUFBUTtBQUMvQjtBQUNBO0FBQ0EseUJBQXlCLE9BQU87QUFDaEMsMEJBQTBCLE9BQU87QUFDakMsMEJBQTBCLFFBQVE7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixRQUFRO0FBQy9CLHVCQUF1QixRQUFRO0FBQy9CO0FBQ0EsdUJBQXVCLGdCQUFnQjtBQUN2Qyx1QkFBdUIsUUFBUTtBQUMvQjtBQUNBLHVCQUF1QixLQUFLO0FBQzVCLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsVUFBVTtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsUUFBUTtBQUMvQix1QkFBdUIsUUFBUTtBQUMvQix1QkFBdUIsUUFBUTtBQUMvQjtBQUNBO0FBQ0EseUJBQXlCLE9BQU87QUFDaEMsMEJBQTBCLFFBQVE7QUFDbEMsMEJBQTBCLFFBQVE7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0EsdUJBQXVCLHdCQUF3QjtBQUMvQyx1QkFBdUIsUUFBUTtBQUMvQjtBQUNBLHVCQUF1QixRQUFRO0FBQy9CLHVCQUF1QixRQUFRO0FBQy9CLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsVUFBVTtBQUNoQztBQUNBO0FBQ0E7QUFDQSxpRUFBaUU7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekIscUJBQXFCO0FBQ3JCLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixRQUFRO0FBQzNCLGdCQUFnQiwyQkFBMkI7QUFDM0Msb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsVUFBVTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLFFBQVE7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDO0FBQzVDO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBLCtFQUErRSxnQkFBZ0I7QUFDL0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEM7QUFDNUM7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixxQkFBcUI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsVUFBVTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9rYWlzZWkvRGVza3RvcC9tLXRyYWNlci1haS9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9iaWdxdWVyeS9idWlsZC9zcmMvam9iLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyohXG4gKiBDb3B5cmlnaHQgMjAxNCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSm9iID0gdm9pZCAwO1xuLyohXG4gKiBAbW9kdWxlIGJpZ3F1ZXJ5L2pvYlxuICovXG5jb25zdCBjb21tb25fMSA9IHJlcXVpcmUoXCJAZ29vZ2xlLWNsb3VkL2NvbW1vblwiKTtcbmNvbnN0IHBhZ2luYXRvcl8xID0gcmVxdWlyZShcIkBnb29nbGUtY2xvdWQvcGFnaW5hdG9yXCIpO1xuY29uc3QgcHJvbWlzaWZ5XzEgPSByZXF1aXJlKFwiQGdvb2dsZS1jbG91ZC9wcm9taXNpZnlcIik7XG5jb25zdCBleHRlbmQgPSByZXF1aXJlKFwiZXh0ZW5kXCIpO1xuY29uc3QgYmlncXVlcnlfMSA9IHJlcXVpcmUoXCIuL2JpZ3F1ZXJ5XCIpO1xuY29uc3QgbG9nZ2VyXzEgPSByZXF1aXJlKFwiLi9sb2dnZXJcIik7XG4vKipcbiAqIEBjYWxsYmFjayBRdWVyeVJlc3VsdHNDYWxsYmFja1xuICogQHBhcmFtIHs/RXJyb3J9IGVyciBBbiBlcnJvciByZXR1cm5lZCB3aGlsZSBtYWtpbmcgdGhpcyByZXF1ZXN0LlxuICogQHBhcmFtIHthcnJheX0gcm93cyBUaGUgcmVzdWx0cyBvZiB0aGUgam9iLlxuICovXG4vKipcbiAqIEBjYWxsYmFjayBNYW51YWxRdWVyeVJlc3VsdHNDYWxsYmFja1xuICogQHBhcmFtIHs/RXJyb3J9IGVyciBBbiBlcnJvciByZXR1cm5lZCB3aGlsZSBtYWtpbmcgdGhpcyByZXF1ZXN0LlxuICogQHBhcmFtIHthcnJheX0gcm93cyBUaGUgcmVzdWx0cyBvZiB0aGUgam9iLlxuICogQHBhcmFtIHs/b2JqZWN0fSBuZXh0UXVlcnkgQSBwcmUtbWFkZSBjb25maWd1cmF0aW9uIG9iamVjdCBmb3IgeW91ciBuZXh0XG4gKiAgICAgcmVxdWVzdC4gVGhpcyB3aWxsIGJlIGBudWxsYCBpZiBubyBhZGRpdGlvbmFsIHJlc3VsdHMgYXJlIGF2YWlsYWJsZS5cbiAqICAgICBJZiB0aGUgcXVlcnkgaXMgbm90IHlldCBjb21wbGV0ZSwgeW91IG1heSBnZXQgZW1wdHkgYHJvd3NgIGFuZFxuICogICAgIG5vbi1gbnVsbGAgYG5leHRRdWVyeWAgdGhhdCB5b3Ugc2hvdWxkIHVzZSBmb3IgeW91ciBuZXh0IHJlcXVlc3QuXG4gKiBAcGFyYW0ge29iamVjdH0gYXBpUmVzcG9uc2UgVGhlIGZ1bGwgQVBJIHJlc3BvbnNlLlxuICovXG4vKipcbiAqIEpvYiBvYmplY3RzIGFyZSByZXR1cm5lZCBmcm9tIHZhcmlvdXMgcGxhY2VzIGluIHRoZSBCaWdRdWVyeSBBUEk6XG4gKlxuICogLSB7QGxpbmsgQmlnUXVlcnkjZ2V0Sm9ic31cbiAqIC0ge0BsaW5rIEJpZ1F1ZXJ5I2pvYn1cbiAqIC0ge0BsaW5rIEJpZ1F1ZXJ5I3F1ZXJ5fVxuICogLSB7QGxpbmsgQmlnUXVlcnkjY3JlYXRlSm9ifVxuICogLSB7QGxpbmsgVGFibGUjY29weX1cbiAqIC0ge0BsaW5rIFRhYmxlI2NyZWF0ZVdyaXRlU3RyZWFtfVxuICogLSB7QGxpbmsgVGFibGUjZXh0cmFjdH1cbiAqIC0ge0BsaW5rIFRhYmxlI2xvYWR9XG4gKlxuICogVGhleSBjYW4gYmUgdXNlZCB0byBjaGVjayB0aGUgc3RhdHVzIG9mIGEgcnVubmluZyBqb2Igb3IgZmV0Y2hpbmcgdGhlIHJlc3VsdHNcbiAqIG9mIGEgcHJldmlvdXNseS1leGVjdXRlZCBvbmUuXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge0JpZ1F1ZXJ5fSBiaWdRdWVyeSB7QGxpbmsgQmlnUXVlcnl9IGluc3RhbmNlLlxuICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSBJRCBvZiB0aGUgam9iLlxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSBDb25maWd1cmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5sb2NhdGlvbl0gVGhlIGdlb2dyYXBoaWMgbG9jYXRpb24gb2YgdGhlIGpvYi5cbiAqICAgICAgUmVxdWlyZWQgZXhjZXB0IGZvciBVUyBhbmQgRVUuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYFxuICogY29uc3Qge0JpZ1F1ZXJ5fSA9IHJlcXVpcmUoJ0Bnb29nbGUtY2xvdWQvYmlncXVlcnknKTtcbiAqIGNvbnN0IGJpZ3F1ZXJ5ID0gbmV3IEJpZ1F1ZXJ5KCk7XG4gKlxuICogY29uc3Qgam9iID0gYmlncXVlcnkuam9iKCdqb2ItaWQnKTtcbiAqXG4gKiAvLy1cbiAqIC8vIEFsbCBqb2JzIGFyZSBldmVudCBlbWl0dGVycy4gVGhlIHN0YXR1cyBvZiBlYWNoIGpvYiBpcyBwb2xsZWRcbiAqIC8vIGNvbnRpbnVvdXNseSwgc3RhcnRpbmcgb25seSBhZnRlciB5b3UgcmVnaXN0ZXIgYSBcImNvbXBsZXRlXCIgbGlzdGVuZXIuXG4gKiAvLy1cbiAqIGpvYi5vbignY29tcGxldGUnLCAobWV0YWRhdGEpID0+IHtcbiAqICAgLy8gVGhlIGpvYiBpcyBjb21wbGV0ZS5cbiAqIH0pO1xuICpcbiAqIC8vLVxuICogLy8gQmUgc3VyZSB0byByZWdpc3RlciBhbiBlcnJvciBoYW5kbGVyIGFzIHdlbGwgdG8gY2F0Y2ggYW55IGlzc3VlcyB3aGljaFxuICogLy8gaW1wZWRlZCB0aGUgam9iLlxuICogLy8tXG4gKiBqb2Iub24oJ2Vycm9yJywgKGVycikgPT4ge1xuICogICAvLyBBbiBlcnJvciBvY2N1cnJlZCBkdXJpbmcgdGhlIGpvYi5cbiAqIH0pO1xuICpcbiAqIC8vLVxuICogLy8gVG8gZm9yY2UgdGhlIEpvYiBvYmplY3QgdG8gc3RvcCBwb2xsaW5nIGZvciB1cGRhdGVzLCBzaW1wbHkgcmVtb3ZlIGFueVxuICogLy8gXCJjb21wbGV0ZVwiIGxpc3RlbmVycyB5b3UndmUgcmVnaXN0ZXJlZC5cbiAqIC8vXG4gKiAvLyBUaGUgZWFzaWVzdCB3YXkgdG8gZG8gdGhpcyBpcyB3aXRoIGByZW1vdmVBbGxMaXN0ZW5lcnMoKWAuXG4gKiAvLy1cbiAqIGpvYi5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAqIGBgYFxuICovXG5jbGFzcyBKb2IgZXh0ZW5kcyBjb21tb25fMS5PcGVyYXRpb24ge1xuICAgIGdldFF1ZXJ5UmVzdWx0c1N0cmVhbShvcHRpb25zKSB7XG4gICAgICAgIC8vIHBsYWNlaG9sZGVyIGJvZHksIG92ZXJ3cml0dGVuIGluIGNvbnN0cnVjdG9yXG4gICAgICAgIHJldHVybiBuZXcgcGFnaW5hdG9yXzEuUmVzb3VyY2VTdHJlYW0oe30sICgpID0+IHsgfSk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGJpZ1F1ZXJ5LCBpZCwgb3B0aW9ucykge1xuICAgICAgICBsZXQgbG9jYXRpb247XG4gICAgICAgIGNvbnN0IG1ldGhvZHMgPSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEBjYWxsYmFjayBEZWxldGVKb2JDYWxsYmFja1xuICAgICAgICAgICAgICogQHBhcmFtIHs/RXJyb3J9IGVyciBSZXF1ZXN0IGVycm9yLCBpZiBhbnkuXG4gICAgICAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gYXBpUmVzcG9uc2UgVGhlIGZ1bGwgQVBJIHJlc3BvbnNlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEB0eXBlZGVmIHthcnJheX0gRGVsZXRlSm9iUmVzcG9uc2VcbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7b2JqZWN0fSAwIFRoZSBmdWxsIEFQSSByZXNwb25zZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBEZWxldGUgdGhlIGpvYi5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAc2VlIFtKb2JzOiBkZWxldGUgQVBJIERvY3VtZW50YXRpb25de0BsaW5rIGh0dHBzOi8vY2xvdWQuZ29vZ2xlLmNvbS9iaWdxdWVyeS9kb2NzL3JlZmVyZW5jZS9yZXN0L3YyL2pvYnMvZGVsZXRlfVxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBtZXRob2QgSm9iI2RlbGV0ZVxuICAgICAgICAgICAgICogQHBhcmFtIHtEZWxldGVKb2JDYWxsYmFja30gW2NhbGxiYWNrXSBUaGUgY2FsbGJhY2sgZnVuY3Rpb24uXG4gICAgICAgICAgICAgKiBAcGFyYW0gez9lcnJvcn0gY2FsbGJhY2suZXJyIEFuIGVycm9yIHJldHVybmVkIHdoaWxlIG1ha2luZyB0aGlzXG4gICAgICAgICAgICAgKiAgICAgcmVxdWVzdC5cbiAgICAgICAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBjYWxsYmFjay5hcGlSZXNwb25zZSBUaGUgZnVsbCBBUEkgcmVzcG9uc2UuXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxEZWxldGVKb2JSZXNwb25zZT59XG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICAgICAqIGNvbnN0IHtCaWdRdWVyeX0gPSByZXF1aXJlKCdAZ29vZ2xlLWNsb3VkL2JpZ3F1ZXJ5Jyk7XG4gICAgICAgICAgICAgKiBjb25zdCBiaWdxdWVyeSA9IG5ldyBCaWdRdWVyeSgpO1xuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIGNvbnN0IGpvYiA9IGJpZ3F1ZXJ5LmpvYihqb2JJZCk7XG4gICAgICAgICAgICAgKiBqb2IuZGVsZXRlKChlcnIsIGFwaVJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgKiAgIGlmICghZXJyKSB7XG4gICAgICAgICAgICAgKiAgICAgLy8gVGhlIGpvYiB3YXMgZGVsZXRlZCBzdWNjZXNzZnVsbHkuXG4gICAgICAgICAgICAgKiAgIH1cbiAgICAgICAgICAgICAqIH0pO1xuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBleGFtcGxlIElmIHRoZSBjYWxsYmFjayBpcyBvbWl0dGVkIGEgUHJvbWlzZSB3aWxsIGJlIHJldHVybmVkXG4gICAgICAgICAgICAgKiBjb25zdCBbYXBpUmVzcG9uc2VdID0gYXdhaXQgam9iLmRlbGV0ZSgpO1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBkZWxldGU6IHtcbiAgICAgICAgICAgICAgICByZXFPcHRzOiB7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ0RFTEVURScsXG4gICAgICAgICAgICAgICAgICAgIHVyaTogJy9kZWxldGUnLFxuICAgICAgICAgICAgICAgICAgICBxczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0IGxvY2F0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBsb2NhdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEBjYWxsYmFjayBKb2JFeGlzdHNDYWxsYmFja1xuICAgICAgICAgICAgICogQHBhcmFtIHs/RXJyb3J9IGVyciBSZXF1ZXN0IGVycm9yLCBpZiBhbnkuXG4gICAgICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGV4aXN0cyBJbmRpY2F0ZXMgaWYgdGhlIGpvYiBleGlzdHMuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQHR5cGVkZWYge2FycmF5fSBKb2JFeGlzdHNSZXNwb25zZVxuICAgICAgICAgICAgICogQHByb3BlcnR5IHtib29sZWFufSAwIEluZGljYXRlcyBpZiB0aGUgam9iIGV4aXN0cy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDaGVjayBpZiB0aGUgam9iIGV4aXN0cy5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAbWV0aG9kIEpvYiNleGlzdHNcbiAgICAgICAgICAgICAqIEBwYXJhbSB7Sm9iRXhpc3RzQ2FsbGJhY2t9IFtjYWxsYmFja10gVGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICAgICAgICAgICAgICogQHBhcmFtIHs/ZXJyb3J9IGNhbGxiYWNrLmVyciBBbiBlcnJvciByZXR1cm5lZCB3aGlsZSBtYWtpbmcgdGhpc1xuICAgICAgICAgICAgICogICAgIHJlcXVlc3QuXG4gICAgICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGNhbGxiYWNrLmV4aXN0cyBXaGV0aGVyIHRoZSBqb2IgZXhpc3RzIG9yIG5vdC5cbiAgICAgICAgICAgICAqIEByZXR1cm5zIHtQcm9taXNlPEpvYkV4aXN0c1Jlc3BvbnNlPn1cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgICAgICogYGBgXG4gICAgICAgICAgICAgKiBjb25zdCB7QmlnUXVlcnl9ID0gcmVxdWlyZSgnQGdvb2dsZS1jbG91ZC9iaWdxdWVyeScpO1xuICAgICAgICAgICAgICogY29uc3QgYmlncXVlcnkgPSBuZXcgQmlnUXVlcnkoKTtcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBjb25zdCBqb2IgPSBiaWdxdWVyeS5qb2IoJ2pvYi1pZCcpO1xuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIGpvYi5leGlzdHMoKGVyciwgZXhpc3RzKSA9PiB7fSk7XG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogLy8tXG4gICAgICAgICAgICAgKiAvLyBJZiB0aGUgY2FsbGJhY2sgaXMgb21pdHRlZCwgd2UnbGwgcmV0dXJuIGEgUHJvbWlzZS5cbiAgICAgICAgICAgICAqIC8vLVxuICAgICAgICAgICAgICogam9iLmV4aXN0cygpLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAqICAgY29uc3QgZXhpc3RzID0gZGF0YVswXTtcbiAgICAgICAgICAgICAqIH0pO1xuICAgICAgICAgICAgICogYGBgXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGV4aXN0czogdHJ1ZSxcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQGNhbGxiYWNrIEdldEpvYkNhbGxiYWNrXG4gICAgICAgICAgICAgKiBAcGFyYW0gez9FcnJvcn0gZXJyIFJlcXVlc3QgZXJyb3IsIGlmIGFueS5cbiAgICAgICAgICAgICAqIEBwYXJhbSB7TW9kZWx9IG1vZGVsIFRoZSBqb2IuXG4gICAgICAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gYXBpUmVzcG9uc2UgVGhlIGZ1bGwgQVBJIHJlc3BvbnNlIGJvZHkuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQHR5cGVkZWYge2FycmF5fSBHZXRKb2JSZXNwb25zZVxuICAgICAgICAgICAgICogQHByb3BlcnR5IHtNb2RlbH0gMCBUaGUgam9iLlxuICAgICAgICAgICAgICogQHByb3BlcnR5IHtvYmplY3R9IDEgVGhlIGZ1bGwgQVBJIHJlc3BvbnNlIGJvZHkuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogR2V0IGEgam9iIGlmIGl0IGV4aXN0cy5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAbWV0aG9kIEpvYiNnZXRcbiAgICAgICAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gQ29uZmlndXJhdGlvbiBvYmplY3QuXG4gICAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMubG9jYXRpb25dIFRoZSBnZW9ncmFwaGljIGxvY2F0aW9uIG9mIHRoZSBqb2IuXG4gICAgICAgICAgICAgKiAgICAgUmVxdWlyZWQgZXhjZXB0IGZvciBVUyBhbmQgRVUuXG4gICAgICAgICAgICAgKiBAcGFyYW0ge0dldEpvYkNhbGxiYWNrfSBbY2FsbGJhY2tdIFRoZSBjYWxsYmFjayBmdW5jdGlvbi5cbiAgICAgICAgICAgICAqIEBwYXJhbSB7P2Vycm9yfSBjYWxsYmFjay5lcnIgQW4gZXJyb3IgcmV0dXJuZWQgd2hpbGUgbWFraW5nIHRoaXNcbiAgICAgICAgICAgICAqICAgICByZXF1ZXN0LlxuICAgICAgICAgICAgICogQHBhcmFtIHtKb2J9IGNhbGxiYWNrLmpvYiBUaGUgam9iLlxuICAgICAgICAgICAgICogQHJldHVybnMge1Byb21pc2U8R2V0Sm9iUmVzcG9uc2U+fVxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAgICAgKiBgYGBcbiAgICAgICAgICAgICAqIGNvbnN0IHtCaWdRdWVyeX0gPSByZXF1aXJlKCdAZ29vZ2xlLWNsb3VkL2JpZ3F1ZXJ5Jyk7XG4gICAgICAgICAgICAgKiBjb25zdCBiaWdxdWVyeSA9IG5ldyBCaWdRdWVyeSgpO1xuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIGNvbnN0IGpvYiA9IGJpZ3F1ZXJ5LmpvYignam9iLWlkJyk7XG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogam9iLmdldCgoZXJyLCBqb2IsIGFwaVJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgKiAgIGlmICghZXJyKSB7XG4gICAgICAgICAgICAgKiAgICAgLy8gYGpvYi5tZXRhZGF0YWAgaGFzIGJlZW4gcG9wdWxhdGVkLlxuICAgICAgICAgICAgICogICB9XG4gICAgICAgICAgICAgKiB9KTtcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiAvLy1cbiAgICAgICAgICAgICAqIC8vIElmIHRoZSBjYWxsYmFjayBpcyBvbWl0dGVkLCB3ZSdsbCByZXR1cm4gYSBQcm9taXNlLlxuICAgICAgICAgICAgICogLy8tXG4gICAgICAgICAgICAgKiBqb2IuZ2V0KCkudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICogICBjb25zdCBqb2IgPSBkYXRhWzBdO1xuICAgICAgICAgICAgICogICBjb25zdCBhcGlSZXNwb25zZSA9IGRhdGFbMV07XG4gICAgICAgICAgICAgKiB9KTtcbiAgICAgICAgICAgICAqIGBgYFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBnZXQ6IHRydWUsXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEBjYWxsYmFjayBHZXRKb2JNZXRhZGF0YUNhbGxiYWNrXG4gICAgICAgICAgICAgKiBAcGFyYW0gez9FcnJvcn0gZXJyIFJlcXVlc3QgZXJyb3IsIGlmIGFueS5cbiAgICAgICAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBtZXRhZGF0YSBUaGUgam9iIG1ldGFkYXRhLlxuICAgICAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IGFwaVJlc3BvbnNlIFRoZSBmdWxsIEFQSSByZXNwb25zZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBAdHlwZWRlZiB7YXJyYXl9IEdldEpvYk1ldGFkYXRhUmVzcG9uc2VcbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7b2JqZWN0fSAwIFRoZSBqb2IgbWV0YWRhdGEuXG4gICAgICAgICAgICAgKiBAcHJvcGVydHkge29iamVjdH0gMSBUaGUgZnVsbCBBUEkgcmVzcG9uc2UuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogR2V0IHRoZSBtZXRhZGF0YSBvZiB0aGUgam9iLiBUaGlzIHdpbGwgbW9zdGx5IGJlIHVzZWZ1bCBmb3IgY2hlY2tpbmdcbiAgICAgICAgICAgICAqIHRoZSBzdGF0dXMgb2YgYSBwcmV2aW91c2x5LXJ1biBqb2IuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogU2VlIHtAbGluayBodHRwczovL2Nsb3VkLmdvb2dsZS5jb20vYmlncXVlcnkvZG9jcy9yZWZlcmVuY2UvdjIvam9icy9nZXR8IEpvYnM6IGdldCBBUEkgRG9jdW1lbnRhdGlvbn1cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAbWV0aG9kIEpvYiNnZXRNZXRhZGF0YVxuICAgICAgICAgICAgICogQHBhcmFtIHtHZXRKb2JNZXRhZGF0YUNhbGxiYWNrfSBbY2FsbGJhY2tdIFRoZSBjYWxsYmFjayBmdW5jdGlvbi5cbiAgICAgICAgICAgICAqIEBwYXJhbSB7P2Vycm9yfSBjYWxsYmFjay5lcnIgQW4gZXJyb3IgcmV0dXJuZWQgd2hpbGUgbWFraW5nIHRoaXNcbiAgICAgICAgICAgICAqICAgICByZXF1ZXN0LlxuICAgICAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IGNhbGxiYWNrLm1ldGFkYXRhIFRoZSBtZXRhZGF0YSBvZiB0aGUgam9iLlxuICAgICAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IGNhbGxiYWNrLmFwaVJlc3BvbnNlIFRoZSBmdWxsIEFQSSByZXNwb25zZS5cbiAgICAgICAgICAgICAqIEByZXR1cm5zIHtQcm9taXNlPEdldEpvYk1ldGFkYXRhUmVzcG9uc2U+fVxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAgICAgKiBgYGBcbiAgICAgICAgICAgICAqIGNvbnN0IHtCaWdRdWVyeX0gPSByZXF1aXJlKCdAZ29vZ2xlLWNsb3VkL2JpZ3F1ZXJ5Jyk7XG4gICAgICAgICAgICAgKiBjb25zdCBiaWdxdWVyeSA9IG5ldyBCaWdRdWVyeSgpO1xuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIGNvbnN0IGpvYiA9IGJpZ3F1ZXJ5LmpvYignaWQnKTtcbiAgICAgICAgICAgICAqIGpvYi5nZXRNZXRhZGF0YSgoZXJyLCBtZXRhZGF0YSwgYXBpUmVzcG9uc2UpID0+IHt9KTtcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiAvLy1cbiAgICAgICAgICAgICAqIC8vIElmIHRoZSBjYWxsYmFjayBpcyBvbWl0dGVkLCB3ZSdsbCByZXR1cm4gYSBQcm9taXNlLlxuICAgICAgICAgICAgICogLy8tXG4gICAgICAgICAgICAgKiBqb2IuZ2V0TWV0YWRhdGEoKS50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgKiAgIGNvbnN0IG1ldGFkYXRhID0gZGF0YVswXTtcbiAgICAgICAgICAgICAqICAgY29uc3QgYXBpUmVzcG9uc2UgPSBkYXRhWzFdO1xuICAgICAgICAgICAgICogfSk7XG4gICAgICAgICAgICAgKiBgYGBcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZ2V0TWV0YWRhdGE6IHtcbiAgICAgICAgICAgICAgICByZXFPcHRzOiB7XG4gICAgICAgICAgICAgICAgICAgIHFzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnZXQgbG9jYXRpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxvY2F0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgcGFyZW50OiBiaWdRdWVyeSxcbiAgICAgICAgICAgIGJhc2VVcmw6ICcvam9icycsXG4gICAgICAgICAgICBpZCxcbiAgICAgICAgICAgIG1ldGhvZHMsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2xvY2F0aW9uJywge1xuICAgICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBsb2NhdGlvbjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQoX2xvY2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgbG9jYXRpb24gPSBfbG9jYXRpb247XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5iaWdRdWVyeSA9IGJpZ1F1ZXJ5O1xuICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmxvY2F0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmxvY2F0aW9uID0gb3B0aW9ucy5sb2NhdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnByb2plY3RJZCkge1xuICAgICAgICAgICAgdGhpcy5wcm9qZWN0SWQgPSBvcHRpb25zLnByb2plY3RJZDtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IHRoZSByZXN1bHRzIG9mIGEgam9iIGFzIGEgcmVhZGFibGUgb2JqZWN0IHN0cmVhbS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgQ29uZmlndXJhdGlvbiBvYmplY3QuIFNlZVxuICAgICAgICAgKiAgICAge0BsaW5rIEpvYiNnZXRRdWVyeVJlc3VsdHN9IGZvciBhIGNvbXBsZXRlIGxpc3Qgb2Ygb3B0aW9ucy5cbiAgICAgICAgICogQHJldHVybiB7c3RyZWFtfVxuICAgICAgICAgKlxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKiBgYGBcbiAgICAgICAgICogY29uc3QgdGhyb3VnaDIgPSByZXF1aXJlKCd0aHJvdWdoMicpO1xuICAgICAgICAgKiBjb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG4gICAgICAgICAqIGNvbnN0IHtCaWdRdWVyeX0gPSByZXF1aXJlKCdAZ29vZ2xlLWNsb3VkL2JpZ3F1ZXJ5Jyk7XG4gICAgICAgICAqIGNvbnN0IGJpZ3F1ZXJ5ID0gbmV3IEJpZ1F1ZXJ5KCk7XG4gICAgICAgICAqXG4gICAgICAgICAqIGNvbnN0IGpvYiA9IGJpZ3F1ZXJ5LmpvYignam9iLWlkJyk7XG4gICAgICAgICAqXG4gICAgICAgICAqIGpvYi5nZXRRdWVyeVJlc3VsdHNTdHJlYW0oKVxuICAgICAgICAgKiAgIC5waXBlKHRocm91Z2gyLm9iaihmdW5jdGlvbiAocm93LCBlbmMsIG5leHQpIHtcbiAgICAgICAgICogICAgIHRoaXMucHVzaChKU09OLnN0cmluZ2lmeShyb3cpICsgJ1xcbicpO1xuICAgICAgICAgKiAgICAgbmV4dCgpO1xuICAgICAgICAgKiAgIH0pKVxuICAgICAgICAgKiAgIC5waXBlKGZzLmNyZWF0ZVdyaXRlU3RyZWFtKCcuL3Rlc3QvdGVzdGRhdGEvdGVzdGZpbGUuanNvbicpKTtcbiAgICAgICAgICogYGBgXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmdldFF1ZXJ5UmVzdWx0c1N0cmVhbSA9IHBhZ2luYXRvcl8xLnBhZ2luYXRvci5zdHJlYW1pZnkoJ2dldFF1ZXJ5UmVzdWx0c0FzU3RyZWFtXycpO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIHRyYWNlXyhtc2csIC4uLm90aGVyQXJncykge1xuICAgICAgICAoMCwgbG9nZ2VyXzEubG9nZ2VyKShgW2pvYl1bJHt0aGlzLmlkfV1gLCBtc2csIC4uLm90aGVyQXJncyk7XG4gICAgfVxuICAgIGNhbmNlbChjYWxsYmFjaykge1xuICAgICAgICBsZXQgcXM7XG4gICAgICAgIGlmICh0aGlzLmxvY2F0aW9uKSB7XG4gICAgICAgICAgICBxcyA9IHsgbG9jYXRpb246IHRoaXMubG9jYXRpb24gfTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlcXVlc3Qoe1xuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICB1cmk6ICcvY2FuY2VsJyxcbiAgICAgICAgICAgIHFzLFxuICAgICAgICB9LCBjYWxsYmFjayk7XG4gICAgfVxuICAgIGdldFF1ZXJ5UmVzdWx0cyhvcHRpb25zT3JDYWxsYmFjaywgY2IpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHR5cGVvZiBvcHRpb25zT3JDYWxsYmFjayA9PT0gJ29iamVjdCcgPyBvcHRpb25zT3JDYWxsYmFjayA6IHt9O1xuICAgICAgICBjb25zdCBjYWxsYmFjayA9IHR5cGVvZiBvcHRpb25zT3JDYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJyA/IG9wdGlvbnNPckNhbGxiYWNrIDogY2I7XG4gICAgICAgIGNvbnN0IHFzID0gZXh0ZW5kKHtcbiAgICAgICAgICAgIGxvY2F0aW9uOiB0aGlzLmxvY2F0aW9uLFxuICAgICAgICAgICAgJ2Zvcm1hdE9wdGlvbnMudXNlSW50NjRUaW1lc3RhbXAnOiB0cnVlLFxuICAgICAgICB9LCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy50cmFjZV8oJ1tnZXRRdWVyeVJlc3VsdHNdJywgdGhpcy5pZCwgb3B0aW9ucy5wYWdlVG9rZW4sIG9wdGlvbnMuc3RhcnRJbmRleCk7XG4gICAgICAgIGNvbnN0IHdyYXBJbnRlZ2VycyA9IHFzLndyYXBJbnRlZ2VycyA/IHFzLndyYXBJbnRlZ2VycyA6IGZhbHNlO1xuICAgICAgICBkZWxldGUgcXMud3JhcEludGVnZXJzO1xuICAgICAgICBjb25zdCBwYXJzZUpTT04gPSBxcy5wYXJzZUpTT04gPyBxcy5wYXJzZUpTT04gOiBmYWxzZTtcbiAgICAgICAgZGVsZXRlIHFzLnBhcnNlSlNPTjtcbiAgICAgICAgZGVsZXRlIHFzLmpvYjtcbiAgICAgICAgY29uc3QgdGltZW91dE92ZXJyaWRlID0gdHlwZW9mIHFzLnRpbWVvdXRNcyA9PT0gJ251bWJlcicgPyBxcy50aW1lb3V0TXMgOiBmYWxzZTtcbiAgICAgICAgY29uc3QgY2FjaGVkUm93cyA9IG9wdGlvbnMuX2NhY2hlZFJvd3M7XG4gICAgICAgIGNvbnN0IGNhY2hlZFJlc3BvbnNlID0gb3B0aW9ucy5fY2FjaGVkUmVzcG9uc2U7XG4gICAgICAgIGRlbGV0ZSBvcHRpb25zLl9jYWNoZWRSb3dzO1xuICAgICAgICBkZWxldGUgb3B0aW9ucy5fY2FjaGVkUmVzcG9uc2U7XG4gICAgICAgIGlmIChjYWNoZWRSb3dzKSB7XG4gICAgICAgICAgICBsZXQgbmV4dFF1ZXJ5ID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnBhZ2VUb2tlbikge1xuICAgICAgICAgICAgICAgIG5leHRRdWVyeSA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMsIHtcbiAgICAgICAgICAgICAgICAgICAgcGFnZVRva2VuOiBvcHRpb25zLnBhZ2VUb2tlbixcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhY2hlZFJlc3BvbnNlID09PSBudWxsIHx8IGNhY2hlZFJlc3BvbnNlID09PSB2b2lkIDAgPyB0cnVlIDogZGVsZXRlIGNhY2hlZFJlc3BvbnNlLnJvd3M7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCBjYWNoZWRSb3dzLCBuZXh0UXVlcnksIGNhY2hlZFJlc3BvbnNlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJpZ1F1ZXJ5LnJlcXVlc3Qoe1xuICAgICAgICAgICAgdXJpOiAnL3F1ZXJpZXMvJyArIHRoaXMuaWQsXG4gICAgICAgICAgICBxcyxcbiAgICAgICAgfSwgKGVyciwgcmVzcCkgPT4ge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVyciwgbnVsbCwgbnVsbCwgcmVzcCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgICAgIGxldCByb3dzID0gW107XG4gICAgICAgICAgICBpZiAocmVzcC5zY2hlbWEgJiYgcmVzcC5yb3dzKSB7XG4gICAgICAgICAgICAgICAgcm93cyA9IGJpZ3F1ZXJ5XzEuQmlnUXVlcnkubWVyZ2VTY2hlbWFXaXRoUm93c18ocmVzcC5zY2hlbWEsIHJlc3Aucm93cywge1xuICAgICAgICAgICAgICAgICAgICB3cmFwSW50ZWdlcnMsXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlSlNPTixcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBuZXh0UXVlcnkgPSBudWxsO1xuICAgICAgICAgICAgaWYgKHJlc3Auam9iQ29tcGxldGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgLy8gUXVlcnkgaXMgc3RpbGwgcnVubmluZy5cbiAgICAgICAgICAgICAgICBuZXh0UXVlcnkgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aW1lb3V0IG92ZXJyaWRlIHdhcyBwcm92aWRlZCwgcmV0dXJuIGVycm9yLlxuICAgICAgICAgICAgICAgIGlmICh0aW1lb3V0T3ZlcnJpZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKGBUaGUgcXVlcnkgZGlkIG5vdCBjb21wbGV0ZSBiZWZvcmUgJHt0aW1lb3V0T3ZlcnJpZGV9bXNgKTtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyLCBudWxsLCBuZXh0UXVlcnksIHJlc3ApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocmVzcC5wYWdlVG9rZW4pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRyYWNlXygnW2dldFF1ZXJ5UmVzdWx0c10gaGFzIG1vcmUgcGFnZXMnLCByZXNwLnBhZ2VUb2tlbik7XG4gICAgICAgICAgICAgICAgLy8gTW9yZSByZXN1bHRzIGV4aXN0LlxuICAgICAgICAgICAgICAgIG5leHRRdWVyeSA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMsIHtcbiAgICAgICAgICAgICAgICAgICAgcGFnZVRva2VuOiByZXNwLnBhZ2VUb2tlbixcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBkZWxldGUgbmV4dFF1ZXJ5LnN0YXJ0SW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWxldGUgcmVzcC5yb3dzO1xuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgcm93cywgbmV4dFF1ZXJ5LCByZXNwKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHdpbGwgYmUgY2FsbGVkIGJ5IGBnZXRRdWVyeVJlc3VsdHNTdHJlYW0oKWAuIEl0IGlzIHJlcXVpcmVkIHRvXG4gICAgICogcHJvcGVybHkgc2V0IHRoZSBgYXV0b1BhZ2luYXRlYCBvcHRpb24gdmFsdWUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGdldFF1ZXJ5UmVzdWx0c0FzU3RyZWFtXyhvcHRpb25zLCBjYWxsYmFjaykge1xuICAgICAgICBvcHRpb25zID0gZXh0ZW5kKHsgYXV0b1BhZ2luYXRlOiBmYWxzZSB9LCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5nZXRRdWVyeVJlc3VsdHMob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQb2xsIGZvciBhIHN0YXR1cyB1cGRhdGUuIEV4ZWN1dGUgdGhlIGNhbGxiYWNrOlxuICAgICAqXG4gICAgICogICAtIGNhbGxiYWNrKGVycik6IEpvYiBmYWlsZWRcbiAgICAgKiAgIC0gY2FsbGJhY2soKTogSm9iIGluY29tcGxldGVcbiAgICAgKiAgIC0gY2FsbGJhY2sobnVsbCwgbWV0YWRhdGEpOiBKb2IgY29tcGxldGVcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICAgICAqL1xuICAgIHBvbGxfKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuZ2V0TWV0YWRhdGEoKGVyciwgbWV0YWRhdGEpID0+IHtcbiAgICAgICAgICAgIGlmICghZXJyICYmIG1ldGFkYXRhLnN0YXR1cyAmJiBtZXRhZGF0YS5zdGF0dXMuZXJyb3JSZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBlcnIgPSBuZXcgY29tbW9uXzEudXRpbC5BcGlFcnJvcihtZXRhZGF0YS5zdGF0dXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1ldGFkYXRhLnN0YXR1cy5zdGF0ZSAhPT0gJ0RPTkUnKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgbWV0YWRhdGEpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLkpvYiA9IEpvYjtcbi8qISBEZXZlbG9wZXIgRG9jdW1lbnRhdGlvblxuICpcbiAqIFRoZXNlIG1ldGhvZHMgY2FuIGJlIGF1dG8tcGFnaW5hdGVkLlxuICovXG5wYWdpbmF0b3JfMS5wYWdpbmF0b3IuZXh0ZW5kKEpvYiwgWydnZXRRdWVyeVJlc3VsdHMnXSk7XG4vKiEgRGV2ZWxvcGVyIERvY3VtZW50YXRpb25cbiAqXG4gKiBBbGwgYXN5bmMgbWV0aG9kcyAoZXhjZXB0IGZvciBzdHJlYW1zKSB3aWxsIHJldHVybiBhIFByb21pc2UgaW4gdGhlIGV2ZW50XG4gKiB0aGF0IGEgY2FsbGJhY2sgaXMgb21pdHRlZC5cbiAqL1xuKDAsIHByb21pc2lmeV8xLnByb21pc2lmeUFsbCkoSm9iKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWpvYi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/bigquery/build/src/job.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/bigquery/build/src/logger.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@google-cloud/bigquery/build/src/logger.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2024 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.logger = logger;\nexports.setLogFunction = setLogFunction;\nconst util = __webpack_require__(/*! util */ \"util\");\n/*! The external function used to emit logs. */\nlet logFunction = null;\n/**\n * Log function to use for debug output. By default, we don't perform any\n * logging.\n *\n * @private\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction logger(source, msg, ...otherArgs) {\n    if (logFunction) {\n        const time = new Date().toISOString();\n        const formattedMsg = util.format(`D ${time} | ${source} | ${msg} |`, ...otherArgs);\n        logFunction(formattedMsg);\n    }\n}\n/**\n * Sets or disables the log function for all active BigQuery instances.\n *\n * @param logger A log function that takes a message (such as `console.log`) or\n * `null` to turn off logging.\n */\nfunction setLogFunction(logger) {\n    logFunction = logger;\n}\n//# sourceMappingURL=logger.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9iaWdxdWVyeS9idWlsZC9zcmMvbG9nZ2VyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsY0FBYztBQUNkLHNCQUFzQjtBQUN0QixhQUFhLG1CQUFPLENBQUMsa0JBQU07QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsTUFBTSxJQUFJLFFBQVEsSUFBSSxLQUFLO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMva2Fpc2VpL0Rlc2t0b3AvbS10cmFjZXItYWkvbm9kZV9tb2R1bGVzL0Bnb29nbGUtY2xvdWQvYmlncXVlcnkvYnVpbGQvc3JjL2xvZ2dlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAyMDI0IEdvb2dsZSBMTENcbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5sb2dnZXIgPSBsb2dnZXI7XG5leHBvcnRzLnNldExvZ0Z1bmN0aW9uID0gc2V0TG9nRnVuY3Rpb247XG5jb25zdCB1dGlsID0gcmVxdWlyZShcInV0aWxcIik7XG4vKiEgVGhlIGV4dGVybmFsIGZ1bmN0aW9uIHVzZWQgdG8gZW1pdCBsb2dzLiAqL1xubGV0IGxvZ0Z1bmN0aW9uID0gbnVsbDtcbi8qKlxuICogTG9nIGZ1bmN0aW9uIHRvIHVzZSBmb3IgZGVidWcgb3V0cHV0LiBCeSBkZWZhdWx0LCB3ZSBkb24ndCBwZXJmb3JtIGFueVxuICogbG9nZ2luZy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGludGVybmFsXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5mdW5jdGlvbiBsb2dnZXIoc291cmNlLCBtc2csIC4uLm90aGVyQXJncykge1xuICAgIGlmIChsb2dGdW5jdGlvbikge1xuICAgICAgICBjb25zdCB0aW1lID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xuICAgICAgICBjb25zdCBmb3JtYXR0ZWRNc2cgPSB1dGlsLmZvcm1hdChgRCAke3RpbWV9IHwgJHtzb3VyY2V9IHwgJHttc2d9IHxgLCAuLi5vdGhlckFyZ3MpO1xuICAgICAgICBsb2dGdW5jdGlvbihmb3JtYXR0ZWRNc2cpO1xuICAgIH1cbn1cbi8qKlxuICogU2V0cyBvciBkaXNhYmxlcyB0aGUgbG9nIGZ1bmN0aW9uIGZvciBhbGwgYWN0aXZlIEJpZ1F1ZXJ5IGluc3RhbmNlcy5cbiAqXG4gKiBAcGFyYW0gbG9nZ2VyIEEgbG9nIGZ1bmN0aW9uIHRoYXQgdGFrZXMgYSBtZXNzYWdlIChzdWNoIGFzIGBjb25zb2xlLmxvZ2ApIG9yXG4gKiBgbnVsbGAgdG8gdHVybiBvZmYgbG9nZ2luZy5cbiAqL1xuZnVuY3Rpb24gc2V0TG9nRnVuY3Rpb24obG9nZ2VyKSB7XG4gICAgbG9nRnVuY3Rpb24gPSBsb2dnZXI7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2dnZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/bigquery/build/src/logger.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/bigquery/build/src/model.js":
/*!****************************************************************!*\
  !*** ./node_modules/@google-cloud/bigquery/build/src/model.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*!\n * Copyright 2019 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Model = void 0;\nconst common_1 = __webpack_require__(/*! @google-cloud/common */ \"(rsc)/./node_modules/@google-cloud/common/build/src/index.js\");\nconst promisify_1 = __webpack_require__(/*! @google-cloud/promisify */ \"(rsc)/./node_modules/@google-cloud/promisify/build/src/index.js\");\nconst arrify = __webpack_require__(/*! arrify */ \"(rsc)/./node_modules/arrify/index.js\");\nconst extend = __webpack_require__(/*! extend */ \"(rsc)/./node_modules/extend/index.js\");\n/**\n * The model export formats accepted by BigQuery.\n *\n * @type {array}\n * @private\n */\nconst FORMATS = ['ML_TF_SAVED_MODEL', 'ML_XGBOOST_BOOSTER'];\n/**\n * Model objects are returned by methods such as {@link Dataset#model} and\n * {@link Dataset#getModels}.\n *\n * @class\n * @param {Dataset} dataset {@link Dataset} instance.\n * @param {string} id The ID of the model.\n *\n * @example\n * ```\n * const {BigQuery} = require('@google-cloud/bigquery');\n * const bigquery = new BigQuery();\n * const dataset = bigquery.dataset('my-dataset');\n *\n * const model = dataset.model('my-model');\n * ```\n */\nclass Model extends common_1.ServiceObject {\n    constructor(dataset, id) {\n        const methods = {\n            /**\n             * @callback DeleteModelCallback\n             * @param {?Error} err Request error, if any.\n             * @param {object} apiResponse The full API response.\n             */\n            /**\n             * Delete the model.\n             *\n             * See {@link https://cloud.google.com/bigquery/docs/reference/rest/v2/models/delete| Models: delete API Documentation}\n             *\n             * @method Model#delete\n             * @param {DeleteModelCallback} [callback] The callback function.\n             * @param {?error} callback.err An error returned while making this\n             *     request.\n             * @param {object} callback.apiResponse The full API response.\n             * @returns {Promise}\n             *\n             * @example\n             * ```\n             * const {BigQuery} = require('@google-cloud/bigquery');\n             * const bigquery = new BigQuery();\n             * const dataset = bigquery.dataset('my-dataset');\n             * const model = dataset.model('my-model');\n             *\n             * model.delete((err, apiResponse) => {});\n             *\n             * ```\n             * @example If the callback is omitted we'll return a Promise.\n             * ```\n             * const [apiResponse] = await model.delete();\n             * ```\n             * @example If successful, the response body is empty.\n             * ```\n             * ```\n             */\n            delete: true,\n            /**\n             * @callback ModelExistsCallback\n             * @param {?Error} err Request error, if any.\n             * @param {boolean} exists Indicates if the model exists.\n             */\n            /**\n             * @typedef {array} ModelExistsResponse\n             * @property {boolean} 0 Indicates if the model exists.\n             */\n            /**\n             * Check if the model exists.\n             *\n             * @method Model#exists\n             * @param {ModelExistsCallback} [callback] The callback function.\n             * @param {?error} callback.err An error returned while making this\n             *     request.\n             * @param {boolean} callback.exists Whether the model exists or not.\n             * @returns {Promise<ModelExistsResponse>}\n             *\n             * @example\n             * ```\n             * const {BigQuery} = require('@google-cloud/bigquery');\n             * const bigquery = new BigQuery();\n             * const dataset = bigquery.dataset('my-dataset');\n             * const model = dataset.model('my-model');\n             *\n             * model.exists((err, exists) => {});\n             *\n             * ```\n             * @example If the callback is omitted we'll return a Promise.\n             * ```\n             * const [exists] = await model.exists();\n             * ```\n             */\n            exists: true,\n            /**\n             * @callback GetModelCallback\n             * @param {?Error} err Request error, if any.\n             * @param {Model} model The model.\n             * @param {object} apiResponse The full API response body.\n             */\n            /**\n             * @typedef {array} GetModelResponse\n             * @property {Model} 0 The model.\n             * @property {object} 1 The full API response body.\n             */\n            /**\n             * Get a model if it exists.\n             *\n             * See {@link https://cloud.google.com/bigquery/docs/reference/rest/v2/models/get| Models: get API Documentation}\n             *\n             * @method Model#get:\n             * @param {GetModelCallback} [callback] The callback function.\n             * @param {?error} callback.err An error returned while making this\n             *     request.\n             * @param {Model} callback.model The {@link Model}.\n             * @param {object} callback.apiResponse The full API response.\n             * @returns {Promise<GetModelResponse>}\n             *\n             * @example\n             * ```\n             * const {BigQuery} = require('@google-cloud/bigquery');\n             * const bigquery = new BigQuery();\n             * const dataset = bigquery.dataset('my-dataset');\n             * const model = dataset.model('my-model');\n             *\n             * model.get(err => {\n             *   if (!err) {\n             *     // `model.metadata` has been populated.\n             *   }\n             * });\n             *\n             * ```\n             * @example If the callback is omitted we'll return a Promise.\n             * ```\n             * await model.get();\n             * ```\n             */\n            get: true,\n            /**\n             * @callback GetModelMetadataCallback\n             * @param {?Error} err Request error, if any.\n             * @param {object} metadata The model metadata.\n             * @param {object} apiResponse The full API response.\n             */\n            /**\n             * @typedef {array} GetModelMetadataResponse\n             * @property {object} 0 The model metadata.\n             * @property {object} 1 The full API response.\n             */\n            /**\n             * Return the metadata associated with the model.\n             *\n             * See {@link https://cloud.google.com/bigquery/docs/reference/rest/v2/models/get| Models: get API Documentation}\n             *\n             * @method Model#getMetadata\n             * @param {GetModelMetadataCallback} [callback] The callback function.\n             * @param {?error} callback.err An error returned while making this\n             *     request.\n             * @param {object} callback.metadata The metadata of the model.\n             * @param {object} callback.apiResponse The full API response.\n             * @returns {Promise<GetModelMetadataResponse>}\n             *\n             * @example\n             * ```\n             * const {BigQuery} = require('@google-cloud/bigquery');\n             * const bigquery = new BigQuery();\n             * const dataset = bigquery.dataset('my-dataset');\n             * const model = dataset.model('my-model');\n             *\n             * model.getMetadata((err, metadata, apiResponse) => {});\n             *\n             * ```\n             * @example If the callback is omitted we'll return a Promise.\n             * ```\n             * const [metadata, apiResponse] = await model.getMetadata();\n             * ```\n             */\n            getMetadata: true,\n            /**\n             * @callback SetModelMetadataCallback\n             * @param {?Error} err Request error, if any.\n             * @param {object} metadata The model metadata.\n             * @param {object} apiResponse The full API response.\n             */\n            /**\n             * @typedef {array} SetModelMetadataResponse\n             * @property {object} 0 The model metadata.\n             * @property {object} 1 The full API response.\n             */\n            /**\n             * See {@link https://cloud.google.com/bigquery/docs/reference/rest/v2/models/patch| Models: patch API Documentation}\n             *\n             * @method Model#setMetadata\n             * @param {object} metadata The metadata key/value object to set.\n             * @param {SetModelMetadataCallback} [callback] The callback function.\n             * @param {?error} callback.err An error returned while making this\n             *     request.\n             * @param {object} callback.metadata The updated metadata of the model.\n             * @param {object} callback.apiResponse The full API response.\n             * @returns {Promise<SetModelMetadataResponse>}\n             *\n             * @example\n             * ```\n             * const {BigQuery} = require('@google-cloud/bigquery');\n             * const bigquery = new BigQuery();\n             * const dataset = bigquery.dataset('my-dataset');\n             * const model = dataset.model('my-model');\n             *\n             * const metadata = {\n             *   friendlyName: 'TheBestModelEver'\n             * };\n             *\n             * model.setMetadata(metadata, (err, metadata, apiResponse) => {});\n             *\n             * ```\n             * @example If the callback is omitted we'll return a Promise.\n             * ```\n             * const [metadata, apiResponse] = await model.setMetadata(metadata);\n             * ```\n             */\n            setMetadata: true,\n        };\n        super({\n            parent: dataset,\n            baseUrl: '/models',\n            id,\n            methods,\n        });\n        this.dataset = dataset;\n        this.bigQuery = dataset.bigQuery;\n    }\n    createExtractJob(destination, optionsOrCallback, cb) {\n        let options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        const callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : cb;\n        options = extend(true, options, {\n            destinationUris: arrify(destination).map(dest => {\n                if (common_1.util.isCustomType(dest, 'storage/file')) {\n                    return ('gs://' + dest.bucket.name + '/' + dest.name);\n                }\n                if (typeof dest === 'string') {\n                    return dest;\n                }\n                throw new Error('Destination must be a string or a File object.');\n            }),\n        });\n        if (options.format) {\n            options.format = options.format.toUpperCase();\n            if (FORMATS.includes(options.format)) {\n                options.destinationFormat = options.format;\n                delete options.format;\n            }\n            else {\n                throw new Error('Destination format not recognized: ' + options.format);\n            }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const body = {\n            configuration: {\n                extract: extend(true, options, {\n                    sourceModel: {\n                        datasetId: this.dataset.id,\n                        projectId: this.dataset.projectId,\n                        modelId: this.id,\n                    },\n                }),\n            },\n        };\n        if (options.jobPrefix) {\n            body.jobPrefix = options.jobPrefix;\n            delete options.jobPrefix;\n        }\n        if (options.jobId) {\n            body.jobId = options.jobId;\n            delete options.jobId;\n        }\n        this.bigQuery.createJob(body, callback);\n    }\n    extract(destination, optionsOrCallback, cb) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        const callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : cb;\n        this.createExtractJob(destination, options, (err, job, resp) => {\n            if (err) {\n                callback(err, resp);\n                return;\n            }\n            job.on('error', callback).on('complete', metadata => {\n                callback(null, metadata);\n            });\n        });\n    }\n}\nexports.Model = Model;\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n(0, promisify_1.promisifyAll)(Model);\n//# sourceMappingURL=model.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/bigquery/build/src/model.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/bigquery/build/src/routine.js":
/*!******************************************************************!*\
  !*** ./node_modules/@google-cloud/bigquery/build/src/routine.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Routine = void 0;\n/*!\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst common_1 = __webpack_require__(/*! @google-cloud/common */ \"(rsc)/./node_modules/@google-cloud/common/build/src/index.js\");\nconst promisify_1 = __webpack_require__(/*! @google-cloud/promisify */ \"(rsc)/./node_modules/@google-cloud/promisify/build/src/index.js\");\nconst extend = __webpack_require__(/*! extend */ \"(rsc)/./node_modules/extend/index.js\");\n/**\n * Routine objects are returned by methods such as\n * {@link Dataset#routine}, {@link Dataset#createRoutine}, and\n * {@link Dataset#getRoutines}.\n *\n * @class\n * @param {Dataset} dataset {@link Dataset} instance.\n * @param {string} id The ID of the routine.\n *\n * @example\n * ```\n * const {BigQuery} = require('@google-cloud/bigquery');\n * const bigquery = new BigQuery();\n * const dataset = bigquery.dataset('my-dataset');\n *\n * const routine = dataset.routine('my_routine');\n * ```\n */\nclass Routine extends common_1.ServiceObject {\n    constructor(dataset, id) {\n        const methods = {\n            /**\n             * Create a routine.\n             *\n             * See {@link https://cloud.google.com/bigquery/docs/reference/rest/v2/routines/insert| Routines: insert API Documentation}\n             *\n             * @method Routine#create\n             * @param {object} config A [routine resource]{@link https://cloud.google.com/bigquery/docs/reference/rest/v2/routines#Routine}.\n             * @param {CreateRoutineCallback} [callback] The callback function.\n             * @returns {Promise<CreateRoutineResponse>}\n             *\n             * @example\n             * ```\n             * const {BigQuery} = require('@google-cloud/bigquery');\n             * const bigquery = new BigQuery();\n             * const dataset = bigquery.dataset('my-dataset');\n             * const routine = dataset.routine('my_routine');\n             *\n             * const config = {\n             *   arguments: [{\n             *     name: 'x',\n             *     dataType: {\n             *       typeKind: 'INT64'\n             *     }\n             *   }],\n             *   definitionBody: 'x * 3',\n             *   routineType: 'SCALAR_FUNCTION',\n             *   returnType: {\n             *     typeKind: 'INT64'\n             *   }\n             * };\n             *\n             * routine.create(config, (err, routine, apiResponse) => {\n             *   if (!err) {\n             *     // The routine was created successfully.\n             *   }\n             * });\n             *\n             * ```\n             * @example If the callback is omitted a Promise will be returned\n             * ```\n             * const [routine, apiResponse] = await routine.create(config);\n             * ```\n             */\n            create: true,\n            /**\n             * @callback DeleteRoutineCallback\n             * @param {?Error} err Request error, if any.\n             * @param {object} apiResponse The full API response.\n             */\n            /**\n             * @typedef {array} DeleteRoutineResponse\n             * @property {object} 0 The full API response.\n             */\n            /**\n             * Deletes a routine.\n             *\n             * See {@link https://cloud.google.com/bigquery/docs/reference/rest/v2/routines/delete| Routines: delete API Documentation}\n             *\n             * @method Routine#delete\n             * @param {DeleteRoutineCallback} [callback] The callback function.\n             * @returns {Promise<DeleteRoutineResponse>}\n             *\n             * @example\n             * ```\n             * const {BigQuery} = require('@google-cloud/bigquery');\n             * const bigquery = new BigQuery();\n             * const dataset = bigquery.dataset('my-dataset');\n             * const routine = dataset.routine('my_routine');\n             *\n             * routine.delete((err, apiResponse) => {\n             *   if (!err) {\n             *     // The routine was deleted successfully.\n             *   }\n             * });\n             *\n             * ```\n             * @example If the callback is omitted a Promise will be returned\n             * ```\n             * const [apiResponse] = await routine.delete();\n             * ```\n             */\n            delete: true,\n            /**\n             * @callback RoutineExistsCallback\n             * @param {?Error} err Request error, if any.\n             * @param {boolean} exists Indicates if the routine exists.\n             */\n            /**\n             * @typedef {array} RoutineExistsResponse\n             * @property {boolean} 0 Indicates if the routine exists.\n             */\n            /**\n             * Check if the routine exists.\n             *\n             * @method Routine#exists\n             * @param {RoutineExistsCallback} [callback] The callback function.\n             * @returns {Promise<RoutineExistsResponse>}\n             *\n             * @example\n             * ```\n             * const {BigQuery} = require('@google-cloud/bigquery');\n             * const bigquery = new BigQuery();\n             * const dataset = bigquery.dataset('my-dataset');\n             * const routine = dataset.routine('my_routine');\n             *\n             * routine.exists((err, exists) => {});\n             *\n             * ```\n             * @example If the callback is omitted a Promise will be returned\n             * ```\n             * const [exists] = await routine.exists();\n             * ```\n             */\n            exists: true,\n            /**\n             * @callback GetRoutineCallback\n             * @param {?Error} err Request error, if any.\n             * @param {Routine} routine The routine.\n             * @param {object} apiResponse The full API response body.\n             */\n            /**\n             * @typedef {array} GetRoutineResponse\n             * @property {Routine} 0 The routine.\n             * @property {object} 1 The full API response body.\n             */\n            /**\n             * Get a routine if it exists.\n             *\n             * See {@link https://cloud.google.com/bigquery/docs/reference/rest/v2/routines/get| Routines: get API Documentation}\n             *\n             * @method Routine#get\n             * @param {GetRoutineCallback} [callback] The callback function.\n             * @returns {Promise<GetRoutineResponse>}\n             *\n             * @example\n             * ```\n             * const {BigQuery} = require('@google-cloud/bigquery');\n             * const bigquery = new BigQuery();\n             * const dataset = bigquery.dataset('my-dataset');\n             * const routine = dataset.routine('my_routine');\n             *\n             * routine.get((err, routine) => {});\n             *\n             * ```\n             * @example If the callback is omitted a Promise will be returned\n             * ```\n             * const [routine2] = await routine.get();\n             * ```\n             */\n            get: true,\n            /**\n             * @callback GetRoutineMetadataCallback\n             * @param {?Error} err Request error, if any.\n             * @param {object} metadata The routine metadata.\n             * @param {object} apiResponse The full API response.\n             */\n            /**\n             * @typedef {array} GetRoutineMetadataResponse\n             * @property {object} 0 The routine metadata.\n             * @property {object} 1 The full API response.\n             */\n            /**\n             * Get the metadata associated with a routine.\n             *\n             * See {@link https://cloud.google.com/bigquery/docs/reference/rest/v2/routines/get| Routines: get API Documentation}\n             *\n             * @method Routine#getMetadata\n             * @param {GetRoutineMetadataCallback} [callback] The callback function.\n             * @returns {Promise<GetRoutineMetadataResponse>}\n             *\n             * @example\n             * ```\n             * const {BigQuery} = require('@google-cloud/bigquery');\n             * const bigquery = new BigQuery();\n             * const dataset = bigquery.dataset('my-dataset');\n             * const routine = dataset.routine('my_routine');\n             *\n             * routine.getMetadata((err, metadata, apiResponse) => {});\n             *\n             * ```\n             * @example If the callback is omitted a Promise will be returned\n             * ```\n             * const [metadata, apiResponse] = await routine.getMetadata();\n             * ```\n             */\n            getMetadata: true,\n            /**\n             * @callback SetRoutineMetadataCallback\n             * @param {?Error} err Request error, if any.\n             * @param {object} metadata The routine metadata.\n             * @param {object} apiResponse The full API response.\n             */\n            /**\n             * @typedef {array} SetRoutineMetadataResponse\n             * @property {object} 0 The routine metadata.\n             * @property {object} 1 The full API response.\n             */\n            /**\n             * Update a routine.\n             *\n             * See {@link https://cloud.google.com/bigquery/docs/reference/rest/v2/routines/update| Routines: update API Documentation}\n             *\n             * @method Routine#setMetadata\n             * @param {object} metadata A [routine resource object]{@link https://cloud.google.com/bigquery/docs/reference/rest/v2/routines#Routine}.\n             * @param {SetRoutineMetadataCallback} [callback] The callback function.\n             * @returns {Promise<SetRoutineMetadataResponse>}\n             *\n             * @example\n             * ```\n             * const {BigQuery} = require('@google-cloud/bigquery');\n             * const bigquery = new BigQuery();\n             * const dataset = bigquery.dataset('my-dataset');\n             * const routine = dataset.routine('my_routine');\n             *\n             * const updates = {\n             *   description: 'The perfect description!'\n             * };\n             *\n             * routine.setMetadata(updates, (err, metadata, apiResponse) => {});\n             *\n             * ```\n             * @example If the callback is omitted a Promise will be returned\n             * ```\n             * const [metadata, apiResponse] = await routine.setMetadata(updates);\n             * ```\n             */\n            setMetadata: {\n                reqOpts: {\n                    method: 'PUT',\n                },\n            },\n        };\n        super({\n            parent: dataset,\n            baseUrl: '/routines',\n            id,\n            methods,\n            createMethod: dataset.createRoutine.bind(dataset),\n        });\n    }\n    setMetadata(metadata, callback) {\n        // per the python client, it would appear that in order to update a routine\n        // you need to send the routine in its entirety, not just the updated fields\n        this.getMetadata((err, fullMetadata) => {\n            if (err) {\n                callback(err);\n                return;\n            }\n            const updatedMetadata = extend(true, {}, fullMetadata, metadata);\n            super.setMetadata(updatedMetadata, callback);\n        });\n    }\n}\nexports.Routine = Routine;\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n(0, promisify_1.promisifyAll)(Routine);\n//# sourceMappingURL=routine.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/bigquery/build/src/routine.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/bigquery/build/src/rowBatch.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@google-cloud/bigquery/build/src/rowBatch.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*!\n * Copyright 2022 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RowBatch = exports.BATCH_LIMITS = void 0;\nexports.BATCH_LIMITS = {\n    maxBytes: 9 * 1024 * 1024,\n    maxRows: 50000,\n};\n/**\n * Call used to help batch rows.\n *\n * @private\n *\n * @param {BatchInsertOptions} options The batching options.\n */\nclass RowBatch {\n    constructor(options) {\n        this.batchOptions = options;\n        this.rows = [];\n        this.callbacks = [];\n        this.created = Date.now();\n        this.bytes = 0;\n    }\n    /**\n     * Adds a row to the current batch.\n     *\n     * @param {object} row The row to insert.\n     * @param {InsertRowsCallback} callback The callback function.\n     */\n    add(row, callback) {\n        this.rows.push(row);\n        this.callbacks.push(callback);\n        this.bytes += Buffer.byteLength(JSON.stringify(row));\n    }\n    /**\n     * Indicates if a given row can fit in the batch.\n     *\n     * @param {object} row The row in question.\n     * @returns {boolean}\n     */\n    canFit(row) {\n        const { maxRows, maxBytes } = this.batchOptions;\n        return (this.rows.length < maxRows &&\n            this.bytes + Buffer.byteLength(JSON.stringify(row)) <= maxBytes);\n    }\n    /**\n     * Checks to see if this batch is at the maximum allowed payload size.\n     *\n     * @returns {boolean}\n     */\n    isAtMax() {\n        const { maxRows, maxBytes } = exports.BATCH_LIMITS;\n        return this.rows.length >= maxRows || this.bytes >= maxBytes;\n    }\n    /**\n     * Indicates if the batch is at capacity.\n     *\n     * @returns {boolean}\n     */\n    isFull() {\n        const { maxRows, maxBytes } = this.batchOptions;\n        return this.rows.length >= maxRows || this.bytes >= maxBytes;\n    }\n}\nexports.RowBatch = RowBatch;\n//# sourceMappingURL=rowBatch.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9iaWdxdWVyeS9idWlsZC9zcmMvcm93QmF0Y2guanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0JBQWdCLEdBQUcsb0JBQW9CO0FBQ3ZDLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxvQkFBb0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsb0JBQW9CO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixpQkFBaUI7QUFDakI7QUFDQTtBQUNBLGdCQUFnQixvQkFBb0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSxnQkFBZ0Isb0JBQW9CO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLGdCQUFnQixvQkFBb0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCIiwic291cmNlcyI6WyIvVXNlcnMva2Fpc2VpL0Rlc2t0b3AvbS10cmFjZXItYWkvbm9kZV9tb2R1bGVzL0Bnb29nbGUtY2xvdWQvYmlncXVlcnkvYnVpbGQvc3JjL3Jvd0JhdGNoLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyohXG4gKiBDb3B5cmlnaHQgMjAyMiBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUm93QmF0Y2ggPSBleHBvcnRzLkJBVENIX0xJTUlUUyA9IHZvaWQgMDtcbmV4cG9ydHMuQkFUQ0hfTElNSVRTID0ge1xuICAgIG1heEJ5dGVzOiA5ICogMTAyNCAqIDEwMjQsXG4gICAgbWF4Um93czogNTAwMDAsXG59O1xuLyoqXG4gKiBDYWxsIHVzZWQgdG8gaGVscCBiYXRjaCByb3dzLlxuICpcbiAqIEBwcml2YXRlXG4gKlxuICogQHBhcmFtIHtCYXRjaEluc2VydE9wdGlvbnN9IG9wdGlvbnMgVGhlIGJhdGNoaW5nIG9wdGlvbnMuXG4gKi9cbmNsYXNzIFJvd0JhdGNoIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuYmF0Y2hPcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5yb3dzID0gW107XG4gICAgICAgIHRoaXMuY2FsbGJhY2tzID0gW107XG4gICAgICAgIHRoaXMuY3JlYXRlZCA9IERhdGUubm93KCk7XG4gICAgICAgIHRoaXMuYnl0ZXMgPSAwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgcm93IHRvIHRoZSBjdXJyZW50IGJhdGNoLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHJvdyBUaGUgcm93IHRvIGluc2VydC5cbiAgICAgKiBAcGFyYW0ge0luc2VydFJvd3NDYWxsYmFja30gY2FsbGJhY2sgVGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGFkZChyb3csIGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMucm93cy5wdXNoKHJvdyk7XG4gICAgICAgIHRoaXMuY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgICAgICB0aGlzLmJ5dGVzICs9IEJ1ZmZlci5ieXRlTGVuZ3RoKEpTT04uc3RyaW5naWZ5KHJvdykpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgaWYgYSBnaXZlbiByb3cgY2FuIGZpdCBpbiB0aGUgYmF0Y2guXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcm93IFRoZSByb3cgaW4gcXVlc3Rpb24uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgY2FuRml0KHJvdykge1xuICAgICAgICBjb25zdCB7IG1heFJvd3MsIG1heEJ5dGVzIH0gPSB0aGlzLmJhdGNoT3B0aW9ucztcbiAgICAgICAgcmV0dXJuICh0aGlzLnJvd3MubGVuZ3RoIDwgbWF4Um93cyAmJlxuICAgICAgICAgICAgdGhpcy5ieXRlcyArIEJ1ZmZlci5ieXRlTGVuZ3RoKEpTT04uc3RyaW5naWZ5KHJvdykpIDw9IG1heEJ5dGVzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHRvIHNlZSBpZiB0aGlzIGJhdGNoIGlzIGF0IHRoZSBtYXhpbXVtIGFsbG93ZWQgcGF5bG9hZCBzaXplLlxuICAgICAqXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgaXNBdE1heCgpIHtcbiAgICAgICAgY29uc3QgeyBtYXhSb3dzLCBtYXhCeXRlcyB9ID0gZXhwb3J0cy5CQVRDSF9MSU1JVFM7XG4gICAgICAgIHJldHVybiB0aGlzLnJvd3MubGVuZ3RoID49IG1heFJvd3MgfHwgdGhpcy5ieXRlcyA+PSBtYXhCeXRlcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIGlmIHRoZSBiYXRjaCBpcyBhdCBjYXBhY2l0eS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuICAgIGlzRnVsbCgpIHtcbiAgICAgICAgY29uc3QgeyBtYXhSb3dzLCBtYXhCeXRlcyB9ID0gdGhpcy5iYXRjaE9wdGlvbnM7XG4gICAgICAgIHJldHVybiB0aGlzLnJvd3MubGVuZ3RoID49IG1heFJvd3MgfHwgdGhpcy5ieXRlcyA+PSBtYXhCeXRlcztcbiAgICB9XG59XG5leHBvcnRzLlJvd0JhdGNoID0gUm93QmF0Y2g7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yb3dCYXRjaC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/bigquery/build/src/rowBatch.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/bigquery/build/src/rowQueue.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@google-cloud/bigquery/build/src/rowQueue.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*!\n * Copyright 2022 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RowQueue = exports.defaultOptions = void 0;\nconst common = __webpack_require__(/*! @google-cloud/common */ \"(rsc)/./node_modules/@google-cloud/common/build/src/index.js\");\nconst extend = __webpack_require__(/*! extend */ \"(rsc)/./node_modules/extend/index.js\");\nconst uuid = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/index.js\");\nconst _1 = __webpack_require__(/*! . */ \"(rsc)/./node_modules/@google-cloud/bigquery/build/src/index.js\");\nconst rowBatch_1 = __webpack_require__(/*! ./rowBatch */ \"(rsc)/./node_modules/@google-cloud/bigquery/build/src/rowBatch.js\");\nexports.defaultOptions = {\n    // The maximum number of rows we'll batch up for insert().\n    maxOutstandingRows: 300,\n    // The maximum size of the total batched up rows for insert().\n    maxOutstandingBytes: 9 * 1024 * 1024,\n    // The maximum time we'll wait to send batched rows, in milliseconds.\n    maxDelayMillis: 10000,\n};\n/**\n * Standard row queue used for inserting rows.\n *\n *\n * @param {Table} table The table.\n * @param {Duplex} dup Row stream.\n * @param {InsertStreamOptions} options Insert and batch options.\n */\nclass RowQueue {\n    constructor(table, dup, options) {\n        this.insertRowsOptions = {};\n        this.table = table;\n        this.stream = dup;\n        this.inFlight = false;\n        const opts = typeof options === 'object' ? options : {};\n        if (opts.insertRowsOptions) {\n            this.insertRowsOptions = opts.insertRowsOptions;\n        }\n        else {\n            this.insertRowsOptions = {};\n        }\n        if (opts.batchOptions) {\n            this.setOptions(opts.batchOptions);\n        }\n        else {\n            this.setOptions();\n        }\n        this.batch = new rowBatch_1.RowBatch(this.batchOptions);\n    }\n    /**\n     * Adds a row to the queue.\n     *\n     * @param {RowMetadata} row The row to insert.\n     * @param {InsertRowsCallback} callback The insert callback.\n     */\n    add(row, callback) {\n        if (!this.insertRowsOptions.raw) {\n            row = {\n                json: _1.Table.encodeValue_(row),\n            };\n            if (this.insertRowsOptions.createInsertId !== false) {\n                row.insertId = uuid.v4();\n            }\n        }\n        if (!this.batch.canFit(row)) {\n            this.insert();\n        }\n        this.batch.add(row, callback);\n        if (this.batch.isFull()) {\n            this.insert();\n        }\n        else if (!this.pending) {\n            const { maxMilliseconds } = this.batchOptions;\n            this.pending = setTimeout(() => {\n                this.insert();\n            }, maxMilliseconds);\n        }\n    }\n    /**\n     * Cancels any pending inserts and calls _insert immediately.\n     */\n    insert(callback) {\n        const { rows, callbacks } = this.batch;\n        this.batch = new rowBatch_1.RowBatch(this.batchOptions);\n        if (this.pending) {\n            clearTimeout(this.pending);\n            delete this.pending;\n        }\n        if (rows.length > 0) {\n            this._insert(rows, callbacks, callback);\n        }\n    }\n    /**\n     * Accepts a batch of rows and inserts them into table.\n     *\n     * @param {object[]} rows The rows to insert.\n     * @param {InsertCallback[]} callbacks The corresponding callback functions.\n     * @param {function} [callback] Callback to be fired when insert is done.\n     */\n    _insert(rows, callbacks, cb) {\n        const json = extend(true, {}, this.insertRowsOptions, { rows });\n        delete json.createInsertId;\n        delete json.partialRetries;\n        delete json.raw;\n        this.table.request({\n            method: 'POST',\n            uri: '/insertAll',\n            json,\n        }, (err, resp) => {\n            const partialFailures = ((resp === null || resp === void 0 ? void 0 : resp.insertErrors) || []).map((insertError) => {\n                return {\n                    errors: insertError.errors.map(error => {\n                        return {\n                            message: error.message,\n                            reason: error.reason,\n                        };\n                    }),\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    row: rows[insertError.index],\n                };\n            });\n            if (partialFailures.length > 0) {\n                err = new common.util.PartialFailureError({\n                    errors: partialFailures,\n                    response: resp,\n                });\n                callbacks.forEach(callback => callback(err, resp));\n                this.stream.emit('error', err);\n            }\n            else {\n                callbacks.forEach(callback => callback(err, resp));\n                this.stream.emit('response', resp);\n                cb === null || cb === void 0 ? void 0 : cb(err, resp);\n            }\n            cb === null || cb === void 0 ? void 0 : cb(err, resp);\n        });\n    }\n    /**\n     * Sets the batching options.\n     *\n     *\n     * @param {RowBatchOptions} [options] The batching options.\n     */\n    setOptions(options = {}) {\n        const defaults = this.getOptionDefaults();\n        const { maxBytes, maxRows, maxMilliseconds } = extend(true, defaults, options);\n        this.batchOptions = {\n            maxBytes: Math.min(maxBytes, rowBatch_1.BATCH_LIMITS.maxBytes),\n            maxRows: Math.min(maxRows, rowBatch_1.BATCH_LIMITS.maxRows),\n            maxMilliseconds: maxMilliseconds,\n        };\n    }\n    getOptionDefaults() {\n        // Return a unique copy to avoid shenanigans.\n        const defaults = {\n            maxBytes: exports.defaultOptions.maxOutstandingBytes,\n            maxRows: exports.defaultOptions.maxOutstandingRows,\n            maxMilliseconds: exports.defaultOptions.maxDelayMillis,\n        };\n        return defaults;\n    }\n}\nexports.RowQueue = RowQueue;\n//# sourceMappingURL=rowQueue.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/bigquery/build/src/rowQueue.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/bigquery/build/src/table.js":
/*!****************************************************************!*\
  !*** ./node_modules/@google-cloud/bigquery/build/src/table.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*!\n * Copyright 2014 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Table = void 0;\nconst common_1 = __webpack_require__(/*! @google-cloud/common */ \"(rsc)/./node_modules/@google-cloud/common/build/src/index.js\");\nconst paginator_1 = __webpack_require__(/*! @google-cloud/paginator */ \"(rsc)/./node_modules/@google-cloud/paginator/build/src/index.js\");\nconst promisify_1 = __webpack_require__(/*! @google-cloud/promisify */ \"(rsc)/./node_modules/@google-cloud/promisify/build/src/index.js\");\nconst arrify = __webpack_require__(/*! arrify */ \"(rsc)/./node_modules/arrify/index.js\");\nconst Big = __webpack_require__(/*! big.js */ \"(rsc)/./node_modules/big.js/big.js\");\nconst extend = __webpack_require__(/*! extend */ \"(rsc)/./node_modules/extend/index.js\");\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst is = __webpack_require__(/*! is */ \"(rsc)/./node_modules/is/index.js\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst streamEvents = __webpack_require__(/*! stream-events */ \"(rsc)/./node_modules/stream-events/index.js\");\nconst uuid = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/index.js\");\nconst _1 = __webpack_require__(/*! . */ \"(rsc)/./node_modules/@google-cloud/bigquery/build/src/index.js\");\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst rowQueue_1 = __webpack_require__(/*! ./rowQueue */ \"(rsc)/./node_modules/@google-cloud/bigquery/build/src/rowQueue.js\");\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst duplexify = __webpack_require__(/*! duplexify */ \"(rsc)/./node_modules/duplexify/index.js\");\n/**\n * The file formats accepted by BigQuery.\n *\n * @type {object}\n * @private\n */\nconst FORMATS = {\n    avro: 'AVRO',\n    csv: 'CSV',\n    export_metadata: 'DATASTORE_BACKUP',\n    json: 'NEWLINE_DELIMITED_JSON',\n    orc: 'ORC',\n    parquet: 'PARQUET',\n};\n/**\n * Table objects are returned by methods such as\n * {@link Dataset#table}, {@link Dataset#createTable}, and\n * {@link Dataset#getTables}.\n *\n * @class\n * @param {Dataset} dataset {@link Dataset} instance.\n * @param {string} id The ID of the table.\n * @param {object} [options] Table options.\n * @param {string} [options.location] The geographic location of the table, by\n *      default this value is inherited from the dataset. This can be used to\n *      configure the location of all jobs created through a table instance. It\n *      cannot be used to set the actual location of the table. This value will\n *      be superseded by any API responses containing location data for the\n *      table.\n *\n * @example\n * ```\n * const {BigQuery} = require('@google-cloud/bigquery');\n * const bigquery = new BigQuery();\n * const dataset = bigquery.dataset('my-dataset');\n *\n * const table = dataset.table('my-table');\n * ```\n */\nclass Table extends common_1.ServiceObject {\n    createReadStream(options) {\n        // placeholder body, overwritten in constructor\n        return new paginator_1.ResourceStream({}, () => { });\n    }\n    constructor(dataset, id, options) {\n        const methods = {\n            /**\n             * @callback CreateTableCallback\n             * @param {?Error} err Request error, if any.\n             * @param {Table} table The table.\n             * @param {object} apiResponse The full API response body.\n             */\n            /**\n             * @typedef {array} CreateTableResponse\n             * @property {Table} 0 The table.\n             * @property {object} 1 The full API response body.\n             */\n            /**\n             * Create a table.\n             *\n             * @method Table#create\n             * @param {object} [options] See {@link Dataset#createTable}.\n             * @param {CreateTableCallback} [callback]\n             * @param {?error} callback.err An error returned while making this\n             *     request.\n             * @param {Table} callback.table The new {@link Table}.\n             * @param {object} callback.apiResponse The full API response.\n             * @returns {Promise<CreateTableResponse>}\n             *\n             * @example\n             * ```\n             * const {BigQuery} = require('@google-cloud/bigquery');\n             * const bigquery = new BigQuery();\n             * const dataset = bigquery.dataset('my-dataset');\n             *\n             * const table = dataset.table('my-table');\n             *\n             * table.create((err, table, apiResponse) => {\n             *   if (!err) {\n             *     // The table was created successfully.\n             *   }\n             * });\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * table.create().then((data) => {\n             *   const table = data[0];\n             *   const apiResponse = data[1];\n             * });\n             * ```\n             */\n            create: true,\n            /**\n             * @callback DeleteTableCallback\n             * @param {?Error} err Request error, if any.\n             * @param {object} apiResponse The full API response.\n             */\n            /**\n             * @typedef {array} DeleteTableResponse\n             * @property {object} 0 The full API response.\n             */\n            /**\n             * Delete a table and all its data.\n             *\n             * See {@link https://cloud.google.com/bigquery/docs/reference/v2/tables/delete| Tables: delete API Documentation}\n             *\n             * @method Table#delete\n             * @param {DeleteTableCallback} [callback]\n             * @param {?error} callback.err An error returned while making this\n             *     request.\n             * @param {object} callback.apiResponse The full API response.\n             * @returns {Promise<DeleteTableResponse>}\n             *\n             * @example\n             * ```\n             * const {BigQuery} = require('@google-cloud/bigquery');\n             * const bigquery = new BigQuery();\n             * const dataset = bigquery.dataset('my-dataset');\n             *\n             * const table = dataset.table('my-table');\n             *\n             * table.delete((err, apiResponse) => {});\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * table.delete().then((data) => {\n             *   const apiResponse = data[0];\n             * });\n             * ```\n             */\n            delete: true,\n            /**\n             * @callback TableExistsCallback\n             * @param {?Error} err Request error, if any.\n             * @param {boolean} exists Indicates if the table exists.\n             */\n            /**\n             * @typedef {array} TableExistsCallback\n             * @property {boolean} 0 Indicates if the table exists.\n             */\n            /**\n             * Check if the table exists.\n             *\n             * @method Table#exists\n             * @param {TableExistsCallback} [callback]\n             * @param {?error} callback.err An error returned while making this\n             *     request.\n             * @param {boolean} callback.exists Whether the table exists or not.\n             * @returns {Promise<TableExistsCallback>}\n             *\n             * @example\n             * ```\n             * const {BigQuery} = require('@google-cloud/bigquery');\n             * const bigquery = new BigQuery();\n             * const dataset = bigquery.dataset('my-dataset');\n             *\n             * const table = dataset.table('my-table');\n             *\n             * table.exists((err, exists) => {});\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * table.exists().then((data) => {\n             *   const exists = data[0];\n             * });\n             * ```\n             */\n            exists: true,\n            /**\n             * @callback GetTableCallback\n             * @param {?Error} err Request error, if any.\n             * @param {Table} table The table.\n             * @param {object} apiResponse The full API response body.\n             */\n            /**\n             * @typedef {array} GetTableResponse\n             * @property {Table} 0 The table.\n             * @property {object} 1 The full API response body.\n             */\n            /**\n             * Get a table if it exists.\n             *\n             * You may optionally use this to \"get or create\" an object by providing\n             * an object with `autoCreate` set to `true`. Any extra configuration that\n             * is normally required for the `create` method must be contained within\n             * this object as well.\n             *\n             * If you wish to get a selection of metadata instead of the full table metadata\n             * (retrieved by both Table#get by default and by Table#getMetadata), use\n             * the `options` parameter to set the `view` and/or `selectedFields` query parameters.\n             *\n             * See {@link https://cloud.google.com/bigquery/docs/reference/rest/v2/tables/get#TableMetadataView| Tables.get and TableMetadataView }\n             *\n             * @method Table#get\n             * @param {options} [options] Configuration object.\n             * @param {boolean} [options.autoCreate=false] Automatically create the\n             *     object if it does not exist.\n             * @param {function} [callback]\n             * @param {?error} callback.err An error returned while making this\n             *     request.\n             * @param {Table} callback.table The {@link Table}.\n             * @param {object} callback.apiResponse The full API response.\n             * @returns {Promise<GetTableResponse>}\n             *\n             * @example\n             * ```\n             * const {BigQuery} = require('@google-cloud/bigquery');\n             * const bigquery = new BigQuery();\n             * const dataset = bigquery.dataset('my-dataset');\n             *\n             * const table = dataset.table('my-table');\n             *\n             * const options = {\n             *   view: \"BASIC\"\n             * }\n             *\n             * table.get((err, table, apiResponse) => {\n             *   // `table.metadata` has been populated.\n             * });\n             *\n             * table.get(options, (err, table, apiResponse) => {\n             *   // A selection of `table.metadata` has been populated\n             * })\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * table.get().then((data) => {\n             *   const table = data[0];\n             *   const apiResponse = data[1];\n             * });\n             * ```\n             */\n            get: true,\n            /**\n             * @callback GetTableMetadataCallback\n             * @param {?Error} err Request error, if any.\n             * @param {object} metadata The table metadata.\n             * @param {object} apiResponse The full API response.\n             */\n            /**\n             * @typedef {array} GetTableMetadataResponse\n             * @property {object} 0 The table metadata.\n             * @property {object} 1 The full API response.\n             */\n            /**\n             * Return the metadata associated with the Table.\n             *\n             * See {@link https://cloud.google.com/bigquery/docs/reference/v2/tables/get| Tables: get API Documentation}\n             *\n             * @method Table#getMetadata\n             * @param {GetTableMetadataCallback} [callback] The callback function.\n             * @param {?error} callback.err An error returned while making this\n             *     request.\n             * @param {object} callback.metadata The metadata of the Table.\n             * @param {object} callback.apiResponse The full API response.\n             * @returns {Promise<GetTableMetadataResponse>}\n             *\n             * @example\n             * ```\n             * const {BigQuery} = require('@google-cloud/bigquery');\n             * const bigquery = new BigQuery();\n             * const dataset = bigquery.dataset('my-dataset');\n             *\n             * const table = dataset.table('my-table');\n             *\n             * table.getMetadata((err, metadata, apiResponse) => {});\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * table.getMetadata().then((data) => {\n             *   const metadata = data[0];\n             *   const apiResponse = data[1];\n             * });\n             * ```\n             */\n            getMetadata: true,\n        };\n        super({\n            parent: dataset,\n            baseUrl: '/tables',\n            id,\n            createMethod: dataset.createTable.bind(dataset),\n            methods,\n        });\n        if (options && options.location) {\n            this.location = options.location;\n        }\n        this.bigQuery = dataset.bigQuery;\n        this.dataset = dataset;\n        // Catch all for read-modify-write cycle\n        // https://cloud.google.com/bigquery/docs/api-performance#read-patch-write\n        this.interceptors.push({\n            request: (reqOpts) => {\n                if (reqOpts.method === 'PATCH' && reqOpts.json.etag) {\n                    reqOpts.headers = reqOpts.headers || {};\n                    reqOpts.headers['If-Match'] = reqOpts.json.etag;\n                }\n                return reqOpts;\n            },\n        });\n        /**\n         * Create a readable stream of the rows of data in your table. This method\n         * is simply a wrapper around {@link Table#getRows}.\n         *\n         * See {@link https://cloud.google.com/bigquery/docs/reference/v2/tabledata/list| Tabledata: list API Documentation}\n         *\n         * @returns {ReadableStream}\n         *\n         * @example\n         * ```\n         * const {BigQuery} = require('@google-cloud/bigquery');\n         * const bigquery = new BigQuery();\n         * const dataset = bigquery.dataset('my-dataset');\n         * const table = dataset.table('my-table');\n         *\n         * table.createReadStream(options)\n         *   .on('error', console.error)\n         *   .on('data', row => {})\n         *   .on('end', function() {\n         *     // All rows have been retrieved.\n         *   });\n         *\n         * //-\n         * // If you anticipate many results, you can end a stream early to prevent\n         * // unnecessary processing and API requests.\n         * //-\n         * table.createReadStream()\n         *   .on('data', function(row) {\n         *     this.end();\n         *   });\n         * ```\n         */\n        this.createReadStream = paginator_1.paginator.streamify('getRows');\n    }\n    /**\n     * Convert a comma-separated name:type string to a table schema object.\n     *\n     * @static\n     * @private\n     *\n     * @param {string} str Comma-separated schema string.\n     * @returns {object} Table schema in the format the API expects.\n     */\n    static createSchemaFromString_(str) {\n        return str.split(/\\s*,\\s*/).reduce((acc, pair) => {\n            acc.fields.push({\n                name: pair.split(':')[0].trim(),\n                type: (pair.split(':')[1] || 'STRING').toUpperCase().trim(),\n            });\n            return acc;\n        }, {\n            fields: [],\n        });\n    }\n    /**\n     * Convert a row entry from native types to their encoded types that the API\n     * expects.\n     *\n     * @static\n     * @private\n     *\n     * @param {*} value The value to be converted.\n     * @returns {*} The converted value.\n     */\n    static encodeValue_(value) {\n        var _a;\n        if (typeof value === 'undefined' || value === null) {\n            return null;\n        }\n        if (value instanceof Buffer) {\n            return value.toString('base64');\n        }\n        if (value instanceof Big) {\n            return value.toFixed();\n        }\n        const customTypeConstructorNames = [\n            'BigQueryDate',\n            'BigQueryDatetime',\n            'BigQueryInt',\n            'BigQueryTime',\n            'BigQueryTimestamp',\n            'BigQueryRange',\n            'Geography',\n        ];\n        const constructorName = (_a = value.constructor) === null || _a === void 0 ? void 0 : _a.name;\n        const isCustomType = customTypeConstructorNames.indexOf(constructorName) > -1;\n        if (isCustomType) {\n            return value.value;\n        }\n        if (is.date(value)) {\n            return value.toJSON();\n        }\n        if (is.array(value)) {\n            return value.map(Table.encodeValue_);\n        }\n        if (typeof value === 'object') {\n            return Object.keys(value).reduce((acc, key) => {\n                acc[key] = Table.encodeValue_(value[key]);\n                return acc;\n            }, {});\n        }\n        return value;\n    }\n    /**\n     * @private\n     */\n    static formatMetadata_(options) {\n        const body = extend(true, {}, options);\n        if (options.name) {\n            body.friendlyName = options.name;\n            delete body.name;\n        }\n        if (is.string(options.schema)) {\n            body.schema = Table.createSchemaFromString_(options.schema);\n        }\n        if (is.array(options.schema)) {\n            body.schema = {\n                fields: options.schema,\n            };\n        }\n        if (body.schema && body.schema.fields) {\n            body.schema.fields = body.schema.fields.map(field => {\n                if (field.fields) {\n                    field.type = 'RECORD';\n                }\n                return field;\n            });\n        }\n        if (is.string(options.partitioning)) {\n            body.timePartitioning = {\n                type: options.partitioning.toUpperCase(),\n            };\n            delete body.partitioning;\n        }\n        if (is.string(options.view)) {\n            body.view = {\n                query: options.view,\n                useLegacySql: false,\n            };\n        }\n        return body;\n    }\n    copy(destination, metadataOrCallback, cb) {\n        const metadata = typeof metadataOrCallback === 'object' ? metadataOrCallback : {};\n        const callback = typeof metadataOrCallback === 'function' ? metadataOrCallback : cb;\n        this.createCopyJob(destination, metadata, (err, job, resp) => {\n            if (err) {\n                callback(err, resp);\n                return;\n            }\n            job.on('error', callback).on('complete', (metadata) => {\n                callback(null, metadata);\n            });\n        });\n    }\n    copyFrom(sourceTables, metadataOrCallback, cb) {\n        const metadata = typeof metadataOrCallback === 'object' ? metadataOrCallback : {};\n        const callback = typeof metadataOrCallback === 'function' ? metadataOrCallback : cb;\n        this.createCopyFromJob(sourceTables, metadata, (err, job, resp) => {\n            if (err) {\n                callback(err, resp);\n                return;\n            }\n            job.on('error', callback).on('complete', metadata => {\n                callback(null, metadata);\n            });\n        });\n    }\n    createCopyJob(destination, metadataOrCallback, cb) {\n        if (!(destination instanceof Table)) {\n            throw new Error('Destination must be a Table object.');\n        }\n        const metadata = typeof metadataOrCallback === 'object'\n            ? metadataOrCallback\n            : {};\n        const callback = typeof metadataOrCallback === 'function' ? metadataOrCallback : cb;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const body = {\n            configuration: {\n                copy: extend(true, metadata, {\n                    destinationTable: {\n                        datasetId: destination.dataset.id,\n                        projectId: destination.dataset.projectId,\n                        tableId: destination.id,\n                    },\n                    sourceTable: {\n                        datasetId: this.dataset.id,\n                        projectId: this.dataset.projectId,\n                        tableId: this.id,\n                    },\n                }),\n            },\n        };\n        if (metadata.jobPrefix) {\n            body.jobPrefix = metadata.jobPrefix;\n            delete metadata.jobPrefix;\n        }\n        if (this.location) {\n            body.location = this.location;\n        }\n        if (metadata.jobId) {\n            body.jobId = metadata.jobId;\n            delete metadata.jobId;\n        }\n        this.bigQuery.createJob(body, callback);\n    }\n    createCopyFromJob(source, metadataOrCallback, cb) {\n        const sourceTables = arrify(source);\n        sourceTables.forEach(sourceTable => {\n            if (!(sourceTable instanceof Table)) {\n                throw new Error('Source must be a Table object.');\n            }\n        });\n        const metadata = typeof metadataOrCallback === 'object' ? metadataOrCallback : {};\n        const callback = typeof metadataOrCallback === 'function' ? metadataOrCallback : cb;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const body = {\n            configuration: {\n                copy: extend(true, metadata, {\n                    destinationTable: {\n                        datasetId: this.dataset.id,\n                        projectId: this.dataset.projectId,\n                        tableId: this.id,\n                    },\n                    sourceTables: sourceTables.map(sourceTable => {\n                        return {\n                            datasetId: sourceTable.dataset.id,\n                            projectId: sourceTable.dataset.projectId,\n                            tableId: sourceTable.id,\n                        };\n                    }),\n                }),\n            },\n        };\n        if (metadata.jobPrefix) {\n            body.jobPrefix = metadata.jobPrefix;\n            delete metadata.jobPrefix;\n        }\n        if (this.location) {\n            body.location = this.location;\n        }\n        if (metadata.jobId) {\n            body.jobId = metadata.jobId;\n            delete metadata.jobId;\n        }\n        this.bigQuery.createJob(body, callback);\n    }\n    createExtractJob(destination, optionsOrCallback, cb) {\n        let options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        const callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : cb;\n        options = extend(true, options, {\n            destinationUris: arrify(destination).map(dest => {\n                if (!common_1.util.isCustomType(dest, 'storage/file')) {\n                    throw new Error('Destination must be a File object.');\n                }\n                // If no explicit format was provided, attempt to find a match from the\n                // file's extension. If no match, don't set, and default upstream to\n                // CSV.\n                const format = path.extname(dest.name).substr(1).toLowerCase();\n                if (!options.destinationFormat && !options.format && FORMATS[format]) {\n                    options.destinationFormat = FORMATS[format];\n                }\n                return 'gs://' + dest.bucket.name + '/' + dest.name;\n            }),\n        });\n        if (options.format) {\n            options.format = options.format.toLowerCase();\n            if (FORMATS[options.format]) {\n                options.destinationFormat = FORMATS[options.format];\n                delete options.format;\n            }\n            else {\n                throw new Error('Destination format not recognized: ' + options.format);\n            }\n        }\n        if (options.gzip) {\n            options.compression = 'GZIP';\n            delete options.gzip;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const body = {\n            configuration: {\n                extract: extend(true, options, {\n                    sourceTable: {\n                        datasetId: this.dataset.id,\n                        projectId: this.dataset.projectId,\n                        tableId: this.id,\n                    },\n                }),\n            },\n        };\n        if (options.jobPrefix) {\n            body.jobPrefix = options.jobPrefix;\n            delete options.jobPrefix;\n        }\n        if (this.location) {\n            body.location = this.location;\n        }\n        if (options.jobId) {\n            body.jobId = options.jobId;\n            delete options.jobId;\n        }\n        this.bigQuery.createJob(body, callback);\n    }\n    createLoadJob(source, metadataOrCallback, cb) {\n        const metadata = typeof metadataOrCallback === 'object' ? metadataOrCallback : {};\n        const callback = typeof metadataOrCallback === 'function' ? metadataOrCallback : cb;\n        this._createLoadJob(source, metadata).then(([resp]) => callback(null, resp, resp.metadata), err => callback(err));\n    }\n    /**\n     * @param {string | File | File[]} source\n     * @param {JobLoadMetadata} metadata\n     * @returns {Promise<JobResponse>}\n     * @private\n     */\n    async _createLoadJob(source, metadata) {\n        if (metadata.format) {\n            metadata.sourceFormat = FORMATS[metadata.format.toLowerCase()];\n            delete metadata.format;\n        }\n        if (this.location) {\n            metadata.location = this.location;\n        }\n        if (typeof source === 'string') {\n            // A path to a file was given. If a sourceFormat wasn't specified, try to\n            // find a match from the file's extension.\n            const detectedFormat = FORMATS[path.extname(source).substr(1).toLowerCase()];\n            if (!metadata.sourceFormat && detectedFormat) {\n                metadata.sourceFormat = detectedFormat;\n            }\n            // Read the file into a new write stream.\n            const jobWritable = fs\n                .createReadStream(source)\n                .pipe(this.createWriteStream_(metadata));\n            const [jobResponse] = (await (0, events_1.once)(jobWritable, 'job'));\n            return [jobResponse, jobResponse.metadata];\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const body = {\n            configuration: {\n                load: {\n                    destinationTable: {\n                        projectId: this.dataset.projectId,\n                        datasetId: this.dataset.id,\n                        tableId: this.id,\n                    },\n                },\n            },\n        };\n        if (metadata.jobPrefix) {\n            body.jobPrefix = metadata.jobPrefix;\n            delete metadata.jobPrefix;\n        }\n        if (metadata.location) {\n            body.location = metadata.location;\n            delete metadata.location;\n        }\n        if (metadata.jobId) {\n            body.jobId = metadata.jobId;\n            delete metadata.jobId;\n        }\n        extend(true, body.configuration.load, metadata, {\n            sourceUris: arrify(source).map(src => {\n                if (!common_1.util.isCustomType(src, 'storage/file')) {\n                    throw new Error('Source must be a File object.');\n                }\n                // If no explicit format was provided, attempt to find a match from\n                // the file's extension. If no match, don't set, and default upstream\n                // to CSV.\n                const format = FORMATS[path.extname(src.name).substr(1).toLowerCase()];\n                if (!metadata.sourceFormat && format) {\n                    body.configuration.load.sourceFormat = format;\n                }\n                return 'gs://' + src.bucket.name + '/' + src.name;\n            }),\n        });\n        return this.bigQuery.createJob(body);\n    }\n    createQueryJob(options, callback) {\n        return this.dataset.createQueryJob(options, callback);\n    }\n    /**\n     * Run a query scoped to your dataset as a readable object stream.\n     *\n     * See {@link BigQuery#createQueryStream} for full documentation of this\n     * method.\n     *\n     * @param {object} query See {@link BigQuery#createQueryStream} for full\n     *     documentation of this method.\n     * @returns {stream} See {@link BigQuery#createQueryStream} for full\n     *     documentation of this method.\n     */\n    createQueryStream(query) {\n        return this.dataset.createQueryStream(query);\n    }\n    /**\n     * Creates a write stream. Unlike the public version, this will not\n     * automatically poll the underlying job.\n     *\n     * @private\n     *\n     * @param {string|object} [metadata] Metadata to set with the load operation.\n     *     The metadata object should be in the format of the\n     *     {@link https://cloud.google.com/bigquery/docs/reference/rest/v2/Job#JobConfigurationLoad| `configuration.load`}\n     * property of a Jobs resource. If a string is given, it will be used\n     * as the filetype.\n     * @param {string} [metadata.jobId] Custom job id.\n     * @param {string} [metadata.jobPrefix] Prefix to apply to the job id.\n     * @returns {WritableStream}\n     */\n    createWriteStream_(metadata) {\n        metadata = metadata || {};\n        if (typeof metadata === 'string') {\n            metadata = {\n                sourceFormat: FORMATS[metadata.toLowerCase()],\n            };\n        }\n        if (typeof metadata.schema === 'string') {\n            metadata.schema = Table.createSchemaFromString_(metadata.schema);\n        }\n        metadata = extend(true, {\n            destinationTable: {\n                projectId: this.dataset.projectId,\n                datasetId: this.dataset.id,\n                tableId: this.id,\n            },\n        }, metadata);\n        let jobId = metadata.jobId || uuid.v4();\n        if (metadata.jobId) {\n            delete metadata.jobId;\n        }\n        if (metadata.jobPrefix) {\n            jobId = metadata.jobPrefix + jobId;\n            delete metadata.jobPrefix;\n        }\n        const dup = streamEvents(duplexify());\n        dup.once('writing', () => {\n            common_1.util.makeWritableStream(dup, {\n                makeAuthenticatedRequest: this.bigQuery.makeAuthenticatedRequest,\n                metadata: {\n                    configuration: {\n                        load: metadata,\n                    },\n                    jobReference: {\n                        jobId,\n                        projectId: this.dataset.projectId,\n                        location: this.location,\n                    },\n                },\n                request: {\n                    uri: `${this.bigQuery.apiEndpoint}/upload/bigquery/v2/projects/${this.dataset.projectId}/jobs`,\n                },\n            }, \n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            (data) => {\n                const job = this.bigQuery.job(data.jobReference.jobId, {\n                    location: data.jobReference.location,\n                    projectId: data.jobReference.projectId,\n                });\n                job.metadata = data;\n                dup.emit('job', job);\n            });\n        });\n        return dup;\n    }\n    /**\n     * Load data into your table from a readable stream of AVRO, CSV, JSON, ORC,\n     * or PARQUET data.\n     *\n     * See {@link https://cloud.google.com/bigquery/docs/reference/v2/jobs/insert| Jobs: insert API Documentation}\n     *\n     * @param {string|object} [metadata] Metadata to set with the load operation.\n     *     The metadata object should be in the format of the\n     *     {@link https://cloud.google.com/bigquery/docs/reference/rest/v2/Job#JobConfigurationLoad| `configuration.load`}\n     * property of a Jobs resource. If a string is given,\n     * it will be used as the filetype.\n     * @param {string} [metadata.jobId] Custom job id.\n     * @param {string} [metadata.jobPrefix] Prefix to apply to the job id.\n     * @returns {WritableStream}\n     *\n     * @throws {Error} If source format isn't recognized.\n     *\n     * @example\n     * ```\n     * const {BigQuery} = require('@google-cloud/bigquery');\n     * const bigquery = new BigQuery();\n     * const dataset = bigquery.dataset('my-dataset');\n     * const table = dataset.table('my-table');\n     *\n     * //-\n     * // Load data from a CSV file.\n     * //-\n     * const request = require('request');\n     *\n     * const csvUrl = 'http://goo.gl/kSE7z6';\n     *\n     * const metadata = {\n     *   allowJaggedRows: true,\n     *   skipLeadingRows: 1\n     * };\n     *\n     * request.get(csvUrl)\n     *   .pipe(table.createWriteStream(metadata))\n     *   .on('job', (job) => {\n     *     // `job` is a Job object that can be used to check the status of the\n     *     // request.\n     *   })\n     *   .on('complete', (job) => {\n     *     // The job has completed successfully.\n     *   });\n     *\n     * //-\n     * // Load data from a JSON file.\n     * //-\n     * const fs = require('fs');\n     *\n     * fs.createReadStream('./test/testdata/testfile.json')\n     *   .pipe(table.createWriteStream('json'))\n     *   .on('job', (job) => {\n     *     // `job` is a Job object that can be used to check the status of the\n     *     // request.\n     *   })\n     *   .on('complete', (job) => {\n     *     // The job has completed successfully.\n     *   });\n     * ```\n     */\n    createWriteStream(metadata) {\n        const stream = this.createWriteStream_(metadata);\n        stream.on('prefinish', () => {\n            stream.cork();\n        });\n        stream.on('job', (job) => {\n            job\n                .on('error', err => {\n                stream.destroy(err);\n            })\n                .on('complete', () => {\n                stream.emit('complete', job);\n                stream.uncork();\n            });\n        });\n        return stream;\n    }\n    extract(destination, optionsOrCallback, cb) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        const callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : cb;\n        this.createExtractJob(destination, options, (err, job, resp) => {\n            if (err) {\n                callback(err, resp);\n                return;\n            }\n            job.on('error', callback).on('complete', metadata => {\n                callback(null, metadata);\n            });\n        });\n    }\n    /**\n     * Retrieves table data from a specified set of rows. The rows are returned to\n     * your callback as an array of objects matching your table's schema.\n     *\n     * See {@link https://cloud.google.com/bigquery/docs/reference/v2/tabledata/list| Tabledata: list API Documentation}\n     *\n     * @param {object} [options] The configuration object.\n     * @param {boolean} [options.autoPaginate=true] Have pagination handled\n     *     automatically.\n     * @param {number} [options.maxApiCalls] Maximum number of API calls to make.\n     * @param {number} [options.maxResults] Maximum number of results to return.\n     * @param {boolean|IntegerTypeCastOptions} [options.wrapIntegers=false] Wrap values\n     *     of 'INT64' type in {@link BigQueryInt} objects.\n     *     If a `boolean`, this will wrap values in {@link BigQueryInt} objects.\n     *     If an `object`, this will return a value returned by\n     *     `wrapIntegers.integerTypeCastFunction`.\n     * @param {RowsCallback} [callback] The callback function. If `autoPaginate`\n     *     is set to false a {@link ManualQueryResultsCallback} should be used.\n     * @param {?error} callback.err An error returned while making this request\n     * @param {array} callback.rows The table data from specified set of rows.\n     * @returns {Promise<RowsResponse>}\n     *\n     * @example\n     * ```\n     * const {BigQuery} = require('@google-cloud/bigquery');\n     * const bigquery = new BigQuery();\n     * const dataset = bigquery.dataset('my-dataset');\n     * const table = dataset.table('my-table');\n     *\n     * table.getRows((err, rows) => {\n     *   if (!err) {\n     *     // rows is an array of results.\n     *   }\n     * });\n     *\n     * //-\n     * // To control how many API requests are made and page through the results\n     * // manually, set `autoPaginate` to `false`.\n     * //-\n     * function manualPaginationCallback(err, rows, nextQuery, apiResponse) {\n     *   if (nextQuery) {\n     *     // More results exist.\n     *     table.getRows(nextQuery, manualPaginationCallback);\n     *   }\n     * }\n     *\n     * table.getRows({\n     *   autoPaginate: false\n     * }, manualPaginationCallback);\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * table.getRows().then((data) => {\n     *   const rows = data[0];\n     *   });\n     * ```\n     */\n    getRows(optionsOrCallback, cb) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        const callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : cb;\n        const wrapIntegers = options.wrapIntegers ? options.wrapIntegers : false;\n        delete options.wrapIntegers;\n        const parseJSON = options.parseJSON ? options.parseJSON : false;\n        delete options.parseJSON;\n        const selectedFields = options.selectedFields\n            ? options.selectedFields.split(',')\n            : [];\n        const onComplete = (err, rows, nextQuery, resp) => {\n            if (err) {\n                callback(err, null, null, resp);\n                return;\n            }\n            rows = _1.BigQuery.mergeSchemaWithRows_(this.metadata.schema, rows || [], {\n                wrapIntegers,\n                selectedFields,\n                parseJSON,\n            });\n            callback(null, rows, nextQuery, resp);\n        };\n        const qs = extend({\n            'formatOptions.useInt64Timestamp': true,\n        }, options);\n        this.request({\n            uri: '/data',\n            qs,\n        }, (err, resp) => {\n            if (err) {\n                onComplete(err, null, null, resp);\n                return;\n            }\n            let nextQuery = null;\n            if (resp.pageToken) {\n                nextQuery = Object.assign({}, qs, {\n                    pageToken: resp.pageToken,\n                });\n            }\n            if (resp.rows && resp.rows.length > 0 && !this.metadata.schema) {\n                // We don't know the schema for this table yet. Do a quick stat.\n                this.getMetadata((err, metadata, apiResponse) => {\n                    if (err) {\n                        onComplete(err, null, null, apiResponse);\n                        return;\n                    }\n                    onComplete(null, resp.rows, nextQuery, resp);\n                });\n                return;\n            }\n            onComplete(null, resp.rows, nextQuery, resp);\n        });\n    }\n    insert(rows, optionsOrCallback, cb) {\n        const options = typeof optionsOrCallback === 'object'\n            ? optionsOrCallback\n            : {};\n        const callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : cb;\n        const promise = this._insertAndCreateTable(rows, options);\n        if (callback) {\n            promise.then(resp => callback(null, resp), err => callback(err, null));\n        }\n        else {\n            return promise.then(r => [r]);\n        }\n    }\n    /**\n     * Insert rows with retries, but will create the table if not exists.\n     *\n     * @param {RowMetadata | RowMetadata[]} rows\n     * @param {InsertRowsOptions} options\n     * @returns {Promise<bigquery.ITableDataInsertAllResponse | bigquery.ITable>}\n     * @private\n     */\n    async _insertAndCreateTable(rows, options) {\n        const { schema } = options;\n        const delay = 60000;\n        try {\n            return await this._insertWithRetry(rows, options);\n        }\n        catch (err) {\n            if (err.code !== 404 || !schema) {\n                throw err;\n            }\n        }\n        try {\n            await this.create({ schema });\n        }\n        catch (err) {\n            if (err.code !== 409) {\n                throw err;\n            }\n        }\n        // table creation after failed access is subject to failure caching and\n        // eventual consistency, see:\n        // https://github.com/googleapis/google-cloud-python/issues/4553#issuecomment-350110292\n        await new Promise(resolve => setTimeout(resolve, delay));\n        return this._insertAndCreateTable(rows, options);\n    }\n    /**\n     * This method will attempt to insert rows while retrying any partial failures\n     * that occur along the way. Because partial insert failures are returned\n     * differently, we can't depend on our usual retry strategy.\n     *\n     * @private\n     *\n     * @param {RowMetadata|RowMetadata[]} rows The rows to insert.\n     * @param {InsertRowsOptions} options Insert options.\n     * @returns {Promise<bigquery.ITableDataInsertAllResponse>}\n     */\n    async _insertWithRetry(rows, options) {\n        const { partialRetries = 3 } = options;\n        let error;\n        const maxAttempts = Math.max(partialRetries, 0) + 1;\n        for (let attempts = 0; attempts < maxAttempts; attempts++) {\n            try {\n                return await this._insert(rows, options);\n            }\n            catch (e) {\n                error = e;\n                rows = (e.errors || [])\n                    .filter(err => !!err.row)\n                    .map(err => err.row);\n                if (!rows.length) {\n                    break;\n                }\n            }\n        }\n        throw error;\n    }\n    /**\n     * This method does the bulk of the work for processing options and making the\n     * network request.\n     *\n     * @private\n     *\n     * @param {RowMetadata|RowMetadata[]} rows The rows to insert.\n     * @param {InsertRowsOptions} options Insert options.\n     * @returns {Promise<bigquery.ITableDataInsertAllResponse>}\n     */\n    async _insert(rows, options) {\n        rows = arrify(rows);\n        if (!rows.length) {\n            throw new Error('You must provide at least 1 row to be inserted.');\n        }\n        const json = extend(true, {}, options, { rows });\n        if (!options.raw) {\n            json.rows = rows.map((row) => {\n                const encoded = {\n                    json: Table.encodeValue_(row),\n                };\n                if (options.createInsertId !== false) {\n                    encoded.insertId = uuid.v4();\n                }\n                return encoded;\n            });\n        }\n        delete json.createInsertId;\n        delete json.partialRetries;\n        delete json.raw;\n        delete json.schema;\n        const [resp] = await this.request({\n            method: 'POST',\n            uri: '/insertAll',\n            json,\n        });\n        const partialFailures = (resp.insertErrors || []).map((insertError) => {\n            return {\n                errors: insertError.errors.map(error => {\n                    return {\n                        message: error.message,\n                        reason: error.reason,\n                    };\n                }),\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                row: rows[insertError.index],\n            };\n        });\n        if (partialFailures.length > 0) {\n            throw new common_1.util.PartialFailureError({\n                errors: partialFailures,\n                response: resp,\n            });\n        }\n        return resp;\n    }\n    createInsertStream(options) {\n        options = typeof options === 'object' ? options : {};\n        const dup = new stream_1.Duplex({ objectMode: true });\n        dup._write = (chunk, encoding, cb) => {\n            this.rowQueue.add(chunk, () => { });\n            cb();\n        };\n        this.rowQueue = new rowQueue_1.RowQueue(this, dup, options);\n        return dup;\n    }\n    load(source, metadataOrCallback, cb) {\n        const metadata = typeof metadataOrCallback === 'object' ? metadataOrCallback : {};\n        const callback = typeof metadataOrCallback === 'function' ? metadataOrCallback : cb;\n        this.createLoadJob(source, metadata, (err, job, resp) => {\n            if (err) {\n                callback(err, resp);\n                return;\n            }\n            job.on('error', callback).on('complete', metadata => {\n                callback(null, metadata);\n            });\n        });\n    }\n    query(query, callback) {\n        if (typeof query === 'string') {\n            query = {\n                query,\n            };\n        }\n        this.dataset.query(query, callback);\n    }\n    setMetadata(metadata, callback) {\n        const body = Table.formatMetadata_(metadata);\n        super.setMetadata(body, callback);\n    }\n    getIamPolicy(optionsOrCallback, cb) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        const callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : cb;\n        if (typeof options.requestedPolicyVersion === 'number' &&\n            options.requestedPolicyVersion !== 1) {\n            throw new Error('Only IAM policy version 1 is supported.');\n        }\n        const json = extend(true, {}, { options });\n        this.request({\n            method: 'POST',\n            uri: '/:getIamPolicy',\n            json,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null);\n                return;\n            }\n            callback(null, resp);\n        });\n    }\n    setIamPolicy(policy, optionsOrCallback, cb) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        const callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : cb;\n        if (policy.version && policy.version !== 1) {\n            throw new Error('Only IAM policy version 1 is supported.');\n        }\n        const json = extend(true, {}, options, { policy });\n        this.request({\n            method: 'POST',\n            uri: '/:setIamPolicy',\n            json,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null);\n                return;\n            }\n            callback(null, resp);\n        });\n    }\n    testIamPermissions(permissions, callback) {\n        permissions = arrify(permissions);\n        const json = extend(true, {}, { permissions });\n        this.request({\n            method: 'POST',\n            uri: '/:testIamPermissions',\n            json,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null);\n                return;\n            }\n            callback(null, resp);\n        });\n    }\n}\nexports.Table = Table;\n/*! Developer Documentation\n *\n * These methods can be auto-paginated.\n */\npaginator_1.paginator.extend(Table, ['getRows']);\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n(0, promisify_1.promisifyAll)(Table);\n//# sourceMappingURL=table.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/bigquery/build/src/table.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/bigquery/package.json":
/*!**********************************************************!*\
  !*** ./node_modules/@google-cloud/bigquery/package.json ***!
  \**********************************************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"name":"@google-cloud/bigquery","description":"Google BigQuery Client Library for Node.js","version":"7.9.4","license":"Apache-2.0","author":"Google LLC","engines":{"node":">=14.0.0"},"repository":"googleapis/nodejs-bigquery","main":"./build/src/index.js","types":"./build/src/index.d.ts","files":["build/src","!build/src/**/*.map"],"keywords":["google apis client","google api client","google apis","google api","google","google cloud platform","google cloud","cloud","google bigquery","bigquery"],"scripts":{"prebenchmark":"npm run compile","benchmark":"node build/benchmark/bench.js benchmark/queries.json","docs":"jsdoc -c .jsdoc.js","lint":"gts check","samples-test":"cd samples/ && npm link ../ && npm test && cd ../","test":"c8 mocha build/test","system-test":"mocha build/system-test --timeout 600000","presystem-test":"npm run compile","clean":"gts clean","compile":"tsc -p . && cp src/types.d.ts build/src/","fix":"gts fix","predocs":"npm run compile","prepare":"npm run compile","pretest":"npm run compile","docs-test":"linkinator docs","predocs-test":"npm run docs","types":"node scripts/gen-types.js","prelint":"cd samples; npm link ../; npm install","precompile":"gts clean"},"dependencies":{"@google-cloud/common":"^5.0.0","@google-cloud/paginator":"^5.0.2","@google-cloud/precise-date":"^4.0.0","@google-cloud/promisify":"4.0.0","arrify":"^2.0.1","big.js":"^6.0.0","duplexify":"^4.0.0","extend":"^3.0.2","is":"^3.3.0","stream-events":"^1.0.5","uuid":"^9.0.0"},"devDependencies":{"@google-cloud/storage":"^7.0.0","@types/big.js":"^6.2.0","@types/extend":"^3.0.1","@types/is":"0.0.25","@types/mocha":"^9.0.0","@types/node":"^20.0.0","@types/proxyquire":"^1.3.28","@types/sinon":"^10.0.0","@types/uuid":"^9.0.0","c8":"^9.0.0","codecov":"^3.5.0","discovery-tsd":"^0.3.0","eslint-plugin-prettier":"^5.0.0","gts":"^5.0.0","jsdoc":"^4.0.0","jsdoc-fresh":"^3.0.0","jsdoc-region-tag":"^3.0.0","linkinator":"^3.0.0","mocha":"^9.2.2","pack-n-play":"^2.0.0","prettier":"^3.0.0","proxyquire":"^2.1.0","sinon":"^18.0.0","nise":"6.0.0","path-to-regexp":"6.3.0","typescript":"^5.1.6"}}');

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/common/build/src/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@google-cloud/common/build/src/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2016 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.util = exports.ApiError = exports.ServiceObject = exports.Service = exports.Operation = void 0;\n/**\n * @type {module:common/operation}\n * @private\n */\nvar operation_1 = __webpack_require__(/*! ./operation */ \"(rsc)/./node_modules/@google-cloud/common/build/src/operation.js\");\nObject.defineProperty(exports, \"Operation\", ({ enumerable: true, get: function () { return operation_1.Operation; } }));\n/**\n * @type {module:common/service}\n * @private\n */\nvar service_1 = __webpack_require__(/*! ./service */ \"(rsc)/./node_modules/@google-cloud/common/build/src/service.js\");\nObject.defineProperty(exports, \"Service\", ({ enumerable: true, get: function () { return service_1.Service; } }));\n/**\n * @type {module:common/serviceObject}\n * @private\n */\nvar service_object_1 = __webpack_require__(/*! ./service-object */ \"(rsc)/./node_modules/@google-cloud/common/build/src/service-object.js\");\nObject.defineProperty(exports, \"ServiceObject\", ({ enumerable: true, get: function () { return service_object_1.ServiceObject; } }));\n/**\n * @type {module:common/util}\n * @private\n */\nvar util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/@google-cloud/common/build/src/util.js\");\nObject.defineProperty(exports, \"ApiError\", ({ enumerable: true, get: function () { return util_1.ApiError; } }));\nObject.defineProperty(exports, \"util\", ({ enumerable: true, get: function () { return util_1.util; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9jb21tb24vYnVpbGQvc3JjL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsWUFBWSxHQUFHLGdCQUFnQixHQUFHLHFCQUFxQixHQUFHLGVBQWUsR0FBRyxpQkFBaUI7QUFDN0Y7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLGtCQUFrQixtQkFBTyxDQUFDLHFGQUFhO0FBQ3ZDLDZDQUE0QyxFQUFFLHFDQUFxQyxpQ0FBaUMsRUFBQztBQUNySDtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsZ0JBQWdCLG1CQUFPLENBQUMsaUZBQVc7QUFDbkMsMkNBQTBDLEVBQUUscUNBQXFDLDZCQUE2QixFQUFDO0FBQy9HO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSx1QkFBdUIsbUJBQU8sQ0FBQywrRkFBa0I7QUFDakQsaURBQWdELEVBQUUscUNBQXFDLDBDQUEwQyxFQUFDO0FBQ2xJO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxhQUFhLG1CQUFPLENBQUMsMkVBQVE7QUFDN0IsNENBQTJDLEVBQUUscUNBQXFDLDJCQUEyQixFQUFDO0FBQzlHLHdDQUF1QyxFQUFFLHFDQUFxQyx1QkFBdUIsRUFBQztBQUN0RyIsInNvdXJjZXMiOlsiL1VzZXJzL2thaXNlaS9EZXNrdG9wL20tdHJhY2VyLWFpL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL2NvbW1vbi9idWlsZC9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgMjAxNiBHb29nbGUgTExDXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudXRpbCA9IGV4cG9ydHMuQXBpRXJyb3IgPSBleHBvcnRzLlNlcnZpY2VPYmplY3QgPSBleHBvcnRzLlNlcnZpY2UgPSBleHBvcnRzLk9wZXJhdGlvbiA9IHZvaWQgMDtcbi8qKlxuICogQHR5cGUge21vZHVsZTpjb21tb24vb3BlcmF0aW9ufVxuICogQHByaXZhdGVcbiAqL1xudmFyIG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiT3BlcmF0aW9uXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBvcGVyYXRpb25fMS5PcGVyYXRpb247IH0gfSk7XG4vKipcbiAqIEB0eXBlIHttb2R1bGU6Y29tbW9uL3NlcnZpY2V9XG4gKiBAcHJpdmF0ZVxuICovXG52YXIgc2VydmljZV8xID0gcmVxdWlyZShcIi4vc2VydmljZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlNlcnZpY2VcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNlcnZpY2VfMS5TZXJ2aWNlOyB9IH0pO1xuLyoqXG4gKiBAdHlwZSB7bW9kdWxlOmNvbW1vbi9zZXJ2aWNlT2JqZWN0fVxuICogQHByaXZhdGVcbiAqL1xudmFyIHNlcnZpY2Vfb2JqZWN0XzEgPSByZXF1aXJlKFwiLi9zZXJ2aWNlLW9iamVjdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlNlcnZpY2VPYmplY3RcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNlcnZpY2Vfb2JqZWN0XzEuU2VydmljZU9iamVjdDsgfSB9KTtcbi8qKlxuICogQHR5cGUge21vZHVsZTpjb21tb24vdXRpbH1cbiAqIEBwcml2YXRlXG4gKi9cbnZhciB1dGlsXzEgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQXBpRXJyb3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHV0aWxfMS5BcGlFcnJvcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInV0aWxcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHV0aWxfMS51dGlsOyB9IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/common/build/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/common/build/src/operation.js":
/*!******************************************************************!*\
  !*** ./node_modules/@google-cloud/common/build/src/operation.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2016 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Operation = void 0;\n/*!\n * @module common/operation\n */\nconst service_object_1 = __webpack_require__(/*! ./service-object */ \"(rsc)/./node_modules/@google-cloud/common/build/src/service-object.js\");\nconst util_1 = __webpack_require__(/*! util */ \"util\");\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nclass Operation extends service_object_1.ServiceObject {\n    /**\n     * An Operation object allows you to interact with APIs that take longer to\n     * process things.\n     *\n     * @constructor\n     * @alias module:common/operation\n     *\n     * @param {object} config - Configuration object.\n     * @param {module:common/service|module:common/serviceObject|module:common/grpcService|module:common/grpcServiceObject} config.parent - The parent object.\n     */\n    constructor(config) {\n        const methods = {\n            /**\n             * Checks to see if an operation exists.\n             */\n            exists: true,\n            /**\n             * Retrieves the operation.\n             */\n            get: true,\n            /**\n             * Retrieves metadata for the operation.\n             */\n            getMetadata: {\n                reqOpts: {\n                    name: config.id,\n                },\n            },\n        };\n        config = Object.assign({\n            baseUrl: '',\n        }, config);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        config.methods = (config.methods || methods);\n        super(config);\n        this.completeListeners = 0;\n        this.hasActiveListeners = false;\n        this.listenForEvents_();\n    }\n    /**\n     * Wraps the `complete` and `error` events in a Promise.\n     *\n     * @return {Promise}\n     */\n    promise() {\n        return new Promise((resolve, reject) => {\n            this.on('error', reject).on('complete', (metadata) => {\n                resolve([metadata]);\n            });\n        });\n    }\n    /**\n     * Begin listening for events on the operation. This method keeps track of how\n     * many \"complete\" listeners are registered and removed, making sure polling\n     * is handled automatically.\n     *\n     * As long as there is one active \"complete\" listener, the connection is open.\n     * When there are no more listeners, the polling stops.\n     *\n     * @private\n     */\n    listenForEvents_() {\n        this.on('newListener', (event) => {\n            if (event === 'complete') {\n                this.completeListeners++;\n                if (!this.hasActiveListeners) {\n                    this.hasActiveListeners = true;\n                    this.startPolling_();\n                }\n            }\n        });\n        this.on('removeListener', (event) => {\n            if (event === 'complete' && --this.completeListeners === 0) {\n                this.hasActiveListeners = false;\n            }\n        });\n    }\n    /**\n     * Poll for a status update. Returns null for an incomplete\n     * status, and metadata for a complete status.\n     *\n     * @private\n     */\n    poll_(callback) {\n        this.getMetadata((err, body) => {\n            if (err || body.error) {\n                callback(err || body.error);\n                return;\n            }\n            if (!body.done) {\n                callback(null);\n                return;\n            }\n            callback(null, body);\n        });\n    }\n    /**\n     * Poll `getMetadata` to check the operation's status. This runs a loop to\n     * ping the API on an interval.\n     *\n     * Note: This method is automatically called once a \"complete\" event handler\n     * is registered on the operation.\n     *\n     * @private\n     */\n    async startPolling_() {\n        if (!this.hasActiveListeners) {\n            return;\n        }\n        try {\n            const metadata = await (0, util_1.promisify)(this.poll_.bind(this))();\n            if (!metadata) {\n                setTimeout(this.startPolling_.bind(this), this.pollIntervalMs || 500);\n                return;\n            }\n            this.emit('complete', metadata);\n        }\n        catch (err) {\n            this.emit('error', err);\n        }\n    }\n}\nexports.Operation = Operation;\n//# sourceMappingURL=operation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/common/build/src/operation.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/common/build/src/service-object.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@google-cloud/common/build/src/service-object.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2015 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ServiceObject = void 0;\n/*!\n * @module common/service-object\n */\nconst promisify_1 = __webpack_require__(/*! @google-cloud/promisify */ \"(rsc)/./node_modules/@google-cloud/promisify/build/src/index.js\");\nconst arrify = __webpack_require__(/*! arrify */ \"(rsc)/./node_modules/arrify/index.js\");\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst extend = __webpack_require__(/*! extend */ \"(rsc)/./node_modules/extend/index.js\");\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/@google-cloud/common/build/src/util.js\");\n/**\n * ServiceObject is a base class, meant to be inherited from by a \"service\n * object,\" like a BigQuery dataset or Storage bucket.\n *\n * Most of the time, these objects share common functionality; they can be\n * created or deleted, and you can get or set their metadata.\n *\n * By inheriting from this class, a service object will be extended with these\n * shared behaviors. Note that any method can be overridden when the service\n * object requires specific behavior.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nclass ServiceObject extends events_1.EventEmitter {\n    /*\n     * @constructor\n     * @alias module:common/service-object\n     *\n     * @private\n     *\n     * @param {object} config - Configuration object.\n     * @param {string} config.baseUrl - The base URL to make API requests to.\n     * @param {string} config.createMethod - The method which creates this object.\n     * @param {string=} config.id - The identifier of the object. For example, the\n     *     name of a Storage bucket or Pub/Sub topic.\n     * @param {object=} config.methods - A map of each method name that should be inherited.\n     * @param {object} config.methods[].reqOpts - Default request options for this\n     *     particular method. A common use case is when `setMetadata` requires a\n     *     `PUT` method to override the default `PATCH`.\n     * @param {object} config.parent - The parent service instance. For example, an\n     *     instance of Storage if the object is Bucket.\n     */\n    constructor(config) {\n        super();\n        this.metadata = {};\n        this.baseUrl = config.baseUrl;\n        this.parent = config.parent; // Parent class.\n        this.id = config.id; // Name or ID (e.g. dataset ID, bucket name, etc).\n        this.createMethod = config.createMethod;\n        this.methods = config.methods || {};\n        this.interceptors = [];\n        this.pollIntervalMs = config.pollIntervalMs;\n        this.projectId = config.projectId;\n        if (config.methods) {\n            // This filters the ServiceObject instance (e.g. a \"File\") to only have\n            // the configured methods. We make a couple of exceptions for core-\n            // functionality (\"request()\" and \"getRequestInterceptors()\")\n            Object.getOwnPropertyNames(ServiceObject.prototype)\n                .filter(methodName => {\n                return (\n                // All ServiceObjects need `request` and `getRequestInterceptors`.\n                // clang-format off\n                !/^request/.test(methodName) &&\n                    !/^getRequestInterceptors/.test(methodName) &&\n                    // clang-format on\n                    // The ServiceObject didn't redefine the method.\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    this[methodName] ===\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        ServiceObject.prototype[methodName] &&\n                    // This method isn't wanted.\n                    !config.methods[methodName]);\n            })\n                .forEach(methodName => {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                this[methodName] = undefined;\n            });\n        }\n    }\n    create(optionsOrCallback, callback) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const self = this;\n        const args = [this.id];\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        if (typeof optionsOrCallback === 'object') {\n            args.push(optionsOrCallback);\n        }\n        // Wrap the callback to return *this* instance of the object, not the\n        // newly-created one.\n        // tslint: disable-next-line no-any\n        function onCreate(...args) {\n            const [err, instance] = args;\n            if (!err) {\n                self.metadata = instance.metadata;\n                args[1] = self; // replace the created `instance` with this one.\n            }\n            callback(...args);\n        }\n        args.push(onCreate);\n        // eslint-disable-next-line prefer-spread\n        this.createMethod.apply(null, args);\n    }\n    delete(optionsOrCallback, cb) {\n        const [options, callback] = util_1.util.maybeOptionsOrCallback(optionsOrCallback, cb);\n        const ignoreNotFound = options.ignoreNotFound;\n        delete options.ignoreNotFound;\n        const methodConfig = (typeof this.methods.delete === 'object' && this.methods.delete) || {};\n        const reqOpts = extend(true, {\n            method: 'DELETE',\n            uri: '',\n        }, methodConfig.reqOpts, {\n            qs: options,\n        });\n        // The `request` method may have been overridden to hold any special\n        // behavior. Ensure we call the original `request` method.\n        ServiceObject.prototype.request.call(this, reqOpts, (err, ...args) => {\n            if (err) {\n                if (err.code === 404 && ignoreNotFound) {\n                    err = null;\n                }\n            }\n            callback(err, ...args);\n        });\n    }\n    exists(optionsOrCallback, cb) {\n        const [options, callback] = util_1.util.maybeOptionsOrCallback(optionsOrCallback, cb);\n        this.get(options, err => {\n            if (err) {\n                if (err.code === 404) {\n                    callback(null, false);\n                }\n                else {\n                    callback(err);\n                }\n                return;\n            }\n            callback(null, true);\n        });\n    }\n    get(optionsOrCallback, cb) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const self = this;\n        const [opts, callback] = util_1.util.maybeOptionsOrCallback(optionsOrCallback, cb);\n        const options = Object.assign({}, opts);\n        const autoCreate = options.autoCreate && typeof this.create === 'function';\n        delete options.autoCreate;\n        function onCreate(err, instance, apiResponse) {\n            if (err) {\n                if (err.code === 409) {\n                    self.get(options, callback);\n                    return;\n                }\n                callback(err, null, apiResponse);\n                return;\n            }\n            callback(null, instance, apiResponse);\n        }\n        this.getMetadata(options, (err, metadata) => {\n            if (err) {\n                if (err.code === 404 && autoCreate) {\n                    const args = [];\n                    if (Object.keys(options).length > 0) {\n                        args.push(options);\n                    }\n                    args.push(onCreate);\n                    self.create(...args);\n                    return;\n                }\n                callback(err, null, metadata);\n                return;\n            }\n            callback(null, self, metadata);\n        });\n    }\n    getMetadata(optionsOrCallback, cb) {\n        const [options, callback] = util_1.util.maybeOptionsOrCallback(optionsOrCallback, cb);\n        const methodConfig = (typeof this.methods.getMetadata === 'object' &&\n            this.methods.getMetadata) ||\n            {};\n        const reqOpts = extend(true, {\n            uri: '',\n        }, methodConfig.reqOpts, {\n            qs: options,\n        });\n        // The `request` method may have been overridden to hold any special\n        // behavior. Ensure we call the original `request` method.\n        ServiceObject.prototype.request.call(this, reqOpts, (err, body, res) => {\n            this.metadata = body;\n            callback(err, this.metadata, res);\n        });\n    }\n    /**\n     * Return the user's custom request interceptors.\n     */\n    getRequestInterceptors() {\n        // Interceptors should be returned in the order they were assigned.\n        const localInterceptors = this.interceptors\n            .filter(interceptor => typeof interceptor.request === 'function')\n            .map(interceptor => interceptor.request);\n        return this.parent.getRequestInterceptors().concat(localInterceptors);\n    }\n    setMetadata(metadata, optionsOrCallback, cb) {\n        const [options, callback] = util_1.util.maybeOptionsOrCallback(optionsOrCallback, cb);\n        const methodConfig = (typeof this.methods.setMetadata === 'object' &&\n            this.methods.setMetadata) ||\n            {};\n        const reqOpts = extend(true, {}, {\n            method: 'PATCH',\n            uri: '',\n        }, methodConfig.reqOpts, {\n            json: metadata,\n            qs: options,\n        });\n        // The `request` method may have been overridden to hold any special\n        // behavior. Ensure we call the original `request` method.\n        ServiceObject.prototype.request.call(this, reqOpts, (err, body, res) => {\n            this.metadata = body;\n            callback(err, this.metadata, res);\n        });\n    }\n    request_(reqOpts, callback) {\n        reqOpts = extend(true, {}, reqOpts);\n        if (this.projectId) {\n            reqOpts.projectId = this.projectId;\n        }\n        const isAbsoluteUrl = reqOpts.uri.indexOf('http') === 0;\n        const uriComponents = [this.baseUrl, this.id || '', reqOpts.uri];\n        if (isAbsoluteUrl) {\n            uriComponents.splice(0, uriComponents.indexOf(reqOpts.uri));\n        }\n        reqOpts.uri = uriComponents\n            .filter(x => x.trim()) // Limit to non-empty strings.\n            .map(uriComponent => {\n            const trimSlashesRegex = /^\\/*|\\/*$/g;\n            return uriComponent.replace(trimSlashesRegex, '');\n        })\n            .join('/');\n        const childInterceptors = arrify(reqOpts.interceptors_);\n        const localInterceptors = [].slice.call(this.interceptors);\n        reqOpts.interceptors_ = childInterceptors.concat(localInterceptors);\n        if (reqOpts.shouldReturnStream) {\n            return this.parent.requestStream(reqOpts);\n        }\n        this.parent.request(reqOpts, callback);\n    }\n    request(reqOpts, callback) {\n        this.request_(reqOpts, callback);\n    }\n    /**\n     * Make an authenticated API request.\n     *\n     * @param {object} reqOpts - Request options that are passed to `request`.\n     * @param {string} reqOpts.uri - A URI relative to the baseUrl.\n     */\n    requestStream(reqOpts) {\n        const opts = extend(true, reqOpts, { shouldReturnStream: true });\n        return this.request_(opts);\n    }\n}\nexports.ServiceObject = ServiceObject;\n(0, promisify_1.promisifyAll)(ServiceObject, { exclude: ['getRequestInterceptors'] });\n//# sourceMappingURL=service-object.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/common/build/src/service-object.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/common/build/src/service.js":
/*!****************************************************************!*\
  !*** ./node_modules/@google-cloud/common/build/src/service.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2015 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Service = exports.DEFAULT_PROJECT_ID_TOKEN = void 0;\n/*!\n * @module common/service\n */\nconst arrify = __webpack_require__(/*! arrify */ \"(rsc)/./node_modules/arrify/index.js\");\nconst extend = __webpack_require__(/*! extend */ \"(rsc)/./node_modules/extend/index.js\");\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/@google-cloud/common/build/src/util.js\");\nexports.DEFAULT_PROJECT_ID_TOKEN = '{{projectId}}';\nclass Service {\n    /**\n     * Service is a base class, meant to be inherited from by a \"service,\" like\n     * BigQuery or Storage.\n     *\n     * This handles making authenticated requests by exposing a `makeReq_`\n     * function.\n     *\n     * @constructor\n     * @alias module:common/service\n     *\n     * @param {object} config - Configuration object.\n     * @param {string} config.baseUrl - The base URL to make API requests to.\n     * @param {string[]} config.scopes - The scopes required for the request.\n     * @param {object=} options - [Configuration object](#/docs).\n     */\n    constructor(config, options = {}) {\n        this.baseUrl = config.baseUrl;\n        this.apiEndpoint = config.apiEndpoint;\n        this.timeout = options.timeout;\n        this.globalInterceptors = arrify(options.interceptors_);\n        this.interceptors = [];\n        this.packageJson = config.packageJson;\n        this.projectId = options.projectId || exports.DEFAULT_PROJECT_ID_TOKEN;\n        this.projectIdRequired = config.projectIdRequired !== false;\n        this.providedUserAgent = options.userAgent;\n        const reqCfg = extend({}, config, {\n            projectIdRequired: this.projectIdRequired,\n            projectId: this.projectId,\n            authClient: options.authClient,\n            credentials: options.credentials,\n            keyFile: options.keyFilename,\n            email: options.email,\n            token: options.token,\n        });\n        this.makeAuthenticatedRequest =\n            util_1.util.makeAuthenticatedRequestFactory(reqCfg);\n        this.authClient = this.makeAuthenticatedRequest.authClient;\n        this.getCredentials = this.makeAuthenticatedRequest.getCredentials;\n        const isCloudFunctionEnv = !!process.env.FUNCTION_NAME;\n        if (isCloudFunctionEnv) {\n            this.interceptors.push({\n                request(reqOpts) {\n                    reqOpts.forever = false;\n                    return reqOpts;\n                },\n            });\n        }\n    }\n    /**\n     * Return the user's custom request interceptors.\n     */\n    getRequestInterceptors() {\n        // Interceptors should be returned in the order they were assigned.\n        return [].slice\n            .call(this.globalInterceptors)\n            .concat(this.interceptors)\n            .filter(interceptor => typeof interceptor.request === 'function')\n            .map(interceptor => interceptor.request);\n    }\n    getProjectId(callback) {\n        if (!callback) {\n            return this.getProjectIdAsync();\n        }\n        this.getProjectIdAsync().then(p => callback(null, p), callback);\n    }\n    async getProjectIdAsync() {\n        const projectId = await this.authClient.getProjectId();\n        if (this.projectId === exports.DEFAULT_PROJECT_ID_TOKEN && projectId) {\n            this.projectId = projectId;\n        }\n        return this.projectId;\n    }\n    request_(reqOpts, callback) {\n        reqOpts = extend(true, {}, reqOpts, { timeout: this.timeout });\n        const isAbsoluteUrl = reqOpts.uri.indexOf('http') === 0;\n        const uriComponents = [this.baseUrl];\n        if (this.projectIdRequired) {\n            if (reqOpts.projectId) {\n                uriComponents.push('projects');\n                uriComponents.push(reqOpts.projectId);\n            }\n            else {\n                uriComponents.push('projects');\n                uriComponents.push(this.projectId);\n            }\n        }\n        uriComponents.push(reqOpts.uri);\n        if (isAbsoluteUrl) {\n            uriComponents.splice(0, uriComponents.indexOf(reqOpts.uri));\n        }\n        reqOpts.uri = uriComponents\n            .map(uriComponent => {\n            const trimSlashesRegex = /^\\/*|\\/*$/g;\n            return uriComponent.replace(trimSlashesRegex, '');\n        })\n            .join('/')\n            // Some URIs have colon separators.\n            // Bad: https://.../projects/:list\n            // Good: https://.../projects:list\n            .replace(/\\/:/g, ':');\n        const requestInterceptors = this.getRequestInterceptors();\n        arrify(reqOpts.interceptors_).forEach(interceptor => {\n            if (typeof interceptor.request === 'function') {\n                requestInterceptors.push(interceptor.request);\n            }\n        });\n        requestInterceptors.forEach(requestInterceptor => {\n            reqOpts = requestInterceptor(reqOpts);\n        });\n        delete reqOpts.interceptors_;\n        const pkg = this.packageJson;\n        let userAgent = util_1.util.getUserAgentFromPackageJson(pkg);\n        if (this.providedUserAgent) {\n            userAgent = `${this.providedUserAgent} ${userAgent}`;\n        }\n        reqOpts.headers = extend({}, reqOpts.headers, {\n            'User-Agent': userAgent,\n            'x-goog-api-client': `gl-node/${process.versions.node} gccl/${pkg.version}`,\n        });\n        if (reqOpts.shouldReturnStream) {\n            return this.makeAuthenticatedRequest(reqOpts);\n        }\n        else {\n            this.makeAuthenticatedRequest(reqOpts, callback);\n        }\n    }\n    /**\n     * Make an authenticated API request.\n     *\n     * @param {object} reqOpts - Request options that are passed to `request`.\n     * @param {string} reqOpts.uri - A URI relative to the baseUrl.\n     * @param {function} callback - The callback function passed to `request`.\n     */\n    request(reqOpts, callback) {\n        Service.prototype.request_.call(this, reqOpts, callback);\n    }\n    /**\n     * Make an authenticated API request.\n     *\n     * @param {object} reqOpts - Request options that are passed to `request`.\n     * @param {string} reqOpts.uri - A URI relative to the baseUrl.\n     */\n    requestStream(reqOpts) {\n        const opts = extend(true, reqOpts, { shouldReturnStream: true });\n        return Service.prototype.request_.call(this, opts);\n    }\n}\nexports.Service = Service;\n//# sourceMappingURL=service.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/common/build/src/service.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/common/build/src/util.js":
/*!*************************************************************!*\
  !*** ./node_modules/@google-cloud/common/build/src/util.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2014 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.util = exports.Util = exports.PartialFailureError = exports.ApiError = void 0;\n/*!\n * @module common/util\n */\nconst projectify_1 = __webpack_require__(/*! @google-cloud/projectify */ \"(rsc)/./node_modules/@google-cloud/projectify/build/src/index.js\");\nconst htmlEntities = __webpack_require__(/*! html-entities */ \"(rsc)/./node_modules/html-entities/dist/commonjs/index.js\");\nconst extend = __webpack_require__(/*! extend */ \"(rsc)/./node_modules/extend/index.js\");\nconst google_auth_library_1 = __webpack_require__(/*! google-auth-library */ \"(rsc)/./node_modules/google-auth-library/build/src/index.js\");\nconst retryRequest = __webpack_require__(/*! retry-request */ \"(rsc)/./node_modules/retry-request/index.js\");\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst teeny_request_1 = __webpack_require__(/*! teeny-request */ \"(rsc)/./node_modules/teeny-request/build/src/index.js\");\nconst service_1 = __webpack_require__(/*! ./service */ \"(rsc)/./node_modules/@google-cloud/common/build/src/service.js\");\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst duplexify = __webpack_require__(/*! duplexify */ \"(rsc)/./node_modules/duplexify/index.js\");\nconst requestDefaults = {\n    timeout: 60000,\n    gzip: true,\n    forever: true,\n    pool: {\n        maxSockets: Infinity,\n    },\n};\n/**\n * Default behavior: Automatically retry retriable server errors.\n *\n * @const {boolean}\n * @private\n */\nconst AUTO_RETRY_DEFAULT = true;\n/**\n * Default behavior: Only attempt to retry retriable errors 3 times.\n *\n * @const {number}\n * @private\n */\nconst MAX_RETRY_DEFAULT = 3;\n/**\n * Custom error type for API errors.\n *\n * @param {object} errorBody - Error object.\n */\nclass ApiError extends Error {\n    constructor(errorBodyOrMessage) {\n        super();\n        if (typeof errorBodyOrMessage !== 'object') {\n            this.message = errorBodyOrMessage || '';\n            return;\n        }\n        const errorBody = errorBodyOrMessage;\n        this.code = errorBody.code;\n        this.errors = errorBody.errors;\n        this.response = errorBody.response;\n        try {\n            this.errors = JSON.parse(this.response.body).error.errors;\n        }\n        catch (e) {\n            this.errors = errorBody.errors;\n        }\n        this.message = ApiError.createMultiErrorMessage(errorBody, this.errors);\n        Error.captureStackTrace(this);\n    }\n    /**\n     * Pieces together an error message by combining all unique error messages\n     * returned from a single GoogleError\n     *\n     * @private\n     *\n     * @param {GoogleErrorBody} err The original error.\n     * @param {GoogleInnerError[]} [errors] Inner errors, if any.\n     * @returns {string}\n     */\n    static createMultiErrorMessage(err, errors) {\n        const messages = new Set();\n        if (err.message) {\n            messages.add(err.message);\n        }\n        if (errors && errors.length) {\n            errors.forEach(({ message }) => messages.add(message));\n        }\n        else if (err.response && err.response.body) {\n            messages.add(htmlEntities.decode(err.response.body.toString()));\n        }\n        else if (!err.message) {\n            messages.add('A failure occurred during this request.');\n        }\n        let messageArr = Array.from(messages);\n        if (messageArr.length > 1) {\n            messageArr = messageArr.map((message, i) => `    ${i + 1}. ${message}`);\n            messageArr.unshift('Multiple errors occurred during the request. Please see the `errors` array for complete details.\\n');\n            messageArr.push('\\n');\n        }\n        return messageArr.join('\\n');\n    }\n}\nexports.ApiError = ApiError;\n/**\n * Custom error type for partial errors returned from the API.\n *\n * @param {object} b - Error object.\n */\nclass PartialFailureError extends Error {\n    constructor(b) {\n        super();\n        const errorObject = b;\n        this.errors = errorObject.errors;\n        this.name = 'PartialFailureError';\n        this.response = errorObject.response;\n        this.message = ApiError.createMultiErrorMessage(errorObject, this.errors);\n    }\n}\nexports.PartialFailureError = PartialFailureError;\nclass Util {\n    constructor() {\n        this.ApiError = ApiError;\n        this.PartialFailureError = PartialFailureError;\n    }\n    /**\n     * No op.\n     *\n     * @example\n     * function doSomething(callback) {\n     *   callback = callback || noop;\n     * }\n     */\n    noop() { }\n    /**\n     * Uniformly process an API response.\n     *\n     * @param {*} err - Error value.\n     * @param {*} resp - Response value.\n     * @param {*} body - Body value.\n     * @param {function} callback - The callback function.\n     */\n    handleResp(err, resp, body, callback) {\n        callback = callback || util.noop;\n        const parsedResp = extend(true, { err: err || null }, resp && util.parseHttpRespMessage(resp), body && util.parseHttpRespBody(body));\n        // Assign the parsed body to resp.body, even if { json: false } was passed\n        // as a request option.\n        // We assume that nobody uses the previously unparsed value of resp.body.\n        if (!parsedResp.err && resp && typeof parsedResp.body === 'object') {\n            parsedResp.resp.body = parsedResp.body;\n        }\n        if (parsedResp.err && resp) {\n            parsedResp.err.response = resp;\n        }\n        callback(parsedResp.err, parsedResp.body, parsedResp.resp);\n    }\n    /**\n     * Sniff an incoming HTTP response message for errors.\n     *\n     * @param {object} httpRespMessage - An incoming HTTP response message from `request`.\n     * @return {object} parsedHttpRespMessage - The parsed response.\n     * @param {?error} parsedHttpRespMessage.err - An error detected.\n     * @param {object} parsedHttpRespMessage.resp - The original response object.\n     */\n    parseHttpRespMessage(httpRespMessage) {\n        const parsedHttpRespMessage = {\n            resp: httpRespMessage,\n        };\n        if (httpRespMessage.statusCode < 200 || httpRespMessage.statusCode > 299) {\n            // Unknown error. Format according to ApiError standard.\n            parsedHttpRespMessage.err = new ApiError({\n                errors: new Array(),\n                code: httpRespMessage.statusCode,\n                message: httpRespMessage.statusMessage,\n                response: httpRespMessage,\n            });\n        }\n        return parsedHttpRespMessage;\n    }\n    /**\n     * Parse the response body from an HTTP request.\n     *\n     * @param {object} body - The response body.\n     * @return {object} parsedHttpRespMessage - The parsed response.\n     * @param {?error} parsedHttpRespMessage.err - An error detected.\n     * @param {object} parsedHttpRespMessage.body - The original body value provided\n     *     will try to be JSON.parse'd. If it's successful, the parsed value will\n     * be returned here, otherwise the original value and an error will be returned.\n     */\n    parseHttpRespBody(body) {\n        const parsedHttpRespBody = {\n            body,\n        };\n        if (typeof body === 'string') {\n            try {\n                parsedHttpRespBody.body = JSON.parse(body);\n            }\n            catch (err) {\n                parsedHttpRespBody.body = body;\n            }\n        }\n        if (parsedHttpRespBody.body && parsedHttpRespBody.body.error) {\n            // Error from JSON API.\n            parsedHttpRespBody.err = new ApiError(parsedHttpRespBody.body.error);\n        }\n        return parsedHttpRespBody;\n    }\n    /**\n     * Take a Duplexify stream, fetch an authenticated connection header, and\n     * create an outgoing writable stream.\n     *\n     * @param {Duplexify} dup - Duplexify stream.\n     * @param {object} options - Configuration object.\n     * @param {module:common/connection} options.connection - A connection instance used to get a token with and send the request through.\n     * @param {object} options.metadata - Metadata to send at the head of the request.\n     * @param {object} options.request - Request object, in the format of a standard Node.js http.request() object.\n     * @param {string=} options.request.method - Default: \"POST\".\n     * @param {string=} options.request.qs.uploadType - Default: \"multipart\".\n     * @param {string=} options.streamContentType - Default: \"application/octet-stream\".\n     * @param {function} onComplete - Callback, executed after the writable Request stream has completed.\n     */\n    makeWritableStream(dup, options, onComplete) {\n        onComplete = onComplete || util.noop;\n        const writeStream = new ProgressStream();\n        writeStream.on('progress', evt => dup.emit('progress', evt));\n        dup.setWritable(writeStream);\n        const defaultReqOpts = {\n            method: 'POST',\n            qs: {\n                uploadType: 'multipart',\n            },\n            timeout: 0,\n            maxRetries: 0,\n        };\n        const metadata = options.metadata || {};\n        const reqOpts = extend(true, defaultReqOpts, options.request, {\n            multipart: [\n                {\n                    'Content-Type': 'application/json',\n                    body: JSON.stringify(metadata),\n                },\n                {\n                    'Content-Type': metadata.contentType || 'application/octet-stream',\n                    body: writeStream,\n                },\n            ],\n        });\n        options.makeAuthenticatedRequest(reqOpts, {\n            onAuthenticated(err, authenticatedReqOpts) {\n                if (err) {\n                    dup.destroy(err);\n                    return;\n                }\n                const request = teeny_request_1.teenyRequest.defaults(requestDefaults);\n                request(authenticatedReqOpts, (err, resp, body) => {\n                    util.handleResp(err, resp, body, (err, data) => {\n                        if (err) {\n                            dup.destroy(err);\n                            return;\n                        }\n                        dup.emit('response', resp);\n                        onComplete(data);\n                    });\n                });\n            },\n        });\n    }\n    /**\n     * Returns true if the API request should be retried, given the error that was\n     * given the first time the request was attempted. This is used for rate limit\n     * related errors as well as intermittent server errors.\n     *\n     * @param {error} err - The API error to check if it is appropriate to retry.\n     * @return {boolean} True if the API request should be retried, false otherwise.\n     */\n    shouldRetryRequest(err) {\n        if (err) {\n            if ([408, 429, 500, 502, 503, 504].indexOf(err.code) !== -1) {\n                return true;\n            }\n            if (err.errors) {\n                for (const e of err.errors) {\n                    const reason = e.reason;\n                    if (reason === 'rateLimitExceeded') {\n                        return true;\n                    }\n                    if (reason === 'userRateLimitExceeded') {\n                        return true;\n                    }\n                    if (reason && reason.includes('EAI_AGAIN')) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n    /**\n     * Get a function for making authenticated requests.\n     *\n     * @param {object} config - Configuration object.\n     * @param {boolean=} config.autoRetry - Automatically retry requests if the\n     *     response is related to rate limits or certain intermittent server\n     * errors. We will exponentially backoff subsequent requests by default.\n     * (default: true)\n     * @param {object=} config.credentials - Credentials object.\n     * @param {boolean=} config.customEndpoint - If true, just return the provided request options. Default: false.\n     * @param {boolean=} config.useAuthWithCustomEndpoint - If true, will authenticate when using a custom endpoint. Default: false.\n     * @param {string=} config.email - Account email address, required for PEM/P12 usage.\n     * @param {number=} config.maxRetries - Maximum number of automatic retries attempted before returning the error. (default: 3)\n     * @param {string=} config.keyFile - Path to a .json, .pem, or .p12 keyfile.\n     * @param {array} config.scopes - Array of scopes required for the API.\n     */\n    makeAuthenticatedRequestFactory(config) {\n        const googleAutoAuthConfig = extend({}, config);\n        if (googleAutoAuthConfig.projectId === service_1.DEFAULT_PROJECT_ID_TOKEN) {\n            delete googleAutoAuthConfig.projectId;\n        }\n        let authClient;\n        if (googleAutoAuthConfig.authClient instanceof google_auth_library_1.GoogleAuth) {\n            // Use an existing `GoogleAuth`\n            authClient = googleAutoAuthConfig.authClient;\n        }\n        else {\n            // Pass an `AuthClient` to `GoogleAuth`, if available\n            const config = {\n                ...googleAutoAuthConfig,\n                authClient: googleAutoAuthConfig.authClient,\n            };\n            authClient = new google_auth_library_1.GoogleAuth(config);\n        }\n        function makeAuthenticatedRequest(reqOpts, optionsOrCallback) {\n            let stream;\n            let projectId;\n            const reqConfig = extend({}, config);\n            let activeRequest_;\n            if (!optionsOrCallback) {\n                stream = duplexify();\n                reqConfig.stream = stream;\n            }\n            const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : undefined;\n            const callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : undefined;\n            async function setProjectId() {\n                projectId = await authClient.getProjectId();\n            }\n            const onAuthenticated = async (err, authenticatedReqOpts) => {\n                const authLibraryError = err;\n                const autoAuthFailed = err &&\n                    err.message.indexOf('Could not load the default credentials') > -1;\n                if (autoAuthFailed) {\n                    // Even though authentication failed, the API might not actually\n                    // care.\n                    authenticatedReqOpts = reqOpts;\n                }\n                if (!err || autoAuthFailed) {\n                    try {\n                        // Try with existing `projectId` value\n                        authenticatedReqOpts = util.decorateRequest(authenticatedReqOpts, projectId);\n                        err = null;\n                    }\n                    catch (e) {\n                        if (e instanceof projectify_1.MissingProjectIdError) {\n                            // A `projectId` was required, but we don't have one.\n                            try {\n                                // Attempt to get the `projectId`\n                                await setProjectId();\n                                authenticatedReqOpts = util.decorateRequest(authenticatedReqOpts, projectId);\n                                err = null;\n                            }\n                            catch (e) {\n                                // Re-use the \"Could not load the default credentials error\" if\n                                // auto auth failed.\n                                err = err || e;\n                            }\n                        }\n                        else {\n                            // Some other error unrelated to missing `projectId`\n                            err = err || e;\n                        }\n                    }\n                }\n                if (err) {\n                    if (stream) {\n                        stream.destroy(err);\n                    }\n                    else {\n                        const fn = options && options.onAuthenticated\n                            ? options.onAuthenticated\n                            : callback;\n                        fn(err);\n                    }\n                    return;\n                }\n                if (options && options.onAuthenticated) {\n                    options.onAuthenticated(null, authenticatedReqOpts);\n                }\n                else {\n                    activeRequest_ = util.makeRequest(authenticatedReqOpts, reqConfig, (apiResponseError, ...params) => {\n                        if (apiResponseError &&\n                            apiResponseError.code === 401 &&\n                            authLibraryError) {\n                            // Re-use the \"Could not load the default credentials error\" if\n                            // the API request failed due to missing credentials.\n                            apiResponseError = authLibraryError;\n                        }\n                        callback(apiResponseError, ...params);\n                    });\n                }\n            };\n            const prepareRequest = async () => {\n                try {\n                    const getProjectId = async () => {\n                        if (config.projectId &&\n                            config.projectId !== service_1.DEFAULT_PROJECT_ID_TOKEN) {\n                            // The user provided a project ID. We don't need to check with the\n                            // auth client, it could be incorrect.\n                            return config.projectId;\n                        }\n                        if (config.projectIdRequired === false) {\n                            // A projectId is not required. Return the default.\n                            return service_1.DEFAULT_PROJECT_ID_TOKEN;\n                        }\n                        return setProjectId();\n                    };\n                    const authorizeRequest = async () => {\n                        if (reqConfig.customEndpoint &&\n                            !reqConfig.useAuthWithCustomEndpoint) {\n                            // Using a custom API override. Do not use `google-auth-library` for\n                            // authentication. (ex: connecting to a local Datastore server)\n                            return reqOpts;\n                        }\n                        else {\n                            return authClient.authorizeRequest(reqOpts);\n                        }\n                    };\n                    const [_projectId, authorizedReqOpts] = await Promise.all([\n                        getProjectId(),\n                        authorizeRequest(),\n                    ]);\n                    if (_projectId) {\n                        projectId = _projectId;\n                    }\n                    return onAuthenticated(null, authorizedReqOpts);\n                }\n                catch (e) {\n                    return onAuthenticated(e);\n                }\n            };\n            prepareRequest();\n            if (stream) {\n                return stream;\n            }\n            return {\n                abort() {\n                    setImmediate(() => {\n                        if (activeRequest_) {\n                            activeRequest_.abort();\n                            activeRequest_ = null;\n                        }\n                    });\n                },\n            };\n        }\n        const mar = makeAuthenticatedRequest;\n        mar.getCredentials = authClient.getCredentials.bind(authClient);\n        mar.authClient = authClient;\n        return mar;\n    }\n    /**\n     * Make a request through the `retryRequest` module with built-in error\n     * handling and exponential back off.\n     *\n     * @param {object} reqOpts - Request options in the format `request` expects.\n     * @param {object=} config - Configuration object.\n     * @param {boolean=} config.autoRetry - Automatically retry requests if the\n     *     response is related to rate limits or certain intermittent server\n     * errors. We will exponentially backoff subsequent requests by default.\n     * (default: true)\n     * @param {number=} config.maxRetries - Maximum number of automatic retries\n     *     attempted before returning the error. (default: 3)\n     * @param {object=} config.request - HTTP module for request calls.\n     * @param {function} callback - The callback function.\n     */\n    makeRequest(reqOpts, config, callback) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        let autoRetryValue = AUTO_RETRY_DEFAULT;\n        if (config.autoRetry !== undefined &&\n            ((_a = config.retryOptions) === null || _a === void 0 ? void 0 : _a.autoRetry) !== undefined) {\n            throw new ApiError('autoRetry is deprecated. Use retryOptions.autoRetry instead.');\n        }\n        else if (config.autoRetry !== undefined) {\n            autoRetryValue = config.autoRetry;\n        }\n        else if (((_b = config.retryOptions) === null || _b === void 0 ? void 0 : _b.autoRetry) !== undefined) {\n            autoRetryValue = config.retryOptions.autoRetry;\n        }\n        let maxRetryValue = MAX_RETRY_DEFAULT;\n        if (config.maxRetries && ((_c = config.retryOptions) === null || _c === void 0 ? void 0 : _c.maxRetries)) {\n            throw new ApiError('maxRetries is deprecated. Use retryOptions.maxRetries instead.');\n        }\n        else if (config.maxRetries) {\n            maxRetryValue = config.maxRetries;\n        }\n        else if ((_d = config.retryOptions) === null || _d === void 0 ? void 0 : _d.maxRetries) {\n            maxRetryValue = config.retryOptions.maxRetries;\n        }\n        const options = {\n            request: teeny_request_1.teenyRequest.defaults(requestDefaults),\n            retries: autoRetryValue !== false ? maxRetryValue : 0,\n            noResponseRetries: autoRetryValue !== false ? maxRetryValue : 0,\n            shouldRetryFn(httpRespMessage) {\n                var _a, _b;\n                const err = util.parseHttpRespMessage(httpRespMessage).err;\n                if ((_a = config.retryOptions) === null || _a === void 0 ? void 0 : _a.retryableErrorFn) {\n                    return err && ((_b = config.retryOptions) === null || _b === void 0 ? void 0 : _b.retryableErrorFn(err));\n                }\n                return err && util.shouldRetryRequest(err);\n            },\n            maxRetryDelay: (_e = config.retryOptions) === null || _e === void 0 ? void 0 : _e.maxRetryDelay,\n            retryDelayMultiplier: (_f = config.retryOptions) === null || _f === void 0 ? void 0 : _f.retryDelayMultiplier,\n            totalTimeout: (_g = config.retryOptions) === null || _g === void 0 ? void 0 : _g.totalTimeout,\n        };\n        if (typeof reqOpts.maxRetries === 'number') {\n            options.retries = reqOpts.maxRetries;\n        }\n        if (!config.stream) {\n            return retryRequest(reqOpts, options, (err, response, body) => {\n                util.handleResp(err, response, body, callback);\n            });\n        }\n        const dup = config.stream;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let requestStream;\n        const isGetRequest = (reqOpts.method || 'GET').toUpperCase() === 'GET';\n        if (isGetRequest) {\n            requestStream = retryRequest(reqOpts, options);\n            dup.setReadable(requestStream);\n        }\n        else {\n            // Streaming writable HTTP requests cannot be retried.\n            requestStream = options.request(reqOpts);\n            dup.setWritable(requestStream);\n        }\n        // Replay the Request events back to the stream.\n        requestStream\n            .on('error', dup.destroy.bind(dup))\n            .on('response', dup.emit.bind(dup, 'response'))\n            .on('complete', dup.emit.bind(dup, 'complete'));\n        dup.abort = requestStream.abort;\n        return dup;\n    }\n    /**\n     * Decorate the options about to be made in a request.\n     *\n     * @param {object} reqOpts - The options to be passed to `request`.\n     * @param {string} projectId - The project ID.\n     * @return {object} reqOpts - The decorated reqOpts.\n     */\n    decorateRequest(reqOpts, projectId) {\n        delete reqOpts.autoPaginate;\n        delete reqOpts.autoPaginateVal;\n        delete reqOpts.objectMode;\n        if (reqOpts.qs !== null && typeof reqOpts.qs === 'object') {\n            delete reqOpts.qs.autoPaginate;\n            delete reqOpts.qs.autoPaginateVal;\n            reqOpts.qs = (0, projectify_1.replaceProjectIdToken)(reqOpts.qs, projectId);\n        }\n        if (Array.isArray(reqOpts.multipart)) {\n            reqOpts.multipart = reqOpts.multipart.map(part => {\n                return (0, projectify_1.replaceProjectIdToken)(part, projectId);\n            });\n        }\n        if (reqOpts.json !== null && typeof reqOpts.json === 'object') {\n            delete reqOpts.json.autoPaginate;\n            delete reqOpts.json.autoPaginateVal;\n            reqOpts.json = (0, projectify_1.replaceProjectIdToken)(reqOpts.json, projectId);\n        }\n        reqOpts.uri = (0, projectify_1.replaceProjectIdToken)(reqOpts.uri, projectId);\n        return reqOpts;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    isCustomType(unknown, module) {\n        function getConstructorName(obj) {\n            return obj.constructor && obj.constructor.name.toLowerCase();\n        }\n        const moduleNameParts = module.split('/');\n        const parentModuleName = moduleNameParts[0] && moduleNameParts[0].toLowerCase();\n        const subModuleName = moduleNameParts[1] && moduleNameParts[1].toLowerCase();\n        if (subModuleName && getConstructorName(unknown) !== subModuleName) {\n            return false;\n        }\n        let walkingModule = unknown;\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            if (getConstructorName(walkingModule) === parentModuleName) {\n                return true;\n            }\n            walkingModule = walkingModule.parent;\n            if (!walkingModule) {\n                return false;\n            }\n        }\n    }\n    /**\n     * Create a properly-formatted User-Agent string from a package.json file.\n     *\n     * @param {object} packageJson - A module's package.json file.\n     * @return {string} userAgent - The formatted User-Agent string.\n     */\n    getUserAgentFromPackageJson(packageJson) {\n        const hyphenatedPackageName = packageJson.name\n            .replace('@google-cloud', 'gcloud-node') // For legacy purposes.\n            .replace('/', '-'); // For UA spec-compliance purposes.\n        return hyphenatedPackageName + '/' + packageJson.version;\n    }\n    /**\n     * Given two parameters, figure out if this is either:\n     *  - Just a callback function\n     *  - An options object, and then a callback function\n     * @param optionsOrCallback An options object or callback.\n     * @param cb A potentially undefined callback.\n     */\n    maybeOptionsOrCallback(optionsOrCallback, cb) {\n        return typeof optionsOrCallback === 'function'\n            ? [{}, optionsOrCallback]\n            : [optionsOrCallback, cb];\n    }\n}\nexports.Util = Util;\n/**\n * Basic Passthrough Stream that records the number of bytes read\n * every time the cursor is moved.\n */\nclass ProgressStream extends stream_1.Transform {\n    constructor() {\n        super(...arguments);\n        this.bytesRead = 0;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _transform(chunk, encoding, callback) {\n        this.bytesRead += chunk.length;\n        this.emit('progress', { bytesWritten: this.bytesRead, contentLength: '*' });\n        this.push(chunk);\n        callback();\n    }\n}\nconst util = new Util();\nexports.util = util;\n//# sourceMappingURL=util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/common/build/src/util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/paginator/build/src/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@google-cloud/paginator/build/src/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*!\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ResourceStream = exports.paginator = exports.Paginator = void 0;\n/*!\n * @module common/paginator\n */\nconst arrify = __webpack_require__(/*! arrify */ \"(rsc)/./node_modules/arrify/index.js\");\nconst extend = __webpack_require__(/*! extend */ \"(rsc)/./node_modules/extend/index.js\");\nconst resource_stream_1 = __webpack_require__(/*! ./resource-stream */ \"(rsc)/./node_modules/@google-cloud/paginator/build/src/resource-stream.js\");\nObject.defineProperty(exports, \"ResourceStream\", ({ enumerable: true, get: function () { return resource_stream_1.ResourceStream; } }));\n/*! Developer Documentation\n *\n * paginator is used to auto-paginate `nextQuery` methods as well as\n * streamifying them.\n *\n * Before:\n *\n *   search.query('done=true', function(err, results, nextQuery) {\n *     search.query(nextQuery, function(err, results, nextQuery) {});\n *   });\n *\n * After:\n *\n *   search.query('done=true', function(err, results) {});\n *\n * Methods to extend should be written to accept callbacks and return a\n * `nextQuery`.\n */\nclass Paginator {\n    /**\n     * Cache the original method, then overwrite it on the Class's prototype.\n     *\n     * @param {function} Class - The parent class of the methods to extend.\n     * @param {string|string[]} methodNames - Name(s) of the methods to extend.\n     */\n    // tslint:disable-next-line:variable-name\n    extend(Class, methodNames) {\n        methodNames = arrify(methodNames);\n        methodNames.forEach(methodName => {\n            const originalMethod = Class.prototype[methodName];\n            // map the original method to a private member\n            Class.prototype[methodName + '_'] = originalMethod;\n            // overwrite the original to auto-paginate\n            /* eslint-disable  @typescript-eslint/no-explicit-any */\n            Class.prototype[methodName] = function (...args) {\n                const parsedArguments = paginator.parseArguments_(args);\n                return paginator.run_(parsedArguments, originalMethod.bind(this));\n            };\n        });\n    }\n    /**\n     * Wraps paginated API calls in a readable object stream.\n     *\n     * This method simply calls the nextQuery recursively, emitting results to a\n     * stream. The stream ends when `nextQuery` is null.\n     *\n     * `maxResults` will act as a cap for how many results are fetched and emitted\n     * to the stream.\n     *\n     * @param {string} methodName - Name of the method to streamify.\n     * @return {function} - Wrapped function.\n     */\n    /* eslint-disable  @typescript-eslint/no-explicit-any */\n    streamify(methodName) {\n        return function (\n        /* eslint-disable  @typescript-eslint/no-explicit-any */\n        ...args) {\n            const parsedArguments = paginator.parseArguments_(args);\n            const originalMethod = this[methodName + '_'] || this[methodName];\n            return paginator.runAsStream_(parsedArguments, originalMethod.bind(this));\n        };\n    }\n    /**\n     * Parse a pseudo-array `arguments` for a query and callback.\n     *\n     * @param {array} args - The original `arguments` pseduo-array that the original\n     *     method received.\n     */\n    /* eslint-disable  @typescript-eslint/no-explicit-any */\n    parseArguments_(args) {\n        let query;\n        let autoPaginate = true;\n        let maxApiCalls = -1;\n        let maxResults = -1;\n        let callback;\n        const firstArgument = args[0];\n        const lastArgument = args[args.length - 1];\n        if (typeof firstArgument === 'function') {\n            callback = firstArgument;\n        }\n        else {\n            query = firstArgument;\n        }\n        if (typeof lastArgument === 'function') {\n            callback = lastArgument;\n        }\n        if (typeof query === 'object') {\n            query = extend(true, {}, query);\n            // Check if the user only asked for a certain amount of results.\n            if (query.maxResults && typeof query.maxResults === 'number') {\n                // `maxResults` is used API-wide.\n                maxResults = query.maxResults;\n            }\n            else if (typeof query.pageSize === 'number') {\n                // `pageSize` is Pub/Sub's `maxResults`.\n                maxResults = query.pageSize;\n            }\n            if (query.maxApiCalls && typeof query.maxApiCalls === 'number') {\n                maxApiCalls = query.maxApiCalls;\n                delete query.maxApiCalls;\n            }\n            // maxResults is the user specified limit.\n            if (maxResults !== -1 || query.autoPaginate === false) {\n                autoPaginate = false;\n            }\n        }\n        const parsedArguments = {\n            query: query || {},\n            autoPaginate,\n            maxApiCalls,\n            maxResults,\n            callback,\n        };\n        parsedArguments.streamOptions = extend(true, {}, parsedArguments.query);\n        delete parsedArguments.streamOptions.autoPaginate;\n        delete parsedArguments.streamOptions.maxResults;\n        delete parsedArguments.streamOptions.pageSize;\n        return parsedArguments;\n    }\n    /**\n     * This simply checks to see if `autoPaginate` is set or not, if it's true\n     * then we buffer all results, otherwise simply call the original method.\n     *\n     * @param {array} parsedArguments - Parsed arguments from the original method\n     *     call.\n     * @param {object=|string=} parsedArguments.query - Query object. This is most\n     *     commonly an object, but to make the API more simple, it can also be a\n     *     string in some places.\n     * @param {function=} parsedArguments.callback - Callback function.\n     * @param {boolean} parsedArguments.autoPaginate - Auto-pagination enabled.\n     * @param {boolean} parsedArguments.maxApiCalls - Maximum API calls to make.\n     * @param {number} parsedArguments.maxResults - Maximum results to return.\n     * @param {function} originalMethod - The cached method that accepts a callback\n     *     and returns `nextQuery` to receive more results.\n     */\n    run_(parsedArguments, originalMethod) {\n        const query = parsedArguments.query;\n        const callback = parsedArguments.callback;\n        if (!parsedArguments.autoPaginate) {\n            return originalMethod(query, callback);\n        }\n        const results = new Array();\n        let otherArgs = [];\n        const promise = new Promise((resolve, reject) => {\n            const stream = paginator.runAsStream_(parsedArguments, originalMethod);\n            stream\n                .on('error', reject)\n                .on('data', (data) => results.push(data))\n                .on('end', () => {\n                otherArgs = stream._otherArgs || [];\n                resolve(results);\n            });\n        });\n        if (!callback) {\n            return promise.then(results => [results, query, ...otherArgs]);\n        }\n        promise.then(results => callback(null, results, query, ...otherArgs), (err) => callback(err));\n    }\n    /**\n     * This method simply calls the nextQuery recursively, emitting results to a\n     * stream. The stream ends when `nextQuery` is null.\n     *\n     * `maxResults` will act as a cap for how many results are fetched and emitted\n     * to the stream.\n     *\n     * @param {object=|string=} parsedArguments.query - Query object. This is most\n     *     commonly an object, but to make the API more simple, it can also be a\n     *     string in some places.\n     * @param {function=} parsedArguments.callback - Callback function.\n     * @param {boolean} parsedArguments.autoPaginate - Auto-pagination enabled.\n     * @param {boolean} parsedArguments.maxApiCalls - Maximum API calls to make.\n     * @param {number} parsedArguments.maxResults - Maximum results to return.\n     * @param {function} originalMethod - The cached method that accepts a callback\n     *     and returns `nextQuery` to receive more results.\n     * @return {stream} - Readable object stream.\n     */\n    /* eslint-disable  @typescript-eslint/no-explicit-any */\n    runAsStream_(parsedArguments, originalMethod) {\n        return new resource_stream_1.ResourceStream(parsedArguments, originalMethod);\n    }\n}\nexports.Paginator = Paginator;\nconst paginator = new Paginator();\nexports.paginator = paginator;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/paginator/build/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/paginator/build/src/resource-stream.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@google-cloud/paginator/build/src/resource-stream.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*!\n * Copyright 2019 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ResourceStream = void 0;\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nclass ResourceStream extends stream_1.Transform {\n    constructor(args, requestFn) {\n        const options = Object.assign({ objectMode: true }, args.streamOptions);\n        super(options);\n        this._ended = false;\n        this._maxApiCalls = args.maxApiCalls === -1 ? Infinity : args.maxApiCalls;\n        this._nextQuery = args.query;\n        this._reading = false;\n        this._requestFn = requestFn;\n        this._requestsMade = 0;\n        this._resultsToSend = args.maxResults === -1 ? Infinity : args.maxResults;\n        this._otherArgs = [];\n    }\n    /* eslint-disable  @typescript-eslint/no-explicit-any */\n    end(...args) {\n        this._ended = true;\n        return super.end(...args);\n    }\n    _read() {\n        if (this._reading) {\n            return;\n        }\n        this._reading = true;\n        // Wrap in a try/catch to catch input linting errors, e.g.\n        // an invalid BigQuery query. These errors are thrown in an\n        // async fashion, which makes them un-catchable by the user.\n        try {\n            this._requestFn(this._nextQuery, (err, results, nextQuery, ...otherArgs) => {\n                if (err) {\n                    this.destroy(err);\n                    return;\n                }\n                this._otherArgs = otherArgs;\n                this._nextQuery = nextQuery;\n                if (this._resultsToSend !== Infinity) {\n                    results = results.splice(0, this._resultsToSend);\n                    this._resultsToSend -= results.length;\n                }\n                let more = true;\n                for (const result of results) {\n                    if (this._ended) {\n                        break;\n                    }\n                    more = this.push(result);\n                }\n                const isFinished = !this._nextQuery || this._resultsToSend < 1;\n                const madeMaxCalls = ++this._requestsMade >= this._maxApiCalls;\n                if (isFinished || madeMaxCalls) {\n                    this.end();\n                }\n                if (more && !this._ended) {\n                    setImmediate(() => this._read());\n                }\n                this._reading = false;\n            });\n        }\n        catch (e) {\n            this.destroy(e);\n        }\n    }\n}\nexports.ResourceStream = ResourceStream;\n//# sourceMappingURL=resource-stream.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9wYWdpbmF0b3IvYnVpbGQvc3JjL3Jlc291cmNlLXN0cmVhbS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0I7QUFDdEIsaUJBQWlCLG1CQUFPLENBQUMsc0JBQVE7QUFDakM7QUFDQTtBQUNBLHdDQUF3QyxrQkFBa0I7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QiIsInNvdXJjZXMiOlsiL1VzZXJzL2thaXNlaS9EZXNrdG9wL20tdHJhY2VyLWFpL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL3BhZ2luYXRvci9idWlsZC9zcmMvcmVzb3VyY2Utc3RyZWFtLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyohXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUmVzb3VyY2VTdHJlYW0gPSB2b2lkIDA7XG5jb25zdCBzdHJlYW1fMSA9IHJlcXVpcmUoXCJzdHJlYW1cIik7XG5jbGFzcyBSZXNvdXJjZVN0cmVhbSBleHRlbmRzIHN0cmVhbV8xLlRyYW5zZm9ybSB7XG4gICAgY29uc3RydWN0b3IoYXJncywgcmVxdWVzdEZuKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHsgb2JqZWN0TW9kZTogdHJ1ZSB9LCBhcmdzLnN0cmVhbU9wdGlvbnMpO1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgdGhpcy5fZW5kZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fbWF4QXBpQ2FsbHMgPSBhcmdzLm1heEFwaUNhbGxzID09PSAtMSA/IEluZmluaXR5IDogYXJncy5tYXhBcGlDYWxscztcbiAgICAgICAgdGhpcy5fbmV4dFF1ZXJ5ID0gYXJncy5xdWVyeTtcbiAgICAgICAgdGhpcy5fcmVhZGluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9yZXF1ZXN0Rm4gPSByZXF1ZXN0Rm47XG4gICAgICAgIHRoaXMuX3JlcXVlc3RzTWFkZSA9IDA7XG4gICAgICAgIHRoaXMuX3Jlc3VsdHNUb1NlbmQgPSBhcmdzLm1heFJlc3VsdHMgPT09IC0xID8gSW5maW5pdHkgOiBhcmdzLm1heFJlc3VsdHM7XG4gICAgICAgIHRoaXMuX290aGVyQXJncyA9IFtdO1xuICAgIH1cbiAgICAvKiBlc2xpbnQtZGlzYWJsZSAgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuICAgIGVuZCguLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuX2VuZGVkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmVuZCguLi5hcmdzKTtcbiAgICB9XG4gICAgX3JlYWQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9yZWFkaW5nKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcmVhZGluZyA9IHRydWU7XG4gICAgICAgIC8vIFdyYXAgaW4gYSB0cnkvY2F0Y2ggdG8gY2F0Y2ggaW5wdXQgbGludGluZyBlcnJvcnMsIGUuZy5cbiAgICAgICAgLy8gYW4gaW52YWxpZCBCaWdRdWVyeSBxdWVyeS4gVGhlc2UgZXJyb3JzIGFyZSB0aHJvd24gaW4gYW5cbiAgICAgICAgLy8gYXN5bmMgZmFzaGlvbiwgd2hpY2ggbWFrZXMgdGhlbSB1bi1jYXRjaGFibGUgYnkgdGhlIHVzZXIuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLl9yZXF1ZXN0Rm4odGhpcy5fbmV4dFF1ZXJ5LCAoZXJyLCByZXN1bHRzLCBuZXh0UXVlcnksIC4uLm90aGVyQXJncykgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZXN0cm95KGVycik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5fb3RoZXJBcmdzID0gb3RoZXJBcmdzO1xuICAgICAgICAgICAgICAgIHRoaXMuX25leHRRdWVyeSA9IG5leHRRdWVyeTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fcmVzdWx0c1RvU2VuZCAhPT0gSW5maW5pdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0cyA9IHJlc3VsdHMuc3BsaWNlKDAsIHRoaXMuX3Jlc3VsdHNUb1NlbmQpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZXN1bHRzVG9TZW5kIC09IHJlc3VsdHMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgbW9yZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCByZXN1bHQgb2YgcmVzdWx0cykge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fZW5kZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1vcmUgPSB0aGlzLnB1c2gocmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgaXNGaW5pc2hlZCA9ICF0aGlzLl9uZXh0UXVlcnkgfHwgdGhpcy5fcmVzdWx0c1RvU2VuZCA8IDE7XG4gICAgICAgICAgICAgICAgY29uc3QgbWFkZU1heENhbGxzID0gKyt0aGlzLl9yZXF1ZXN0c01hZGUgPj0gdGhpcy5fbWF4QXBpQ2FsbHM7XG4gICAgICAgICAgICAgICAgaWYgKGlzRmluaXNoZWQgfHwgbWFkZU1heENhbGxzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW5kKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChtb3JlICYmICF0aGlzLl9lbmRlZCkge1xuICAgICAgICAgICAgICAgICAgICBzZXRJbW1lZGlhdGUoKCkgPT4gdGhpcy5fcmVhZCgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVhZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdHJveShlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuUmVzb3VyY2VTdHJlYW0gPSBSZXNvdXJjZVN0cmVhbTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlc291cmNlLXN0cmVhbS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/paginator/build/src/resource-stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/precise-date/build/src/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@google-cloud/precise-date/build/src/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*!\n * Copyright 2019 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PreciseDate = void 0;\nconst FULL_ISO_REG = /\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d{4,9}Z/;\nconst NO_BIG_INT = 'BigInt only available in Node >= v10.7. Consider using getFullTimeString instead.';\nvar Sign;\n(function (Sign) {\n    Sign[Sign[\"NEGATIVE\"] = -1] = \"NEGATIVE\";\n    Sign[Sign[\"POSITIVE\"] = 1] = \"POSITIVE\";\n    Sign[Sign[\"ZERO\"] = 0] = \"ZERO\";\n})(Sign || (Sign = {}));\n/**\n * The native Date object.\n * @external Date\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date}\n */\n/**\n * @typedef {array} DateTuple\n * @property {number} 0 Represents seconds of UTC time since Unix epoch\n *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n *     9999-12-31T23:59:59Z inclusive.\n * @property {number} 1 Non-negative fractions of a second at nanosecond\n *     resolution. Negative second values with fractions must still have\n *     non-negative nanos values that count forward in time. Must be from 0 to\n *     999,999,999 inclusive.\n */\n/**\n * @typedef {object} DateStruct\n * @property {number} seconds Represents seconds of UTC time since Unix epoch\n *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n *     9999-12-31T23:59:59Z inclusive.\n * @property {number} nanos Non-negative fractions of a second at nanosecond\n *     resolution. Negative second values with fractions must still have\n *     non-negative nanos values that count forward in time. Must be from 0 to\n *     999,999,999 inclusive.\n */\n/**\n * Date object with nanosecond precision. Supports all standard Date arguments\n * in addition to several custom types as noted below.\n *\n * @class\n * @extends external:Date\n *\n * @param {number|string|bigint|Date|DateTuple|DateStruct} [time] The time\n *     value.\n * @param {...number} [dateFields] Additional date fields (month, date, hours,\n *     minutes, seconds, milliseconds, microseconds, nanoseconds).\n *\n * @example <caption>With a RFC 3339 formatted string.</caption>\n * const date = new PreciseDate('2019-02-08T10:34:29.481145231Z');\n *\n * @example <caption>With a nanosecond timestamp string.</caption>\n * const date = new PreciseDate('1549622069481320032');\n *\n * @example <caption>With a BigInt (requires Node >= v10.7)</caption>\n * const date = new PreciseDate(1549622069481320032n);\n *\n * @example <caption>With a tuple containing seconds and nanoseconds.</caption>\n * const date = new PreciseDate([1549622069, 481320032]);\n *\n * @example <caption>With an object containing `seconds` and `nanos`</caption>\n * const date = new PreciseDate({seconds: 1549622069, nanos: 481320032});\n *\n * @example <caption>Specifiying date fields</caption>\n * const date = new PreciseDate(2018, 5, 14, 41, 11, 34, 123, 874, 321);\n */\nclass PreciseDate extends Date {\n    constructor(time) {\n        super();\n        this._micros = 0;\n        this._nanos = 0;\n        if (time && typeof time !== 'number' && !(time instanceof Date)) {\n            this.setFullTime(PreciseDate.parseFull(time));\n            return;\n        }\n        // eslint-disable-next-line prefer-rest-params\n        const args = Array.from(arguments);\n        const dateFields = args.slice(0, 7);\n        const date = new Date(...dateFields);\n        const nanos = args.length === 9 ? args.pop() : 0;\n        const micros = args.length === 8 ? args.pop() : 0;\n        this.setTime(date.getTime());\n        this.setMicroseconds(micros);\n        this.setNanoseconds(nanos);\n    }\n    /**\n     * Returns the specified date represented in nanoseconds according to\n     * universal time.\n     *\n     * **NOTE:** Because this method returns a `BigInt` it requires Node >= v10.7.\n     * Use {@link PreciseDate#getFullTimeString} to get the time as a string.\n     *\n     * @see {@link https://github.com/tc39/proposal-bigint|BigInt}\n     *\n     * @throws {error} If `BigInt` is unavailable.\n     * @returns {bigint}\n     *\n     * @example\n     * const date = new PreciseDate('2019-02-08T10:34:29.481145231Z');\n     *\n     * console.log(date.getFullTime());\n     * // expected output: 1549622069481145231n\n     */\n    getFullTime() {\n        if (typeof BigInt !== 'function') {\n            throw new Error(NO_BIG_INT);\n        }\n        return BigInt(this.getFullTimeString());\n    }\n    /**\n     * Returns a string of the specified date represented in nanoseconds according\n     * to universal time.\n     *\n     * @returns {string}\n     *\n     * @example\n     * const date = new PreciseDate('2019-02-08T10:34:29.481145231Z');\n     *\n     * console.log(date.getFullTimeString());\n     * // expected output: \"1549622069481145231\"\n     */\n    getFullTimeString() {\n        const seconds = this._getSeconds();\n        let nanos = this._getNanos();\n        if (nanos && Math.sign(seconds) === Sign.NEGATIVE) {\n            nanos = 1e9 - nanos;\n        }\n        return `${seconds}${padLeft(nanos, 9)}`;\n    }\n    /**\n     * Returns the microseconds in the specified date according to universal time.\n     *\n     * @returns {number}\n     *\n     * @example\n     * const date = new PreciseDate('2019-02-08T10:34:29.481145Z');\n     *\n     * console.log(date.getMicroseconds());\n     * // expected output: 145\n     */\n    getMicroseconds() {\n        return this._micros;\n    }\n    /**\n     * Returns the nanoseconds in the specified date according to universal time.\n     *\n     * @returns {number}\n     *\n     * @example\n     * const date = new PreciseDate('2019-02-08T10:34:29.481145231Z');\n     *\n     * console.log(date.getNanoseconds());\n     * // expected output: 231\n     */\n    getNanoseconds() {\n        return this._nanos;\n    }\n    /**\n     * Sets the microseconds for a specified date according to universal time.\n     *\n     * @param {number} microseconds A number representing the microseconds.\n     * @returns {string} Returns a string representing the nanoseconds in the\n     *     specified date according to universal time.\n     *\n     * @example\n     * const date = new PreciseDate();\n     *\n     * date.setMicroseconds(149);\n     *\n     * console.log(date.getMicroseconds());\n     * // expected output: 149\n     */\n    setMicroseconds(micros) {\n        const abs = Math.abs(micros);\n        let millis = this.getUTCMilliseconds();\n        if (abs >= 1000) {\n            millis += Math.floor(abs / 1000) * Math.sign(micros);\n            micros %= 1000;\n        }\n        if (Math.sign(micros) === Sign.NEGATIVE) {\n            millis -= 1;\n            micros += 1000;\n        }\n        this._micros = micros;\n        this.setUTCMilliseconds(millis);\n        return this.getFullTimeString();\n    }\n    /**\n     * Sets the nanoseconds for a specified date according to universal time.\n     *\n     * @param {number} nanoseconds A number representing the nanoseconds.\n     * @returns {string} Returns a string representing the nanoseconds in the\n     *     specified date according to universal time.\n     *\n     * @example\n     * const date = new PreciseDate();\n     *\n     * date.setNanoseconds(231);\n     *\n     * console.log(date.getNanoseconds());\n     * // expected output: 231\n     */\n    setNanoseconds(nanos) {\n        const abs = Math.abs(nanos);\n        let micros = this._micros;\n        if (abs >= 1000) {\n            micros += Math.floor(abs / 1000) * Math.sign(nanos);\n            nanos %= 1000;\n        }\n        if (Math.sign(nanos) === Sign.NEGATIVE) {\n            micros -= 1;\n            nanos += 1000;\n        }\n        this._nanos = nanos;\n        return this.setMicroseconds(micros);\n    }\n    /**\n     * Sets the PreciseDate object to the time represented by a number of\n     * nanoseconds since January 1, 1970, 00:00:00 UTC.\n     *\n     * @param {bigint|number|string} time Value representing the number of\n     *     nanoseconds since January 1, 1970, 00:00:00 UTC.\n     * @returns {string} Returns a string representing the nanoseconds in the\n     *     specified date according to universal time (effectively, the value of\n     *     the argument).\n     *\n     * @see {@link https://github.com/tc39/proposal-bigint|BigInt}\n     *\n     * @example <caption>With a nanosecond string.</caption>\n     * const date = new PreciseDate();\n     * date.setFullTime('1549622069481145231');\n     *\n     * @example <caption>With a BigInt</caption>\n     * date.setFullTime(1549622069481145231n);\n     */\n    setFullTime(time) {\n        if (typeof time !== 'string') {\n            time = time.toString();\n        }\n        const sign = Math.sign(Number(time));\n        time = time.replace(/^-/, '');\n        const seconds = Number(time.substr(0, time.length - 9)) * sign;\n        const nanos = Number(time.substr(-9)) * sign;\n        this.setTime(seconds * 1000);\n        return this.setNanoseconds(nanos);\n    }\n    /**\n     * Sets the PreciseDate object to the time represented by a number of\n     * milliseconds since January 1, 1970, 00:00:00 UTC. Calling this method will\n     * reset both the microseconds and nanoseconds to 0.\n     *\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setTime|Date#setTime}\n     *\n     * @param {number} time Value representing the number of milliseconds since\n     *     January 1, 1970, 00:00:00 UTC.\n     * @returns {string} The number of milliseconds between January 1, 1970,\n     *     00:00:00 UTC and the updated date (effectively, the value of the\n     *     argument).\n     */\n    setTime(time) {\n        this._micros = 0;\n        this._nanos = 0;\n        return super.setTime(time);\n    }\n    /**\n     * Returns a string in RFC 3339 format. Unlike the native `Date#toISOString`,\n     * this will return 9 digits to represent sub-second precision.\n     *\n     * @see {@link https://tools.ietf.org/html/rfc3339|RFC 3339}\n     *\n     * @returns {string}\n     *\n     * @example\n     * const date = new PreciseDate(1549622069481145231n);\n     *\n     * console.log(date.toISOString());\n     * // expected output: \"2019-02-08T10:34:29.481145231Z\"\n     */\n    toISOString() {\n        const micros = padLeft(this._micros, 3);\n        const nanos = padLeft(this._nanos, 3);\n        return super.toISOString().replace(/z$/i, `${micros}${nanos}Z`);\n    }\n    /**\n     * Returns an object representing the specified date according to universal\n     * time.\n     *\n     * @see {@link https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#timestamp|google.protobuf.Timestamp}\n     *\n     * @returns {DateStruct}\n     *\n     * @example\n     * const date = new PreciseDate('2019-02-08T10:34:29.481145231Z');\n     *\n     * console.log(date.toStruct());\n     * // expected output: {seconds: 1549622069, nanos: 481145231}\n     */\n    toStruct() {\n        let seconds = this._getSeconds();\n        const nanos = this._getNanos();\n        const sign = Math.sign(seconds);\n        // These objects are essentially a mirror of protobuf timestamps.\n        // `nanos` must always count forward in time, even if the date is <= Unix\n        // epoch. To do this we just need to count backwards 1 second and return the\n        // nanoseconds as is.\n        if (sign === Sign.NEGATIVE && nanos) {\n            seconds -= 1;\n        }\n        return { seconds, nanos };\n    }\n    /**\n     * Returns a tuple representing the specified date according to universal\n     * time.\n     *\n     * @returns {DateTuple}\n     *\n     * @example\n     * const date = new PreciseDate('2019-02-08T10:34:29.481145231Z');\n     *\n     * console.log(date.toTuple());\n     * // expected output: [1549622069, 481145231]\n     */\n    toTuple() {\n        const { seconds, nanos } = this.toStruct();\n        return [seconds, nanos];\n    }\n    /**\n     * Returns the total number of seconds in the specified date since Unix epoch.\n     * Numbers representing < epoch will be negative.\n     *\n     * @private\n     *\n     * @returns {number}\n     */\n    _getSeconds() {\n        const time = this.getTime();\n        const sign = Math.sign(time);\n        return Math.floor(Math.abs(time) / 1000) * sign;\n    }\n    /**\n     * Returns the sub-second precision of the specified date. This will always be\n     * a positive number.\n     *\n     * @private\n     *\n     * @returns {number}\n     */\n    _getNanos() {\n        const msInNanos = this.getUTCMilliseconds() * 1e6;\n        const microsInNanos = this._micros * 1000;\n        return this._nanos + msInNanos + microsInNanos;\n    }\n    /**\n     * Parses a precise time.\n     *\n     * @static\n     *\n     * @param {string|bigint|DateTuple|DateStruct} time The precise time value.\n     * @returns {string} Returns a string representing the nanoseconds in the\n     *     specified date according to universal time.\n     *\n     * @example <caption>From a RFC 3339 formatted string.</caption>\n     * const time = PreciseDate.parseFull('2019-02-08T10:34:29.481145231Z');\n     * console.log(time); // expected output: \"1549622069481145231\"\n     *\n     * @example <caption>From a nanosecond timestamp string.</caption>\n     * const time = PreciseDate.parseFull('1549622069481145231');\n     * console.log(time); // expected output: \"1549622069481145231\"\n     *\n     * @example <caption>From a BigInt (requires Node >= v10.7)</caption>\n     * const time = PreciseDate.parseFull(1549622069481145231n);\n     * console.log(time); // expected output: \"1549622069481145231\"\n     *\n     * @example <caption>From a tuple.</caption>\n     * const time = PreciseDate.parseFull([1549622069, 481145231]);\n     * console.log(time); // expected output: \"1549622069481145231\"\n     *\n     * @example <caption>From an object.</caption>\n     * const struct = {seconds: 1549622069, nanos: 481145231};\n     * const time = PreciseDate.parseFull(struct);\n     * console.log(time); // expected output: \"1549622069481145231\"\n     */\n    static parseFull(time) {\n        const date = new PreciseDate();\n        if (Array.isArray(time)) {\n            const [seconds, nanos] = time;\n            time = { seconds, nanos };\n        }\n        if (isFullTime(time)) {\n            date.setFullTime(time);\n        }\n        else if (isStruct(time)) {\n            const { seconds, nanos } = parseProto(time);\n            date.setTime(seconds * 1000);\n            date.setNanoseconds(nanos);\n        }\n        else if (isFullISOString(time)) {\n            date.setFullTime(parseFullISO(time));\n        }\n        else {\n            date.setTime(new Date(time).getTime());\n        }\n        return date.getFullTimeString();\n    }\n    /**\n     * Accepts the same number parameters as the PreciseDate constructor, but\n     * treats them as UTC. It returns a string that represents the number of\n     * nanoseconds since January 1, 1970, 00:00:00 UTC.\n     *\n     * **NOTE:** Because this method returns a `BigInt` it requires Node >= v10.7.\n     *\n     * @see {@link https://github.com/tc39/proposal-bigint|BigInt}\n     *\n     * @static\n     *\n     * @throws {error} If `BigInt` is unavailable.\n     *\n     * @param {...number} [dateFields] The date fields.\n     * @returns {bigint}\n     *\n     * @example\n     * const time = PreciseDate.fullUTC(2019, 1, 8, 10, 34, 29, 481, 145, 231);\n     * console.log(time); // expected output: 1549622069481145231n\n     */\n    static fullUTC(...args) {\n        if (typeof BigInt !== 'function') {\n            throw new Error(NO_BIG_INT);\n        }\n        return BigInt(PreciseDate.fullUTCString(...args));\n    }\n    /**\n     * Accepts the same number parameters as the PreciseDate constructor, but\n     * treats them as UTC. It returns a string that represents the number of\n     * nanoseconds since January 1, 1970, 00:00:00 UTC.\n     *\n     * @static\n     *\n     * @param {...number} [dateFields] The date fields.\n     * @returns {string}\n     *\n     * @example\n     * const time = PreciseDate.fullUTCString(2019, 1, 8, 10, 34, 29, 481, 145,\n     * 231); console.log(time); // expected output: '1549622069481145231'\n     */\n    static fullUTCString(...args) {\n        const milliseconds = Date.UTC(...args.slice(0, 7));\n        const date = new PreciseDate(milliseconds);\n        if (args.length === 9) {\n            date.setNanoseconds(args.pop());\n        }\n        if (args.length === 8) {\n            date.setMicroseconds(args.pop());\n        }\n        return date.getFullTimeString();\n    }\n}\nexports.PreciseDate = PreciseDate;\n/**\n * Parses a RFC 3339 formatted string representation of the date, and returns\n * a string representing the nanoseconds since January 1, 1970, 00:00:00.\n *\n * @private\n *\n * @param {string} time The RFC 3339 formatted string.\n * @returns {string}\n */\nfunction parseFullISO(time) {\n    let digits = '0';\n    time = time.replace(/\\.(\\d+)/, ($0, $1) => {\n        digits = $1;\n        return '.000';\n    });\n    const nanos = Number(padRight(digits, 9));\n    const date = new PreciseDate(time);\n    return date.setNanoseconds(nanos);\n}\n/**\n * Normalizes a {@link google.protobuf.Timestamp} object.\n *\n * @private\n *\n * @param {google.protobuf.Timestamp} timestamp The timestamp object.\n * @returns {DateStruct}\n */\nfunction parseProto({ seconds = 0, nanos = 0 }) {\n    if (typeof seconds.toNumber === 'function') {\n        seconds = seconds.toNumber();\n    }\n    seconds = Number(seconds);\n    nanos = Number(nanos);\n    return { seconds, nanos };\n}\n/**\n * Checks to see if time value is specified in nanoseconds. We assume that all\n * BigInt and string timestamps represent nanoseconds.\n *\n * @private\n *\n * @param {*} time The time to check.\n * @returns {boolean}\n */\nfunction isFullTime(time) {\n    return (typeof time === 'bigint' || (typeof time === 'string' && /^\\d+$/.test(time)));\n}\n/**\n * Checks to see if time value is a {@link DateStruct}.\n *\n * @private\n *\n * @param {*} time The time to check.\n * @returns {boolean}\n */\nfunction isStruct(time) {\n    return ((typeof time === 'object' &&\n        typeof time.seconds !== 'undefined') ||\n        typeof time.nanos === 'number');\n}\n/**\n * Checks to see if the time value is a RFC 3339 formatted string.\n *\n * @private\n *\n * @param {*} time The time to check.\n * @returns {boolean}\n */\nfunction isFullISOString(time) {\n    return typeof time === 'string' && FULL_ISO_REG.test(time);\n}\n/**\n * Pads a number/string with \"0\" to the left.\n *\n * @private\n *\n * @param {string|number} n The number/string to pad.\n * @param {number} min The min size of the padded string.\n * @returns {string}\n */\nfunction padLeft(n, min) {\n    const padding = getPadding(n, min);\n    return `${padding}${n}`;\n}\n/**\n * Pads a number/string with \"0\" to the right.\n *\n * @private\n *\n * @param {string|number} n The number/string to pad.\n * @param {number} min The min size of the padded string.\n * @returns {string}\n */\nfunction padRight(n, min) {\n    const padding = getPadding(n, min);\n    return `${n}${padding}`;\n}\n/**\n * Creates padding based on current size and min size needed.\n *\n * @private\n *\n * @param {string|number} n The number/string to pad.\n * @param {number} [min=3] The min size of the padded string.\n * @returns {string}\n */\nfunction getPadding(n, min) {\n    const size = Math.max(min - n.toString().length, 0);\n    return '0'.repeat(size);\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/precise-date/build/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/projectify/build/src/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@google-cloud/projectify/build/src/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MissingProjectIdError = exports.replaceProjectIdToken = void 0;\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\n// Copyright 2014 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Populate the `{{projectId}}` placeholder.\n *\n * @throws {Error} If a projectId is required, but one is not provided.\n *\n * @param {*} - Any input value that may contain a placeholder. Arrays and objects will be looped.\n * @param {string} projectId - A projectId. If not provided\n * @return {*} - The original argument with all placeholders populated.\n */\n// eslint-disable-next-line  @typescript-eslint/no-explicit-any\nfunction replaceProjectIdToken(value, projectId) {\n    if (Array.isArray(value)) {\n        value = value.map(v => replaceProjectIdToken(v, projectId));\n    }\n    if (value !== null &&\n        typeof value === 'object' &&\n        !(value instanceof Buffer) &&\n        !(value instanceof stream_1.Stream) &&\n        typeof value.hasOwnProperty === 'function') {\n        for (const opt in value) {\n            // eslint-disable-next-line no-prototype-builtins\n            if (value.hasOwnProperty(opt)) {\n                value[opt] = replaceProjectIdToken(value[opt], projectId);\n            }\n        }\n    }\n    if (typeof value === 'string' &&\n        value.indexOf('{{projectId}}') > -1) {\n        if (!projectId || projectId === '{{projectId}}') {\n            throw new MissingProjectIdError();\n        }\n        value = value.replace(/{{projectId}}/g, projectId);\n    }\n    return value;\n}\nexports.replaceProjectIdToken = replaceProjectIdToken;\n/**\n * Custom error type for missing project ID errors.\n */\nclass MissingProjectIdError extends Error {\n    constructor() {\n        super(...arguments);\n        this.message = `Sorry, we cannot connect to Cloud Services without a project\n    ID. You may specify one with an environment variable named\n    \"GOOGLE_CLOUD_PROJECT\".`.replace(/ +/g, ' ');\n    }\n}\nexports.MissingProjectIdError = MissingProjectIdError;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9wcm9qZWN0aWZ5L2J1aWxkL3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw2QkFBNkIsR0FBRyw2QkFBNkI7QUFDN0QsaUJBQWlCLG1CQUFPLENBQUMsc0JBQVE7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixXQUFXO0FBQzlCO0FBQ0EsWUFBWSxPQUFPO0FBQ25CO0FBQ0EsV0FBVyxHQUFHO0FBQ2QsV0FBVyxRQUFRO0FBQ25CLFlBQVksR0FBRztBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLFdBQVc7QUFDcEMsMkNBQTJDLFdBQVc7QUFDdEQ7QUFDQTtBQUNBLGlDQUFpQyxXQUFXO0FBQzVDO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCIiwic291cmNlcyI6WyIvVXNlcnMva2Fpc2VpL0Rlc2t0b3AvbS10cmFjZXItYWkvbm9kZV9tb2R1bGVzL0Bnb29nbGUtY2xvdWQvcHJvamVjdGlmeS9idWlsZC9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1pc3NpbmdQcm9qZWN0SWRFcnJvciA9IGV4cG9ydHMucmVwbGFjZVByb2plY3RJZFRva2VuID0gdm9pZCAwO1xuY29uc3Qgc3RyZWFtXzEgPSByZXF1aXJlKFwic3RyZWFtXCIpO1xuLy8gQ29weXJpZ2h0IDIwMTQgR29vZ2xlIExMQ1xuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIFBvcHVsYXRlIHRoZSBge3twcm9qZWN0SWR9fWAgcGxhY2Vob2xkZXIuXG4gKlxuICogQHRocm93cyB7RXJyb3J9IElmIGEgcHJvamVjdElkIGlzIHJlcXVpcmVkLCBidXQgb25lIGlzIG5vdCBwcm92aWRlZC5cbiAqXG4gKiBAcGFyYW0geyp9IC0gQW55IGlucHV0IHZhbHVlIHRoYXQgbWF5IGNvbnRhaW4gYSBwbGFjZWhvbGRlci4gQXJyYXlzIGFuZCBvYmplY3RzIHdpbGwgYmUgbG9vcGVkLlxuICogQHBhcmFtIHtzdHJpbmd9IHByb2plY3RJZCAtIEEgcHJvamVjdElkLiBJZiBub3QgcHJvdmlkZWRcbiAqIEByZXR1cm4geyp9IC0gVGhlIG9yaWdpbmFsIGFyZ3VtZW50IHdpdGggYWxsIHBsYWNlaG9sZGVycyBwb3B1bGF0ZWQuXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSAgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZnVuY3Rpb24gcmVwbGFjZVByb2plY3RJZFRva2VuKHZhbHVlLCBwcm9qZWN0SWQpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5tYXAodiA9PiByZXBsYWNlUHJvamVjdElkVG9rZW4odiwgcHJvamVjdElkKSk7XG4gICAgfVxuICAgIGlmICh2YWx1ZSAhPT0gbnVsbCAmJlxuICAgICAgICB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmXG4gICAgICAgICEodmFsdWUgaW5zdGFuY2VvZiBCdWZmZXIpICYmXG4gICAgICAgICEodmFsdWUgaW5zdGFuY2VvZiBzdHJlYW1fMS5TdHJlYW0pICYmXG4gICAgICAgIHR5cGVvZiB2YWx1ZS5oYXNPd25Qcm9wZXJ0eSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBmb3IgKGNvbnN0IG9wdCBpbiB2YWx1ZSkge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICAgICAgICAgICAgaWYgKHZhbHVlLmhhc093blByb3BlcnR5KG9wdCkpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZVtvcHRdID0gcmVwbGFjZVByb2plY3RJZFRva2VuKHZhbHVlW29wdF0sIHByb2plY3RJZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgdmFsdWUuaW5kZXhPZigne3twcm9qZWN0SWR9fScpID4gLTEpIHtcbiAgICAgICAgaWYgKCFwcm9qZWN0SWQgfHwgcHJvamVjdElkID09PSAne3twcm9qZWN0SWR9fScpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBNaXNzaW5nUHJvamVjdElkRXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL3t7cHJvamVjdElkfX0vZywgcHJvamVjdElkKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZXhwb3J0cy5yZXBsYWNlUHJvamVjdElkVG9rZW4gPSByZXBsYWNlUHJvamVjdElkVG9rZW47XG4vKipcbiAqIEN1c3RvbSBlcnJvciB0eXBlIGZvciBtaXNzaW5nIHByb2plY3QgSUQgZXJyb3JzLlxuICovXG5jbGFzcyBNaXNzaW5nUHJvamVjdElkRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9IGBTb3JyeSwgd2UgY2Fubm90IGNvbm5lY3QgdG8gQ2xvdWQgU2VydmljZXMgd2l0aG91dCBhIHByb2plY3RcbiAgICBJRC4gWW91IG1heSBzcGVjaWZ5IG9uZSB3aXRoIGFuIGVudmlyb25tZW50IHZhcmlhYmxlIG5hbWVkXG4gICAgXCJHT09HTEVfQ0xPVURfUFJPSkVDVFwiLmAucmVwbGFjZSgvICsvZywgJyAnKTtcbiAgICB9XG59XG5leHBvcnRzLk1pc3NpbmdQcm9qZWN0SWRFcnJvciA9IE1pc3NpbmdQcm9qZWN0SWRFcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/projectify/build/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/promisify/build/src/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@google-cloud/promisify/build/src/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/* eslint-disable prefer-rest-params */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.callbackifyAll = exports.callbackify = exports.promisifyAll = exports.promisify = void 0;\n/**\n * Wraps a callback style function to conditionally return a promise.\n *\n * @param {function} originalMethod - The method to promisify.\n * @param {object=} options - Promise options.\n * @param {boolean} options.singular - Resolve the promise with single arg instead of an array.\n * @return {function} wrapped\n */\nfunction promisify(originalMethod, options) {\n    if (originalMethod.promisified_) {\n        return originalMethod;\n    }\n    options = options || {};\n    const slice = Array.prototype.slice;\n    // tslint:disable-next-line:no-any\n    const wrapper = function () {\n        let last;\n        for (last = arguments.length - 1; last >= 0; last--) {\n            const arg = arguments[last];\n            if (typeof arg === 'undefined') {\n                continue; // skip trailing undefined.\n            }\n            if (typeof arg !== 'function') {\n                break; // non-callback last argument found.\n            }\n            return originalMethod.apply(this, arguments);\n        }\n        // peel trailing undefined.\n        const args = slice.call(arguments, 0, last + 1);\n        // tslint:disable-next-line:variable-name\n        let PromiseCtor = Promise;\n        // Because dedupe will likely create a single install of\n        // @google-cloud/common to be shared amongst all modules, we need to\n        // localize it at the Service level.\n        if (this && this.Promise) {\n            PromiseCtor = this.Promise;\n        }\n        return new PromiseCtor((resolve, reject) => {\n            // tslint:disable-next-line:no-any\n            args.push((...args) => {\n                const callbackArgs = slice.call(args);\n                const err = callbackArgs.shift();\n                if (err) {\n                    return reject(err);\n                }\n                if (options.singular && callbackArgs.length === 1) {\n                    resolve(callbackArgs[0]);\n                }\n                else {\n                    resolve(callbackArgs);\n                }\n            });\n            originalMethod.apply(this, args);\n        });\n    };\n    wrapper.promisified_ = true;\n    return wrapper;\n}\nexports.promisify = promisify;\n/**\n * Promisifies certain Class methods. This will not promisify private or\n * streaming methods.\n *\n * @param {module:common/service} Class - Service class.\n * @param {object=} options - Configuration object.\n */\n// tslint:disable-next-line:variable-name\nfunction promisifyAll(Class, options) {\n    const exclude = (options && options.exclude) || [];\n    const ownPropertyNames = Object.getOwnPropertyNames(Class.prototype);\n    const methods = ownPropertyNames.filter(methodName => {\n        // clang-format off\n        return (!exclude.includes(methodName) &&\n            typeof Class.prototype[methodName] === 'function' && // is it a function?\n            !/(^_|(Stream|_)|promise$)|^constructor$/.test(methodName) // is it promisable?\n        );\n        // clang-format on\n    });\n    methods.forEach(methodName => {\n        const originalMethod = Class.prototype[methodName];\n        if (!originalMethod.promisified_) {\n            Class.prototype[methodName] = exports.promisify(originalMethod, options);\n        }\n    });\n}\nexports.promisifyAll = promisifyAll;\n/**\n * Wraps a promisy type function to conditionally call a callback function.\n *\n * @param {function} originalMethod - The method to callbackify.\n * @param {object=} options - Callback options.\n * @param {boolean} options.singular - Pass to the callback a single arg instead of an array.\n * @return {function} wrapped\n */\nfunction callbackify(originalMethod) {\n    if (originalMethod.callbackified_) {\n        return originalMethod;\n    }\n    // tslint:disable-next-line:no-any\n    const wrapper = function () {\n        if (typeof arguments[arguments.length - 1] !== 'function') {\n            return originalMethod.apply(this, arguments);\n        }\n        const cb = Array.prototype.pop.call(arguments);\n        originalMethod.apply(this, arguments).then(\n        // tslint:disable-next-line:no-any\n        (res) => {\n            res = Array.isArray(res) ? res : [res];\n            cb(null, ...res);\n        }, (err) => cb(err));\n    };\n    wrapper.callbackified_ = true;\n    return wrapper;\n}\nexports.callbackify = callbackify;\n/**\n * Callbackifies certain Class methods. This will not callbackify private or\n * streaming methods.\n *\n * @param {module:common/service} Class - Service class.\n * @param {object=} options - Configuration object.\n */\nfunction callbackifyAll(\n// tslint:disable-next-line:variable-name\nClass, options) {\n    const exclude = (options && options.exclude) || [];\n    const ownPropertyNames = Object.getOwnPropertyNames(Class.prototype);\n    const methods = ownPropertyNames.filter(methodName => {\n        // clang-format off\n        return (!exclude.includes(methodName) &&\n            typeof Class.prototype[methodName] === 'function' && // is it a function?\n            !/^_|(Stream|_)|^constructor$/.test(methodName) // is it callbackifyable?\n        );\n        // clang-format on\n    });\n    methods.forEach(methodName => {\n        const originalMethod = Class.prototype[methodName];\n        if (!originalMethod.callbackified_) {\n            Class.prototype[methodName] = exports.callbackify(originalMethod);\n        }\n    });\n}\nexports.callbackifyAll = callbackifyAll;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/promisify/build/src/index.js\n");

/***/ })

};
;